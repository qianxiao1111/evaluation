[{"query": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm"], "label_col": ["frpm.Free Meal Count (K-12)", "frpm.County Name"]}, {"query": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm"], "label_col": ["frpm.Free Meal Count (Ages 5-17)", "frpm.Educational Option Type"]}, {"query": "Please list the zip code of all the charter schools in Fresno County Office of Education.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.Zip", "frpm.CDSCode", "schools.CDSCode", "frpm.District Name", "frpm.Charter School (Y/N)"]}, {"query": "What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.MailStreet", "frpm.CDSCode", "schools.CDSCode", "frpm.FRPM Count (K-12)"]}, {"query": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.Phone", "frpm.CDSCode", "schools.CDSCode", "frpm.Charter Funding Type", "frpm.Charter School (Y/N)", "schools.OpenDate"]}, {"query": "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.School", "satscores.cds", "schools.CDSCode", "schools.Virtual", "satscores.AvgScrMath"]}, {"query": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.School", "satscores.cds", "schools.CDSCode", "schools.Magnet", "satscores.NumTstTakr"]}, {"query": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.Phone", "satscores.cds", "schools.CDSCode", "satscores.NumGE1500"]}, {"query": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "frpm"], "label_col": ["frpm.School Code", "satscores.cds", "frpm.CDSCode", "satscores.AvgScrMath", "frpm.Charter Funding Type"]}, {"query": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "frpm"], "label_col": ["frpm.FRPM Count (Ages 5-17)", "satscores.cds", "frpm.CDSCode", "satscores.AvgScrRead"]}, {"query": "Please list the codes of the schools with a total enrollment of over 500.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "frpm"], "label_col": ["frpm.CDSCode", "schools.CDSCode", "frpm.Enrollment (K-12)", "frpm.Enrollment (Ages 5-17)"]}, {"query": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "satscores"], "label_col": ["frpm.Free Meal Count (Ages 5-17)", "frpm.Enrollment (Ages 5-17)", "frpm.CDSCode", "satscores.cds", "satscores.NumGE1500", "satscores.NumTstTakr"]}, {"query": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.Phone", "schools.CDSCode", "satscores.cds", "satscores.NumGE1500", "satscores.NumTstTakr"]}, {"query": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "frpm"], "label_col": ["schools.NCESSchool", "schools.CDSCode", "frpm.CDSCode", "frpm.Enrollment (Ages 5-17)"]}, {"query": "Which active district has the highest average score in Reading?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.District", "schools.CDSCode", "satscores.cds", "schools.StatusType", "satscores.AvgScrRead"]}, {"query": "How many schools in merged Alameda have number of test takers less than 100?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.CDSCode", "satscores.cds", "schools.StatusType", "satscores.NumTstTakr", "schools.County"]}, {"query": "What is the charter number of the school that the average score in Writing is 499?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.CharterNum", "schools.CDSCode", "satscores.cds", "satscores.AvgScrWrite"]}, {"query": "How many schools in Contra Costa (directly funded) have number of test takers not more than 250?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "satscores"], "label_col": ["frpm.CDSCode", "satscores.cds", "frpm.Charter Funding Type", "frpm.County Name", "satscores.NumTstTakr"]}, {"query": "What is the phone number of the school that has the highest average score in Math?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.Phone", "schools.CDSCode", "satscores.cds", "satscores.AvgScrMath"]}, {"query": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.School Name", "frpm.CDSCode", "schools.CDSCode", "schools.County", "frpm.Low Grade", "frpm.High Grade"]}, {"query": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm"], "label_col": ["frpm.CDSCode", "frpm.County Name", "frpm.Free Meal Count (K-12)"]}, {"query": "Which school in Contra Costa has the highest number of test takers?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores"], "label_col": ["satscores.sname", "satscores.cname", "satscores.NumTstTakr"]}, {"query": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "frpm"], "label_col": ["schools.School", "schools.StreetAbr", "schools.CDSCode", "frpm.CDSCode", "frpm.Enrollment (K-12)", "frpm.Enrollment (Ages 5-17)"]}, {"query": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "frpm"], "label_col": ["frpm.School Name", "satscores.cds", "frpm.CDSCode", "frpm.Free Meal Count (K-12)", "frpm.Enrollment (K-12)", "satscores.NumGE1500"]}, {"query": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "frpm"], "label_col": ["satscores.sname", "frpm.Charter Funding Type", "satscores.cds", "frpm.CDSCode", "frpm.District Name", "satscores.AvgScrMath"]}, {"query": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.School Name", "schools.Zip", "schools.Street", "schools.City", "schools.State", "frpm.CDSCode", "schools.CDSCode", "schools.County", "frpm.Free Meal Count (Ages 5-17)", "frpm.School Type"]}, {"query": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "satscores"], "label_col": ["schools.School", "satscores.AvgScrWrite", "schools.Phone", "schools.OpenDate", "schools.ClosedDate", "schools.CDSCode", "satscores.cds"]}, {"query": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.School", "schools.DOC", "frpm.CDSCode", "schools.CDSCode", "schools.FundingType", "frpm.Enrollment (K-12)", "frpm.Enrollment (Ages 5-17)"]}, {"query": "When did the first-through-twelfth-grade school with the largest enrollment open?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.OpenDate", "frpm.CDSCode", "schools.CDSCode", "frpm.Enrollment (K-12)"]}, {"query": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.City", "frpm.CDSCode", "schools.CDSCode", "frpm.Enrollment (K-12)"]}, {"query": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm"], "label_col": ["frpm.Free Meal Count (K-12)"]}, {"query": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.FRPM Count (K-12)", "frpm.CDSCode", "schools.CDSCode", "schools.SOC"]}, {"query": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.Website", "frpm.School Name", "frpm.CDSCode", "schools.CDSCode", "frpm.Free Meal Count (Ages 5-17)"]}, {"query": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools", "frpm"], "label_col": ["frpm.Free Meal Count (Ages 5-17)", "schools.CDSCode", "frpm.CDSCode", "schools.AdmFName1", "schools.AdmLName1"]}, {"query": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.AdmEmail1", "frpm.CDSCode", "schools.CDSCode", "frpm.Charter School (Y/N)", "frpm.Enrollment (K-12)"]}, {"query": "Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.AdmFName1", "schools.AdmLName1", "schools.AdmFName2", "schools.AdmLName2", "schools.AdmFName3", "schools.AdmLName3", "satscores.cds", "schools.CDSCode", "satscores.NumGE1500"]}, {"query": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.Street", "schools.City", "schools.Zip", "schools.State", "satscores.cds", "schools.CDSCode", "satscores.NumGE1500", "satscores.NumTstTakr"]}, {"query": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.Website", "satscores.cds", "schools.CDSCode", "satscores.NumTstTakr", "schools.County"]}, {"query": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["satscores.NumTstTakr", "satscores.cds", "schools.CDSCode", "schools.OpenDate", "schools.County"]}, {"query": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.Phone", "satscores.cds", "schools.CDSCode", "schools.District", "satscores.AvgScrRead"]}, {"query": "Which exclusively virtual schools have the top 5 highest average reading scores?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.School", "satscores.cds", "schools.CDSCode", "schools.Virtual", "satscores.AvgScrRead"]}, {"query": "What is the type of education offered in the school who scored the highest average in Math?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.EdOpsName", "satscores.cds", "schools.CDSCode", "satscores.AvgScrMath"]}, {"query": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["satscores.AvgScrMath", "schools.County", "satscores.cds", "schools.CDSCode", "satscores.AvgScrRead", "satscores.AvgScrWrite"]}, {"query": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["satscores.AvgScrWrite", "schools.City", "satscores.cds", "schools.CDSCode", "satscores.NumGE1500"]}, {"query": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.School", "satscores.AvgScrWrite", "satscores.cds", "schools.CDSCode", "schools.AdmFName1", "schools.AdmLName1"]}, {"query": "Which state special schools have the highest number of enrollees from grades 1 through 12?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.School", "frpm.CDSCode", "schools.CDSCode", "schools.DOC", "frpm.Enrollment (K-12)"]}, {"query": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.DOC", "schools.County", "schools.OpenDate"]}, {"query": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.DOC", "schools.StatusType", "schools.County"]}, {"query": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.County", "schools.School", "schools.ClosedDate", "schools.StatusType"]}, {"query": "What is the postal street address for the school with the 6th highest Math average? Indicate the school's name.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.MailStreet", "schools.School", "satscores.cds", "schools.CDSCode", "satscores.AvgScrMath"]}, {"query": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.MailStreet", "schools.School", "satscores.cds", "schools.CDSCode", "satscores.AvgScrRead"]}, {"query": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["satscores.cds", "schools.CDSCode", "schools.MailCity", "satscores.AvgScrRead", "satscores.AvgScrMath", "satscores.AvgScrWrite"]}, {"query": "How many test takers are there at the school/s whose mailing city address is in Fresno?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["satscores.NumTstTakr", "satscores.cds", "schools.CDSCode", "schools.MailCity"]}, {"query": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.MailZip", "schools.AdmFName1", "schools.AdmLName1"]}, {"query": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.County", "schools.MailState"]}, {"query": "Of all the schools with a mailing state address in California, how many are active in San Joaquin?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.CDSCode", "schools.City", "schools.MailState", "schools.StatusType"]}, {"query": "What is the phone number and extension number for the school that had the 333rd highest average writing score?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.Phone", "schools.Ext", "satscores.cds", "schools.CDSCode", "satscores.AvgScrWrite"]}, {"query": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.Phone", "schools.Ext", "schools.School", "schools.Zip"]}, {"query": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.Website", "schools.AdmFName1", "schools.AdmLName1"]}, {"query": "What are the websites for all the partially virtual chartered schools located in San Joaquin?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.Website", "schools.County", "schools.Virtual", "schools.Charter"]}, {"query": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.DOC", "schools.Charter", "schools.City"]}, {"query": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.School", "frpm.CDSCode", "schools.CDSCode", "schools.County", "schools.Charter", "frpm.Free Meal Count (K-12)", "frpm.Enrollment (K-12)"]}, {"query": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.AdmFName1", "schools.AdmLName1", "schools.School", "schools.City", "schools.Charter", "schools.CharterNum"]}, {"query": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.CharterNum", "schools.MailCity"]}, {"query": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.FundingType", "schools.County", "schools.Charter"]}, {"query": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.OpenDate", "schools.County", "schools.FundingType"]}, {"query": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.ClosedDate", "schools.City", "schools.DOCType"]}, {"query": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.County", "schools.ClosedDate", "schools.StatusType", "schools.SOC", "schools.School"]}, {"query": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.NCESDist", "schools.SOC"]}, {"query": "How many active and closed District Community Day Schools are there in the county of Alpine?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.School", "schools.StatusType", "schools.County"]}, {"query": "What is the district code for the School that does not offer a magnet program in the city of Fresno?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.District Code", "frpm.CDSCode", "schools.CDSCode", "schools.City", "schools.Magnet"]}, {"query": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.Enrollment (Ages 5-17)", "frpm.CDSCode", "schools.CDSCode", "schools.EdOpsCode", "schools.City", "frpm.Academic Year"]}, {"query": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.FRPM Count (Ages 5-17)", "frpm.CDSCode", "schools.CDSCode", "schools.MailStreet", "schools.SOCType"]}, {"query": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.Low Grade", "frpm.CDSCode", "schools.CDSCode", "schools.NCESDist", "schools.EdOpsCode"]}, {"query": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.EILName", "schools.School", "frpm.CDSCode", "schools.CDSCode", "frpm.NSLP Provision Status", "frpm.County Code"]}, {"query": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.City", "frpm.CDSCode", "schools.CDSCode", "frpm.NSLP Provision Status", "schools.County", "frpm.Low Grade", "frpm.High Grade", "schools.EILCode"]}, {"query": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.School", "frpm.FRPM Count (Ages 5-17)", "frpm.CDSCode", "schools.CDSCode", "schools.County", "schools.GSserved"]}, {"query": "What is the most common type of grade span served in the city of Adelanto?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.GSserved", "schools.City"]}, {"query": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.County", "schools.Virtual"]}, {"query": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.School Type", "frpm.School Name", "schools.Latitude", "frpm.CDSCode", "schools.CDSCode"]}, {"query": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.City", "frpm.Low Grade", "frpm.School Name", "frpm.CDSCode", "schools.CDSCode", "schools.State", "schools.Latitude"]}, {"query": "What is the grade span offered in the school with the highest longitude?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.GSoffered", "schools.longitude"]}, {"query": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.City", "schools.CDSCode", "frpm.CDSCode", "schools.Magnet", "schools.GSoffered", "frpm.NSLP Provision Status"]}, {"query": "What are the two most common first names among the school administrators? Indicate the district to which they administer.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.schools.AdmFName1", "schools.schools.District", "schools.admfname1"]}, {"query": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["frpm.Free Meal Count (K-12)", "frpm.District Code", "frpm.CDSCode", "schools.CDSCode", "schools.AdmFName1"]}, {"query": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["schools"], "label_col": ["schools.AdmLName1", "schools.District", "schools.County", "schools.School", "schools.CharterNum"]}, {"query": "What is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools?", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["frpm", "schools"], "label_col": ["schools.AdmEmail1", "frpm.CDSCode", "schools.CDSCode", "schools.County", "schools.City", "schools.DOC", "schools.OpenDate", "schools.SOC"]}, {"query": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.", "table_infos": "table:\n{'frpm': ['CDSCode', 'Academic Year', 'County Code', 'District Code', 'School Code', 'County Name', 'District Name', 'School Name', 'District Type', 'School Type', 'Educational Option Type', 'NSLP Provision Status', 'Charter School (Y/N)', 'Charter School Number', 'Charter Funding Type', 'IRC', 'Low Grade', 'High Grade', 'Enrollment (K-12)', 'Free Meal Count (K-12)', 'Percent (%) Eligible Free (K-12)', 'FRPM Count (K-12)', 'Percent (%) Eligible FRPM (K-12)', 'Enrollment (Ages 5-17)', 'Free Meal Count (Ages 5-17)', 'Percent (%) Eligible Free (Ages 5-17)', 'FRPM Count (Ages 5-17)', 'Percent (%) Eligible FRPM (Ages 5-17)', '2013-14 CALPADS Fall 1 Certification Status'], 'satscores': ['cds', 'rtype', 'school name', 'district name', 'county name', 'enrollment (1st-12nd grade)', 'Number of Test Takers', 'average scores in Reading', 'average scores in Math', 'average scores in writing', 'Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500'], 'schools': ['CDSCode', 'National Center for Educational Statistics school district identification number', 'National Center for Educational Statistics school identification number', 'StatusType', 'County', 'District', 'School', 'Street', 'street address', 'City', 'Zip', 'State', 'MailStreet', 'mailing street address', 'mailing city', 'mailing zip', 'mailing state', 'Phone', 'extension', 'Website', 'OpenDate', 'ClosedDate', 'Charter', 'CharterNum', 'FundingType', 'District Ownership Code', 'The District Ownership Code Type', 'School Ownership Code', 'School Ownership Code Type', 'Education Option Code', 'Educational Option Name', 'Educational Instruction Level Code', 'Educational Instruction Level Name', 'grade span offered', 'grade span served.', 'Virtual', 'Magnet', 'Latitude', 'Longitude', \"administrator's first name 1\", \"administrator's last name 1\", \"administrator's email address 1\", \"administrator's first name 2\", \"administrator's last name 2\", \"administrator's email address 2\", \"administrator's first name 3\", \"administrator's last name 3\", \"administrator's email address 3\", 'Last Update']}\nforeign_keys:['frpm.CDSCode = schools.CDSCode', 'satscores.cds = schools.CDSCode']\n", "label_table": ["satscores", "schools"], "label_col": ["schools.AdmEmail1", "schools.School", "satscores.cds", "schools.CDSCode", "satscores.NumGE1500"]}, {"query": "How many accounts who choose issuance after transaction are staying in East Bohemia region?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["district.district_id", "account.district_id", "district.A3", "account.frequency"]}, {"query": "How many accounts who have region in Prague are eligible for loans?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "loan", "district"], "label_col": ["account.account_id", "loan.account_id", "account.district_id", "district.district_id", "district.A3"]}, {"query": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district"], "label_col": ["district.A13", "district.A12"]}, {"query": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["district.district_id", "client.district_id", "client.gender", "district.A11"]}, {"query": "How many male customers who are living in North Bohemia have average salary greater than 8000?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.gender", "district.A3", "district.A11"]}, {"query": "How many customers who choose statement of weekly issuance are Owner?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "disp"], "label_col": ["account.account_id", "disp.account_id", "disp.type", "account.frequency"]}, {"query": "List out the clients who choose statement of issuance after transaction are Disponent?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "disp"], "label_col": ["disp.client_id", "account.account_id", "disp.account_id", "account.frequency", "disp.type"]}, {"query": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account"], "label_col": ["account.account_id", "loan.account_id", "loan.date", "account.frequency", "loan.amount"]}, {"query": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "disp"], "label_col": ["loan.account_id", "disp.account_id", "loan.date", "loan.duration", "loan.amount"]}, {"query": "Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["client.client_id", "district.district_id", "client.district_id", "client.gender", "client.birth_date", "district.A2"]}, {"query": "List out the accounts who have the earliest trading date in 1995 ?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans"], "label_col": ["trans.account_id"]}, {"query": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans", "account"], "label_col": ["account.account_id", "trans.account_id", "account.date", "trans.amount"]}, {"query": "Which client issued his/her card in 1994/3/3, give his/her client id.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "card"], "label_col": ["disp.client_id", "client.client_id", "disp.disp_id", "card.disp_id", "card.issued"]}, {"query": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "trans"], "label_col": ["account.date", "account.account_id", "trans.account_id", "trans.amount", "trans.date"]}, {"query": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "loan"], "label_col": ["account.district_id", "account.account_id", "loan.account_id", "loan.date"]}, {"query": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "trans"], "label_col": ["trans.amount", "account.account_id", "trans.account_id", "account.date"]}, {"query": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["client.gender", "district.district_id", "client.district_id", "district.A11", "client.birth_date"]}, {"query": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "trans"], "label_col": ["trans.amount", "loan.account_id", "trans.account_id", "loan.amount", "trans.date"]}, {"query": "How many clients opened their accounts in Jesenik branch were women?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.gender", "district.A2"]}, {"query": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["disp", "trans"], "label_col": ["disp.disp_id", "disp.account_id", "trans.account_id", "trans.date", "trans.amount"]}, {"query": "How many accounts were opened in Litomerice in 1996?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["account.account_id", "district.district_id", "account.district_id", "account.date", "district.A2"]}, {"query": "For the female client who was born in 1976/1/29, which district did she opened her account?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["district.A2", "district.district_id", "client.district_id", "client.birth_date", "client.gender"]}, {"query": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account", "client"], "label_col": ["client.birth_date", "loan.account_id", "account.account_id", "account.district_id", "client.district_id", "loan.date", "loan.amount"]}, {"query": "For the first client who opened his/her account in Prague, what is his/her account ID?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district"], "label_col": ["account.account_id", "account.district_id", "district.district_id", "district.A3", "account.date"]}, {"query": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.gender", "client.client_id", "client.district_id", "district.district_id", "district.A3", "district.A4"]}, {"query": "For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account", "trans"], "label_col": ["trans.date", "trans.balance", "loan.account_id", "account.account_id", "trans.account_id", "loan.date"]}, {"query": "What is the percentage of loan amount that has been fully paid with no issue.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan"], "label_col": ["loan.status", "loan.amount"]}, {"query": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan"], "label_col": ["loan.status", "loan.amount"]}, {"query": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district"], "label_col": ["account.account_id", "district.A2", "district.A3", "account.district_id", "district.district_id", "account.frequency", "account.date"]}, {"query": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district"], "label_col": ["account.account_id", "account.frequency", "account.district_id", "district.district_id", "district.A3", "account.date"]}, {"query": "List account ID and account opening date for accounts from 'Prachatice'.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district"], "label_col": ["account.account_id", "account.date", "account.district_id", "district.district_id", "district.A2"]}, {"query": "State the district and region for loan ID '4990'.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "loan"], "label_col": ["district.A2", "district.A3", "account.district_id", "district.district_id", "account.account_id", "loan.account_id", "loan.loan_id"]}, {"query": "Provide the account ID, district and region for loan amount greater than USD300,000.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "loan"], "label_col": ["account.account_id", "district.A2", "district.A3", "account.district_id", "district.district_id", "loan.account_id", "loan.amount"]}, {"query": "List the loan ID, district and average salary for loan with duration of 60 months.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "loan"], "label_col": ["loan.loan_id", "district.A2", "district.A11", "account.district_id", "district.district_id", "account.account_id", "loan.account_id", "loan.duration"]}, {"query": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account", "district"], "label_col": ["district.A13", "district.A12", "loan.account_id", "account.account_id", "account.district_id", "district.district_id", "loan.status"]}, {"query": "List the account IDs with monthly issuance of statements.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account"], "label_col": ["account.account_id", "account.Frequency"]}, {"query": "List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["district.A2", "client.client_id", "client.district_id", "district.district_id", "client.gender"]}, {"query": "How many of the account holders in South Bohemia still do not own credit cards?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client", "disp"], "label_col": ["disp.account_id", "district.district_id", "client.district_id", "client.client_id", "disp.client_id", "district.A3", "disp.type"]}, {"query": "Which district has highest active loan?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "loan"], "label_col": ["district.A3", "account.district_id", "district.district_id", "account.account_id", "loan.account_id", "loan.status", "loan.amount"]}, {"query": "What is the average loan amount by male borrowers?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account", "loan"], "label_col": ["loan.amount", "client.district_id", "account.district_id", "account.account_id", "loan.account_id", "client.gender"]}, {"query": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district"], "label_col": ["district.district_id", "district.A2", "district.A13"]}, {"query": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["account.account_id", "district.district_id", "account.district_id", "district.A16"]}, {"query": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans", "account"], "label_col": ["trans.account_id", "account.account_id", "trans.balance", "trans.operation", "account.frequency"]}, {"query": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "loan"], "label_col": ["account.account_id", "loan.account_id", "loan.date", "account.frequency", "loan.amount"]}, {"query": "How many accounts have running contracts in Branch location 1?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "loan"], "label_col": ["account.account_id", "account.district_id", "district.district_id", "loan.account_id", "loan.status"]}, {"query": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.gender", "district.A15"]}, {"query": "How many high-level credit cards have \"disponent\" type of disposition?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card", "disp"], "label_col": ["card.card_id", "card.disp_id", "disp.disp_id", "card.type", "disp.type"]}, {"query": "How many accounts are there in the district of \"Pisek\"?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district"], "label_col": ["account.account_id", "account.district_id", "district.district_id", "district.A2"]}, {"query": "Which districts have transactions greater than USS$10,000 in 1997?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "trans"], "label_col": ["account.district_id", "district.district_id", "account.account_id", "trans.account_id", "trans.date", "trans.amount"]}, {"query": "Which accounts placed orders for household payment in Pisek?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans", "account", "district"], "label_col": ["account.account_id", "trans.account_id", "account.district_id", "district.district_id", "trans.k_symbol", "district.A2"]}, {"query": "What are the accounts that have both gold and junior credit cards?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card", "disp"], "label_col": ["disp.account_id", "card.disp_id", "disp.disp_id", "card.type"]}, {"query": "How much is the average amount in credit card made by account holders in a month, in year 2021?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card", "disp", "trans"], "label_col": ["trans.amount", "card.disp_id", "disp.disp_id", "disp.account_id", "trans.account_id", "trans.date", "trans.operation"]}, {"query": "Who are the female account holders who own credit cards and also have loans?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "loan", "card"], "label_col": ["client.client_id", "disp.client_id", "disp.account_id", "loan.account_id", "disp.disp_id", "card.disp_id", "client.gender"]}, {"query": "How many female clients' accounts are in the region of South Bohemia?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.gender", "district.A3"]}, {"query": "Please list the accounts whose district is Tabor that are eligible for loans.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "disp"], "label_col": ["account.account_id", "district.district_id", "account.district_id", "disp.account_id", "disp.type", "district.A2"]}, {"query": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "disp"], "label_col": ["disp.type", "district.district_id", "account.district_id", "account.account_id", "disp.account_id", "district.A11"]}, {"query": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "trans"], "label_col": ["account.account_id", "district.district_id", "account.district_id", "trans.account_id", "trans.bank", "district.A3"]}, {"query": "Please list the name of the districts with accounts that made withdrawal transactions.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "trans"], "label_col": ["district.A2", "district.district_id", "account.district_id", "account.account_id", "trans.account_id", "trans.type"]}, {"query": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["district.A15", "district.district_id", "account.district_id", "account.date"]}, {"query": "How many 'classic' cards are eligible for loan?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card", "disp"], "label_col": ["card.card_id", "card.disp_id", "disp.disp_id", "card.type", "disp.type"]}, {"query": "How many male clients in 'Hl.m. Praha' district?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.gender", "district.A2"]}, {"query": "How many percent of 'Gold' cards were issued prior to 1998?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card"], "label_col": ["card.card_id", "card.issued"]}, {"query": "Who is the owner of the account with the largest loan amount?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["disp", "loan"], "label_col": ["disp.client_id", "disp.account_id", "loan.account_id", "disp.type", "loan.amount"]}, {"query": "What is the number of committed crimes in 1995 in the district of the account with the id 532?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["district.A15", "district.district_id", "account.district_id", "account.account_id"]}, {"query": "What is the district Id of the account that placed the order with the id 33333?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["order", "account", "district"], "label_col": ["district.district_id", "order.account_id", "account.account_id", "account.district_id", "order.order_id"]}, {"query": "List all the withdrawals in cash transactions that the client with the id 3356 makes.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "account", "trans"], "label_col": ["trans.trans_id", "client.client_id", "disp.client_id", "disp.account_id", "account.account_id", "trans.account_id", "trans.operation"]}, {"query": "Among the weekly issuance accounts, how many have a loan of under 200000?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account"], "label_col": ["loan.account_id", "account.account_id", "account.frequency", "loan.amount"]}, {"query": "What type of credit card does the client with the id 13539 own?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["disp", "client", "card"], "label_col": ["card.type", "disp.client_id", "client.client_id", "disp.disp_id", "card.disp_id"]}, {"query": "What is the region of the client with the id 3541 from?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["client.district_id", "district.A3", "district.district_id", "client.client_id"]}, {"query": "Which district has the most accounts with loan contracts finished with no problems?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "loan"], "label_col": ["district.district_id", "account.district_id", "account.account_id", "loan.account_id", "loan.status"]}, {"query": "Who placed the order with the id 32423?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["order", "account", "client"], "label_col": ["client.client_id", "order.account_id", "account.account_id", "account.district_id", "client.district_id", "order.order_id"]}, {"query": "Please list all the transactions made by accounts from district 5.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account", "trans"], "label_col": ["trans.trans_id", "district.district_id", "account.district_id", "account.account_id", "trans.account_id"]}, {"query": "How many of the accounts are from Jesenik district?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "account"], "label_col": ["account.account_id", "district.district_id", "account.district_id", "district.A2"]}, {"query": "List all the clients' IDs whose junior credit cards were issued after 1996.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["card", "disp"], "label_col": ["disp.client_id", "card.disp_id", "disp.disp_id", "card.type", "card.issued"]}, {"query": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["client.gender", "client.client_id", "district.district_id", "client.district_id", "district.A11"]}, {"query": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account", "disp", "client"], "label_col": ["loan.date", "loan.amount", "loan.account_id", "account.account_id", "disp.account_id", "client.client_id", "disp.client_id", "client.gender", "disp.type"]}, {"query": "How many credit card withdrawals were recorded after 1995?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans"], "label_col": ["trans.account_id"]}, {"query": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district"], "label_col": ["district.A3", "district.A16"]}, {"query": "How many owner and disponent dispositions are there from account number 1 to account number 10?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["disp"], "label_col": ["disp.account_id"]}, {"query": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "order"], "label_col": ["account.frequency", "order.k_symbol", "account.account_id", "order.account_id", "order.amount"]}, {"query": "What year was account owner number 130 born?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "account"], "label_col": ["client.birth_date", "client.client_id", "disp.client_id", "disp.account_id", "account.account_id"]}, {"query": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "disp"], "label_col": ["account.account_id", "disp.account_id", "disp.type", "account.frequency"]}, {"query": "What is the amount of debt that client number 992 has, and how is this client doing with payments?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account", "loan"], "label_col": ["loan.amount", "loan.status", "client.district_id", "account.district_id", "account.account_id", "loan.account_id", "client.client_id"]}, {"query": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account", "trans"], "label_col": ["trans.balance", "client.gender", "client.district_id", "account.district_id", "account.account_id", "trans.account_id", "client.client_id", "trans.trans_id"]}, {"query": "Which kind of credit card does client number 9 possess?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "card"], "label_col": ["card.type", "client.client_id", "disp.client_id", "disp.disp_id", "card.disp_id"]}, {"query": "How much, in total, did client number 617 pay for all of the transactions in 1998?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account", "trans"], "label_col": ["trans.amount", "client.district_id", "account.district_id", "account.account_id", "trans.account_id", "trans.date", "client.client_id"]}, {"query": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district", "account"], "label_col": ["client.client_id", "account.account_id", "client.district_id", "district.district_id", "account.district_id", "district.A3", "client.birth_date"]}, {"query": "Please provide the IDs of the 3 female clients with the largest loans.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account", "loan"], "label_col": ["client.client_id", "client.district_id", "account.district_id", "account.account_id", "loan.account_id", "client.gender", "loan.amount"]}, {"query": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["trans", "account", "client"], "label_col": ["trans.account_id", "account.account_id", "account.district_id", "client.district_id", "client.birth_date", "client.gender", "trans.amount", "trans.k_symbol"]}, {"query": "How many female customers have a junior credit card?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "disp", "card"], "label_col": ["client.client_id", "disp.client_id", "disp.disp_id", "card.disp_id", "client.gender", "card.type"]}, {"query": "What proportion of customers who have accounts at the Prague branch are female?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["district", "client"], "label_col": ["client.gender", "client.client_id", "district.district_id", "client.district_id", "district.A3"]}, {"query": "What percentage of male clients request for weekly statements to be issued?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "account"], "label_col": ["client.gender", "client.client_id", "client.district_id", "account.district_id", "account.frequency"]}, {"query": "How many clients who choose statement of weekly issuance are User?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "disp"], "label_col": ["disp.account_id", "account.account_id", "account.frequency", "disp.type"]}, {"query": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["loan", "account"], "label_col": ["loan.account_id", "account.account_id", "loan.duration", "account.date", "loan.amount"]}, {"query": "Name the account numbers of female clients who are oldest and have lowest average salary?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district", "account"], "label_col": ["account.account_id", "client.district_id", "district.district_id", "account.district_id", "client.gender", "client.birth_date", "district.A11"]}, {"query": "How many clients who were born in 1920 stay in east Bohemia?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["client", "district"], "label_col": ["client.client_id", "client.district_id", "district.district_id", "client.birth_date", "district.A3"]}, {"query": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "loan"], "label_col": ["loan.account_id", "account.account_id", "loan.duration", "account.frequency"]}, {"query": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "loan"], "label_col": ["loan.payments", "account.account_id", "loan.account_id", "loan.status", "account.frequency"]}, {"query": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["account", "district", "disp"], "label_col": ["disp.client_id", "district.district_id", "district.A2", "account.district_id", "account.account_id", "disp.account_id", "disp.type"]}, {"query": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.", "table_infos": "table:\n{'account': ['account id', 'location of branch', 'frequency', 'date'], 'card': ['credit card id', 'disposition id', 'type', 'issued'], 'client': ['client_id', 'gender', 'birth_date', 'location of branch'], 'disp': ['disposition id', 'client_id', 'account_id', 'type'], 'district': ['location of branch', 'district_name', 'region', 'number of inhabitants', 'no. of municipalities with inhabitants < 499', 'no. of municipalities with inhabitants 500-1999', 'no. of municipalities with inhabitants 2000-9999', 'no. of municipalities with inhabitants > 10000', 'A9', 'ratio of urban inhabitants', 'average salary', 'unemployment rate 1995', 'unemployment rate 1996', 'no. of entrepreneurs per 1000 inhabitants', 'no. of committed crimes 1995', 'no. of committed crimes 1996'], 'loan': ['loan_id', 'account_id', 'date', 'amount', 'duration', 'monthly payments', 'status'], 'order': ['order_id', 'account_id', 'bank of the recipient', 'account of the recipient', 'debited amount', 'characterization of the payment'], 'trans': ['transaction id', 'account_id', 'date of transaction', '+/- transaction', 'mode of transaction', 'amount of money', 'balance after transaction', 'characterization of the transaction', 'bank of the partner', 'account of the partner']}\nforeign_keys:['account.location of branch = district.location of branch', 'card.disposition id = disp.disposition id', 'client.location of branch = district.location of branch', 'disp.client_id = client.client_id', 'disp.account_id = account.account id', 'loan.account_id = account.account id', 'order.account_id = account.account id', 'trans.account_id = account.account id']\n", "label_table": ["disp", "card", "client"], "label_col": ["disp.client_id", "client.birth_date", "card.disp_id", "disp.disp_id", "client.client_id", "card.type", "disp.type"]}, {"query": "What is the most common bond type?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond_type", "bond.bond_id"]}, {"query": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "atom"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "atom.element", "molecule.label"]}, {"query": "Calculate the average number of oxygen atoms in single-bonded molecules.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.molecule_id", "atom.element", "bond.molecule_id", "bond.bond_type"]}, {"query": "On average how many carcinogenic molecules are single bonded?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "atom", "molecule"], "label_col": ["molecule.molecule_id", "bond.bond_type", "bond.molecule_id", "atom.molecule_id", "molecule.label"]}, {"query": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "atom.element", "molecule.label"]}, {"query": "Find the triple-bonded molecules which are carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.molecule_id", "bond.molecule_id", "bond.bond_type", "molecule.label"]}, {"query": "What is the percentage of carbon in double-bond molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.element", "atom.atom_id", "atom.molecule_id", "bond.molecule_id", "bond.bond_type"]}, {"query": "How many triple type bonds are there?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_id", "bond.bond.bond_type"]}, {"query": "In how many atoms is there no bromine?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.element"]}, {"query": "Of the first 100 molecules in number order, how many are carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule_id", "molecule.molecule.label"]}, {"query": "Identify by their ID the molecules in which there is silicon.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.element"]}, {"query": "What elements are in the TR004_8_9 bond atoms?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id"]}, {"query": "What elements are in a double type bond?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond", "connected"], "label_col": ["atom.element", "atom.molecule_id", "bond.molecule_id", "atom.atom_id", "connected.atom_id", "bond.bond_type"]}, {"query": "Which type of label is the most numerous in atoms with hydrogen?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["T.label", "molecule.label", "molecule.molecule_id", "atom.molecule_id", "atom.element"]}, {"query": "Tellurium is in what type of bond?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected", "atom"], "label_col": ["bond.bond_type", "bond.bond_id", "connected.bond_id", "connected.atom_id", "atom.atom_id", "atom.element"]}, {"query": "What atoms are connected in single type bonds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["connected.atom_id", "connected.atom_id2", "bond.bond_id", "connected.bond_id", "bond.bond_type"]}, {"query": "Indicate which atoms are connected in non-carcinogenic type molecules.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "connected"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "connected.atom_id", "molecule.label"]}, {"query": "Which element is the least numerous in non-carcinogenic molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["T.element", "atom.element", "atom.molecule_id", "molecule.molecule_id", "molecule.label"]}, {"query": "What type of bond is there between the atoms TR004_8 and TR004_20?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.bond_type", "bond.bond_id", "connected.bond_id", "connected.atom_id", "connected.atom_id2"]}, {"query": "What type of label is not on molecules with atoms with tin?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.label", "atom.molecule_id", "molecule.molecule_id", "atom.element"]}, {"query": "How many atoms with iodine and sulfur type elements are there in single bond molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected", "bond"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id", "bond.bond_id", "bond.bond_type"]}, {"query": "Identify all connected atoms with a triple bond.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["connected.atom_id", "connected.atom_id2", "bond.bond_id", "connected.bond_id", "bond.bond_type"]}, {"query": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.atom_id", "connected.atom_id2", "atom.atom_id", "atom.molecule_id"]}, {"query": "What percentage of carcinogenic-type molecules does not contain fluorine?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "molecule.molecule_id", "atom.molecule_id", "molecule.label"]}, {"query": "What is the percentage of carcinogenic molecules in triple type bonds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["molecule.label", "molecule.molecule_id", "atom.molecule_id", "bond.molecule_id", "bond.bond_type"]}, {"query": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.molecule_id"]}, {"query": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_id", "bond.bond.molecule_id"]}, {"query": "What is the difference between the number of molecules that are carcinogenic and those that are not?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.T.label", "molecule.T.molecule_id"]}, {"query": "What are the atom IDs of the bond TR_000_2_5?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected"], "label_col": ["connected.connected.atom_id", "connected.connected.bond_id"]}, {"query": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected"], "label_col": ["connected.connected.bond_id", "connected.connected.atom_id2"]}, {"query": "Please list top five molecules that have double bonds in alphabetical order.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.molecule_id", "bond.bond.bond_type"]}, {"query": "What is the percentage of double bonds in the molecule TR008?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.bond_id", "bond.bond.molecule_id"]}, {"query": "What is the percentage of molecules that are carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.T.label", "molecule.T.molecule_id"]}, {"query": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.atom_id", "atom.atom.molecule_id"]}, {"query": "What is the type of bond that molecule TR000 has when involved in any bonds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.molecule_id"]}, {"query": "What are the elements of the toxicology and label of molecule TR060?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "molecule.label", "atom.molecule_id", "molecule.molecule_id"]}, {"query": "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.molecule_id"]}, {"query": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.molecule_id", "bond.molecule_id", "bond.bond_type", "molecule.label"]}, {"query": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.bond_id", "atom.atom_id", "connected.atom_id", "atom.molecule_id"]}, {"query": "How many bonds which involved atom 12 does molecule TR009 have?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["connected.bond_id", "bond.bond_id", "bond.molecule_id", "connected.atom_id", "connected.atom_id2"]}, {"query": "How many molecules are carcinogenic and have the bromine element?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "molecule.label", "atom.element"]}, {"query": "What are the bond type and the atoms of the bond ID of TR001_6_9?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.bond_type", "connected.atom_id", "connected.atom_id2", "bond.bond_id", "connected.bond_id"]}, {"query": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.molecule_id", "molecule.label", "atom.molecule_id", "atom.atom_id"]}, {"query": "How many molecules have a triple bond type?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.molecule_id", "bond.bond.bond_type"]}, {"query": "How many connections does the atom 19 have?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected"], "label_col": ["connected.connected.bond_id", "connected.connected.atom_id"]}, {"query": "List all the elements of the toxicology of the molecule \"TR004\".", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.molecule_id"]}, {"query": "How many of the molecules are not carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule.label"]}, {"query": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "atom.atom_id", "molecule.label"]}, {"query": "What are the bonds that have phosphorus and nitrogen as their atom elements?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.bond_id", "atom.atom_id", "connected.atom_id", "atom.element"]}, {"query": "Is the molecule with the most double bonds carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "bond"], "label_col": ["molecule.label", "bond.molecule_id", "bond.bond_type", "molecule.molecule_id"]}, {"query": "What is the average number of bonds the atoms with the element iodine have?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.bond_id", "atom.atom_id", "connected.atom_id", "atom.element"]}, {"query": "List the bond type and the bond ID of the atom 45.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.bond_type", "bond.bond_id", "connected.bond_id", "connected.atom_id"]}, {"query": "List all the elements of atoms that can not bond with any other atoms.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id"]}, {"query": "What are the atoms of the triple bond with the molecule \"TR447\"?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected", "bond"], "label_col": ["connected.atom_id", "connected.atom_id2", "atom.atom_id", "connected.bond_id", "bond.bond_id", "bond.bond_type", "bond.molecule_id"]}, {"query": "What are the elements of the atoms of TR144_8_19?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected", "atom"], "label_col": ["atom.element", "connected.atom_id", "atom.atom_id", "connected.bond_id"]}, {"query": "Of all the carcinogenic molecules, which one has the most double bonds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.molecule_id", "bond.bond_type", "bond.molecule_id", "molecule.label"]}, {"query": "What is the least common element of all carcinogenic molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "atom"], "label_col": ["T.element", "atom.element", "atom.molecule_id", "molecule.molecule_id", "molecule.label"]}, {"query": "What are the atoms that can bond with the atom that has the element lead?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.atom_id", "connected.atom_id2", "atom.atom_id", "atom.element"]}, {"query": "List the elements of all the triple bonds.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected", "atom"], "label_col": ["atom.element", "bond.bond_id", "connected.bond_id", "connected.atom_id", "atom.atom_id", "bond.bond_type"]}, {"query": "What proportion of single bonds are carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.label", "bond.bond_id", "bond.molecule_id", "molecule.molecule_id", "bond.bond_type"]}, {"query": "Calculate the total atoms consisting of the element carbon and hydrogen.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.element"]}, {"query": "List down atom id2 for atoms with element sulfur.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.atom_id2", "atom.atom_id", "connected.atom_id", "atom.element"]}, {"query": "What are the bond type for atoms with element Tin?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected", "bond"], "label_col": ["bond.bond_type", "atom.atom_id", "connected.atom_id", "bond.bond_id", "connected.bond_id", "atom.element"]}, {"query": "How many elements are there for single bond molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["atom.element", "molecule.molecule_id", "atom.molecule_id", "bond.molecule_id", "bond.bond_type"]}, {"query": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "bond.molecule_id", "bond.bond_type", "atom.element"]}, {"query": "Write down bond id for molecules that are carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["bond.bond_id", "bond.molecule_id", "molecule.molecule_id", "molecule.label"]}, {"query": "Among the single bond molecule id, which molecules are not carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["bond.molecule_id", "molecule.molecule_id", "molecule.label", "bond.bond_type"]}, {"query": "What is the composition of element chlorine in percentage among the single bond molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["atom.element", "atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "bond.molecule_id", "bond.bond_type"]}, {"query": "What are the labels for TR000, TR001 and TR002?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule_id", "molecule.molecule.label", "molecule.molecule.molecule_id"]}, {"query": "List down the molecule id for non carcinogenic molecules.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule.label"]}, {"query": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule.label"]}, {"query": "List down the bond type for molecules from molecule id TR000 to TR050.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "bond"], "label_col": ["bond.molecule_id", "bond.bond_type", "molecule.molecule_id"]}, {"query": "What are the elements for bond id TR001_10_11?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected", "atom"], "label_col": ["atom.element", "connected.atom_id", "atom.atom_id", "connected.bond_id"]}, {"query": "How many bond id have element iodine?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["bond.bond_id", "atom.molecule_id", "molecule.molecule_id", "bond.molecule_id", "atom.element"]}, {"query": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.label", "atom.molecule_id", "molecule.molecule_id", "atom.element"]}, {"query": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["connected.bond_id", "connected.atom_id2", "atom.element", "connected.atom_id", "atom.atom_id"]}, {"query": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "bond.molecule_id", "bond.bond_type", "atom.element", "molecule.label"]}, {"query": "What is the percentage of element chlorine in carcinogenic molecules?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "atom.molecule_id", "molecule.molecule_id", "molecule.label"]}, {"query": "List the toxicology elements associated with molecule TR001.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.molecule_id"]}, {"query": "Give me the molecule ID of the double bond type.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.molecule_id", "bond.bond.bond_type"]}, {"query": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["connected.atom_id", "connected.atom_id2", "bond.bond_id", "connected.bond_id", "bond.bond_type"]}, {"query": "What are the toxicology elements associated with bond ID TR005_16_26?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id"]}, {"query": "How many of the single bond type molecules are non-carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.molecule_id", "bond.molecule_id", "molecule.label", "bond.bond_type"]}, {"query": "What is the label for bond ID TR001_10_11?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.label", "bond.molecule_id", "molecule.molecule_id", "bond.bond_id"]}, {"query": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["bond.bond_id", "molecule.label", "bond.molecule_id", "molecule.molecule_id", "bond.bond_type"]}, {"query": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "atom.molecule_id", "molecule.molecule_id", "molecule.label", "atom.atom_id"]}, {"query": "What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "atom.atom_id", "atom.molecule_id", "molecule.label", "molecule.molecule_id"]}, {"query": "Identify whether the chemical compound that contains Calcium is carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.label", "atom.molecule_id", "molecule.molecule_id", "atom.element"]}, {"query": "Determine the bond type that is formed in the chemical compound containing element Tellurium.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["bond.bond_type", "atom.molecule_id", "bond.molecule_id", "atom.element"]}, {"query": "Name chemical elements that form a bond TR001_10_11.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected", "bond"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id", "bond.bond_id"]}, {"query": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.bond_id"]}, {"query": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.bond_id", "bond.bond.molecule_id"]}, {"query": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.label", "atom.molecule_id", "molecule.molecule_id", "atom.atom_id"]}, {"query": "Is molecule TR151 carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.label", "molecule.molecule.molecule_id"]}, {"query": "Which toxic element can be found in the molecule TR151?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.molecule_id"]}, {"query": "How many chemical compounds in the database are identified as carcinogenic.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule.label"]}, {"query": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.molecule_id", "atom.atom.element"]}, {"query": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "molecule.label"]}, {"query": "Which bond ids are double-bond with carcinogenic compound?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["bond.bond_id", "bond.molecule_id", "molecule.molecule_id", "molecule.label", "bond.bond_type"]}, {"query": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "molecule.label", "atom.element"]}, {"query": "Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected", "bond"], "label_col": ["bond.molecule_id", "bond.bond_id", "connected.atom_id", "connected.bond_id"]}, {"query": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "atom.element", "molecule.label"]}, {"query": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "molecule.molecule_id", "atom.molecule_id", "molecule.label"]}, {"query": "Is molecule TR124 carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.label", "molecule.molecule.molecule_id"]}, {"query": "What atoms comprise TR186?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.molecule_id"]}, {"query": "What is the bond type of TR007_4_19?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_type", "bond.bond.bond_id"]}, {"query": "Name the elements that comprise the atoms of bond TR001_2_4.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id"]}, {"query": "How many double bonds does TR006 have and is it carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["bond.bond_id", "molecule.label", "bond.molecule_id", "molecule.molecule_id", "bond.bond_type"]}, {"query": "List all carcinogenic molecules and their elements.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.molecule_id", "atom.element", "atom.molecule_id", "molecule.label"]}, {"query": "Name all bonds with single bond types and what atoms are connected to the molecules.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.bond_id", "connected.atom_id", "connected.atom_id2", "connected.bond_id", "bond.bond_type"]}, {"query": "Which molecules have triple bonds and list all the elements they contain.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "atom"], "label_col": ["bond.molecule_id", "atom.element", "atom.molecule_id", "bond.bond_type"]}, {"query": "Name the atoms' elements that form bond TR000_2_3.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected", "atom"], "label_col": ["atom.element", "connected.atom_id", "atom.atom_id", "connected.bond_id"]}, {"query": "How many bonds are created by bonding atoms with chlorine element?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["connected", "atom"], "label_col": ["connected.bond_id", "connected.atom_id", "atom.atom_id", "atom.element"]}, {"query": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.atom_id", "bond.bond_type", "atom.molecule_id", "bond.molecule_id"]}, {"query": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "molecule"], "label_col": ["molecule.molecule_id", "molecule.label", "bond.molecule_id", "bond.bond_type"]}, {"query": "How many molecules without sulphur element is not having double bond?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.molecule_id", "bond.molecule_id", "atom.element", "bond.bond_type"]}, {"query": "What is the carcinogenic label for bond TR001_2_4?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["molecule.label", "atom.molecule_id", "molecule.molecule_id", "bond.molecule_id", "bond.bond_id"]}, {"query": "How many atoms belong to molecule id TR005?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.molecule_id"]}, {"query": "How many single bonds are there in the list?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.bond_id", "bond.bond.bond_type"]}, {"query": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.molecule_id", "molecule.molecule_id", "atom.element", "molecule.label"]}, {"query": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.molecule_id", "molecule.molecule_id", "atom.element", "molecule.label"]}, {"query": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["molecule.label", "atom.element", "molecule.molecule_id", "atom.molecule_id"]}, {"query": "What is the molecule id of bond id TR001_1_7?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.molecule_id", "atom.atom_id", "connected.atom_id", "connected.bond_id"]}, {"query": "How many elements are contained in bond_id TR001_3_4?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "connected"], "label_col": ["atom.element", "atom.atom_id", "connected.atom_id", "connected.bond_id"]}, {"query": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.bond_type", "bond.bond_id", "connected.bond_id", "connected.atom_id", "connected.atom_id2"]}, {"query": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond", "connected"], "label_col": ["bond.molecule_id", "bond.bond_id", "connected.bond_id", "connected.atom_id", "connected.atom_id2"]}, {"query": "What is the element of toxicology for the atom with the ID of TR000_1?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.element", "atom.atom.atom_id"]}, {"query": "Is molecule TR000 is carcinogenic or not?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.label", "molecule.molecule.molecule_id"]}, {"query": "Find the percentage of atoms with single bond.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.T.bond_type", "bond.T.bond_id"]}, {"query": "How many carcinogenic molecules that consisted of Nitrogen?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "atom"], "label_col": ["molecule.molecule_id", "atom.molecule_id", "atom.element", "molecule.label"]}, {"query": "Which molecule consisted of Sulphur atom with double bond?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.molecule_id", "bond.molecule_id", "atom.element", "bond.bond_type"]}, {"query": "Which non-carcinogenic molecules consisted more than 5 atoms?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "atom"], "label_col": ["T.molecule_id", "molecule.molecule_id", "atom.atom_id", "atom.molecule_id", "molecule.label"]}, {"query": "List all the elements with double bond, consisted in molecule TR024.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.element", "atom.molecule_id", "bond.molecule_id", "bond.bond_type"]}, {"query": "Which carcinogenic molecule have the highest number of atoms consisted in it?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["T.molecule_id", "molecule.molecule_id", "atom.atom_id", "atom.molecule_id", "molecule.label"]}, {"query": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "atom", "bond"], "label_col": ["molecule.label", "molecule.molecule_id", "atom.molecule_id", "bond.molecule_id", "bond.bond_type", "atom.element"]}, {"query": "How many of the molecules are carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule"], "label_col": ["molecule.molecule.molecule_id", "molecule.molecule.label"]}, {"query": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["bond"], "label_col": ["bond.bond.molecule_id", "bond.bond.bond_type"]}, {"query": "In the molecule TR008, how many carbons are present?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom"], "label_col": ["atom.atom.atom_id", "atom.atom.molecule_id", "atom.atom.element"]}, {"query": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.element", "atom.molecule_id", "molecule.molecule_id", "atom.atom_id", "molecule.label"]}, {"query": "What is the total number of molecules with double bonded oxygen?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.molecule_id", "bond.molecule_id", "bond.bond_type", "atom.element"]}, {"query": "in molecules with triple bonds, how many of them are not carcinogenic?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["molecule", "bond"], "label_col": ["molecule.molecule_id", "bond.molecule_id", "bond.bond_type", "molecule.label"]}, {"query": "List the element and bond type included in the molecule with molecule ID of TR016.", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "bond"], "label_col": ["atom.element", "bond.bond_type", "atom.molecule_id", "bond.molecule_id"]}, {"query": "What is the atom ID of double bonded carbon in TR012 molecule?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule", "bond"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "bond.molecule_id", "bond.bond_type", "atom.element"]}, {"query": "List the atom ID of the carcinogenic molecule that contains oxygen?", "table_infos": "table:\n{'atom': ['atom id', 'molecule id', 'element'], 'bond': ['bond_id', 'molecule_id', 'bond_type'], 'connected': ['atom id', 'atom id 2', 'bond id'], 'molecule': ['molecule id', 'label']}\nforeign_keys:['atom.molecule id = molecule.molecule id', 'bond.molecule_id = molecule.molecule id', 'connected.bond id = bond.bond_id', 'connected.atom id 2 = atom.atom id', 'connected.atom id = atom.atom id']\n", "label_table": ["atom", "molecule"], "label_col": ["atom.atom_id", "atom.molecule_id", "molecule.molecule_id", "atom.element", "molecule.label"]}, {"query": "Which are the cards that have incredibly powerful foils.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.cardKingdomFoilId", "cards.cardKingdomId"]}, {"query": "What are the borderless cards available without powerful foils?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.borderColor", "cards.cardKingdomId"]}, {"query": "List the card names with value that cost more converted mana for the face.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.faceConvertedManaCost"]}, {"query": "Name all cards with 2015 frame style ranking below 100 on EDHRec.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.edhrecRank", "cards.frameVersion"]}, {"query": "List all the mythic rarity print cards banned in gladiator format.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "legalities.format", "legalities.status", "cards.rarity"]}, {"query": "For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["legalities.status", "cards.uuid", "legalities.uuid", "cards.type", "legalities.format", "cards.side"]}, {"query": "List all the card id and artist with unknown power which are legal for commander play format.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.artist", "cards.uuid", "legalities.uuid", "legalities.status", "legalities.format", "cards.power"]}, {"query": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["cards.id", "rulings.text", "cards.hasContentWarning", "cards.uuid", "rulings.uuid", "cards.artist"]}, {"query": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "cards.uuid", "rulings.uuid", "cards.name", "cards.number"]}, {"query": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["cards.name", "cards.artist", "cards.isPromo", "cards.uuid", "rulings.uuid"]}, {"query": "State the alternative languages available for card named Annul numbered 29.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "cards.uuid", "foreign_data.uuid", "cards.name", "cards.number"]}, {"query": "Name all the cards which have alternative language in Japanese.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.name", "cards.uuid", "foreign_data.uuid", "foreign_data.language"]}, {"query": "Calculate the percentage of the cards availabe in Chinese Simplified.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "cards.id", "cards.uuid", "foreign_data.uuid"]}, {"query": "List all the sets available in Italian translation. State the total number of cards per set.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.name", "sets.totalSetSize", "sets.code", "set_translations.setCode", "set_translations.language"]}, {"query": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.artist"]}, {"query": "What is the keyword found on card 'Angel of Mercy'?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.keywords", "cards.name"]}, {"query": "How many cards have infinite power?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.power"]}, {"query": "What type of promotion is of card 'Duress'?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.promoTypes", "cards.name"]}, {"query": "What is the border color of card \"Ancestor's Chosen\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.borderColor", "cards.name"]}, {"query": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.originalType", "cards.name"]}, {"query": "How many cards of legalities whose status is restricted have text boxes?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "legalities.status", "cards.isTextless"]}, {"query": "What is the description about the ruling of card \"Condemn\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "cards.uuid", "rulings.uuid", "cards.name"]}, {"query": "How many cards of legalities whose status is restricted are found in a starter deck?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "legalities.status", "cards.isStarter"]}, {"query": "What is the status of card \"Cloudchaser Eagle\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["legalities.status", "cards.uuid", "legalities.uuid", "cards.name"]}, {"query": "What is the type of card \"Benalish Knight\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.type", "cards.uuid", "foreign_data.uuid", "cards.name"]}, {"query": "What is the rule of playing card \"Benalish Knight\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["legalities.format", "cards.uuid", "legalities.uuid", "cards.name"]}, {"query": "Please provide the names of the artists who illustrated the card art in Phyrexian.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.artist", "cards.uuid", "foreign_data.uuid", "foreign_data.language"]}, {"query": "What is the percentage of borderless cards?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.borderColor", "cards.id"]}, {"query": "How many cards that illusrtated in German have been reprinted?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.id", "cards.uuid", "foreign_data.uuid", "foreign_data.language", "cards.isReprint"]}, {"query": "How many borderless cards are illustrated in Russian?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.id", "cards.uuid", "foreign_data.uuid", "cards.borderColor", "foreign_data.language"]}, {"query": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "cards.id", "cards.uuid", "foreign_data.uuid", "cards.isStorySpotlight"]}, {"query": "How many cards are there with toughness of 99?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.toughness"]}, {"query": "Name the cards that were illustrated by Aaron Boyd.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.artist"]}, {"query": "How many black border cards are only available on mtgo?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.availability", "cards.borderColor"]}, {"query": "List down all the card IDs with converted mana cost of 0.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.convertedManaCost"]}, {"query": "What are the card layout of cards with keyword of flying?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.layout", "cards.keywords"]}, {"query": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.originalType", "cards.subtypes"]}, {"query": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.cardKingdomId", "cards.cardKingdomFoilId"]}, {"query": "What are the cards belong to duel deck a? List the ID.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.duelDeck"]}, {"query": "List the edhrecRank for cards with frame version 2015.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.edhrecRank", "cards.frameVersion"]}, {"query": "List down the name of artists for cards in Chinese Simplified.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.artist", "cards.uuid", "foreign_data.uuid", "foreign_data.language"]}, {"query": "What are the cards that only available in paper and Japanese language?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.name", "cards.uuid", "foreign_data.uuid", "cards.availability", "foreign_data.language"]}, {"query": "How many of the banned cards are white border?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "legalities.status", "cards.borderColor"]}, {"query": "List down the uuid for legacy cards and the foreign language of these cards.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities", "foreign_data"], "label_col": ["cards.uuid", "foreign_data.language", "legalities.uuid", "foreign_data.uuid", "legalities.format"]}, {"query": "Write down the ruling of Beacon of Immortality.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "cards.uuid", "rulings.uuid", "cards.name"]}, {"query": "How many cards are having future frame version and what are the legality status of these cards?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "cards.frameVersion"]}, {"query": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["cards.id", "rulings.date", "cards.uuid", "rulings.uuid", "cards.originalType"]}, {"query": "What are the colors of cards from ID 1-20? What are the format of these cards?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.colors", "legalities.format", "cards.uuid", "legalities.uuid", "cards.id"]}, {"query": "Among the Artifact cards, which are black color and comes with foreign languague translation?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.name", "cards.uuid", "foreign_data.uuid", "cards.originalType", "cards.colors"]}, {"query": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["cards.name", "cards.uuid", "rulings.uuid", "cards.rarity", "rulings.date"]}, {"query": "On how many cards designed by John Avon is its foil non-powerful?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.cardKingdomId", "cards.cardKingdomFoilId", "cards.artist"]}, {"query": "How many white bordered cards are powerful?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.borderColor", "cards.cardKingdomId", "cards.cardKingdomFoilId"]}, {"query": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.hAND", "cards.artist", "cards.Availability"]}, {"query": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.frameVersion", "cards.availability", "cards.hasContentWarning"]}, {"query": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.manaCost", "cards.availability", "cards.borderColor", "cards.frameVersion", "cards.layout"]}, {"query": "How much unconverted mana do all the cards created by Rob Alexander cost in total?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.manaCost", "cards.artist"]}, {"query": "Lists all types of cards available in arena.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.subtypes", "cards.supertypes", "cards.availability"]}, {"query": "Lists the set code of all cards translated into Spanish.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["set_translations"], "label_col": ["set_translations.setCode"]}, {"query": "What percentage of legendary frame effect cards have a maximum starting maximun hand\nsize of +3?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.hAND", "cards.id", "cards.frameEffects"]}, {"query": "What is the percentage of Story Spotlight cards that also have a text box? List them by their ID.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.isTextless", "cards.id", "cards.isStorySpotlight"]}, {"query": "Calculate the percentage of cards in Spanish. List them by name.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["foreign_data", "name"], "label_col": []}, {"query": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.code", "set_translations.setCode", "sets.baseSetSize"]}, {"query": "How many Brazilian Portuguese translated sets are inside the Commander block?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "sets.code", "set_translations.setCode", "set_translations.language", "sets.block"]}, {"query": "Lists by ID all Creature-type cards with legal status.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings", "legalities"], "label_col": ["cards.id", "cards.uuid", "rulings.uuid", "legalities.uuid", "legalities.status", "cards.types"]}, {"query": "Lists all types of cards in German.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.subtypes", "cards.supertypes", "cards.uuid", "foreign_data.uuid", "foreign_data.language"]}, {"query": "How many null power cards contain info about the triggered ability", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "cards.uuid", "rulings.uuid", "cards.power"]}, {"query": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities", "rulings"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "rulings.uuid", "legalities.format", "rulings.text", "cards.Side"]}, {"query": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "cards.uuid", "legalities.uuid", "cards.artist", "legalities.format", "cards.availability"]}, {"query": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.artist", "cards.uuid", "foreign_data.uuid", "foreign_data.flavorText"]}, {"query": "How many cards with print rarity have ruling text printed on 10/01/2009?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["cards.id", "cards.uuid", "rulings.uuid", "cards.rarity", "rulings.date"]}, {"query": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.code", "set_translations.setCode", "sets.block", "sets.baseSetSize"]}, {"query": "What percentage of cards with format commander and legal status do not have a content warning?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.hasContentWarning", "cards.id", "cards.uuid", "legalities.uuid", "legalities.format", "legalities.status"]}, {"query": "What percentage of cards without power are in French?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "cards.id", "cards.uuid", "foreign_data.uuid", "cards.power"]}, {"query": "What percentage of Japanese translated sets are expansion sets?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.id", "sets.code", "set_translations.setCode", "sets.type"]}, {"query": "What kind of printing is on the card that Daren Bader created?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.availability", "cards.artist"]}, {"query": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.edhrecRank", "cards.borderColor"]}, {"query": "How many cards are oversized, reprinted, and printed for promotions?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.isOversized", "cards.isReprint", "cards.isPromo"]}, {"query": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.power", "cards.promoTypes"]}, {"query": "What is the language of the card with the multiverse number 149934?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["foreign_data"], "label_col": ["foreign_data.multiverseid"]}, {"query": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.cardKingdomFoilId", "cards.cardKingdomId"]}, {"query": "What proportion of cards do not have a text box with a normal layout?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.isTextless", "cards.layout"]}, {"query": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.subtypes", "cards.side"]}, {"query": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.name", "sets.mtgoCode"]}, {"query": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.code", "set_translations.setCode", "sets.mcmName"]}, {"query": "What is the name of set number 5 and its translation?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.name", "set_translations.translation", "sets.code", "set_translations.setCode", "set_translations.id"]}, {"query": "What is the language and expansion type of set number 206?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.type", "sets.code", "set_translations.setCode", "set_translations.id"]}, {"query": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.name", "sets.id", "sets.code", "set_translations.setCode", "sets.block", "set_translations.language"]}, {"query": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.name", "sets.id", "sets.code", "set_translations.setCode", "set_translations.language", "sets.isFoilOnly", "sets.isForeignOnly"]}, {"query": "Which Russian set of cards contains the most cards overall?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "sets.code", "set_translations.setCode", "set_translations.language", "sets.baseSetSize"]}, {"query": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.language", "sets.isOnlineOnly", "sets.code", "set_translations.setCode"]}, {"query": "How many sets are available just in Japanese and not in Magic: The Gathering Online?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "set_translations.setCode", "sets.code", "set_translations.language", "sets.mtgoCode"]}, {"query": "How many card border with black color ? List out the card id.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.borderColor"]}, {"query": "How many cards have frame effect as extendedart? List out the id of those cards.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.frameEffects"]}, {"query": "Among black card borders, which card has full artwork?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.borderColor", "cards.isFullArt"]}, {"query": "Point out the language of set id \"174\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["set_translations"], "label_col": ["set_translations.id"]}, {"query": "List out the set name of the set code \"ALL\".", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.name", "sets.code"]}, {"query": "Which foreign language used by \"A Pedra Fellwar\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["foreign_data"], "label_col": ["foreign_data.name"]}, {"query": "State the set code of the set with release date of 07/13/2007?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.setCode", "sets.code", "sets.releaseDate"]}, {"query": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.baseSetSize", "set_translations.setCode", "sets.code", "sets.block"]}, {"query": "Give the code of sets have expansion type of 'expansion'?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.setCode", "sets.code", "sets.type"]}, {"query": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.name", "cards.type", "foreign_data.uuid", "cards.uuid", "cards.watermark"]}, {"query": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "foreign_data.flavorText", "foreign_data.uuid", "cards.uuid", "cards.watermark"]}, {"query": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.convertedManaCost", "cards.id", "cards.name", "sets.code", "cards.setCode"]}, {"query": "Give the code of sets have expansion commander type?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.setCode", "sets.code", "sets.type"]}, {"query": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.name", "cards.type", "foreign_data.uuid", "cards.uuid", "cards.watermark"]}, {"query": "What is the language of the card that has azorius watermark? List out the type of this card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "cards.type", "foreign_data.uuid", "cards.uuid", "cards.watermark"]}, {"query": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.artist", "cards.cardKingdomFoilId", "cards.cardKingdomId"]}, {"query": "How many cards available in paper have a positive starting maximum hand size?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.availability", "cards.hAND"]}, {"query": "Please list the names of the cards that have a text box.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.isTextless"]}, {"query": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.manaCost", "cards.name"]}, {"query": "Among the cards with a white border color, how many of them have unknown power?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.power", "cards.borderColor"]}, {"query": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.isPromo", "cards.side"]}, {"query": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.subtypes", "cards.supertypes", "cards.name"]}, {"query": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.purchaseUrls", "cards.promoTypes"]}, {"query": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.availability"]}, {"query": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.convertedManaCost"]}, {"query": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.artist", "cards.flavorName"]}, {"query": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.name", "cards.frameVersion", "cards.convertedManaCost"]}, {"query": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "set_translations"], "label_col": ["cards.name", "set_translations.setCode", "cards.setCode", "set_translations.translation"]}, {"query": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "set_translations"], "label_col": ["set_translations.language", "set_translations.translation", "set_translations.setCode", "cards.setCode", "cards.name"]}, {"query": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "set_translations"], "label_col": ["cards.id", "set_translations.setCode", "cards.setCode", "set_translations.translation", "cards.artist"]}, {"query": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.baseSetSize", "set_translations.setCode", "sets.code", "set_translations.translation"]}, {"query": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.translation", "set_translations.setCode", "sets.code", "sets.name", "set_translations.language"]}, {"query": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["sets.mtgoCode", "sets.code", "cards.setCode", "cards.name"]}, {"query": "When was the set of cards with \"Ancestor's Chosen\" released?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["sets.releaseDate", "sets.code", "cards.setCode", "cards.name"]}, {"query": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.type", "set_translations.setCode", "sets.code", "set_translations.translation"]}, {"query": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "set_translations.setCode", "sets.code", "sets.block", "set_translations.language", "set_translations.translation"]}, {"query": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "set_translations.setCode", "sets.code", "set_translations.translation", "sets.baseSetSize", "set_translations.language"]}, {"query": "How many cards in the set Coldsnap have a black border color?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.borderColor", "sets.code", "cards.setCode", "sets.name"]}, {"query": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.name", "sets.code", "cards.setCode", "sets.name", "cards.convertedManaCost"]}, {"query": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.artist", "sets.code", "cards.setCode", "sets.name"]}, {"query": "What is card number 4 in the set Coldsnap?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.name", "sets.code", "cards.setCode", "sets.name", "cards.number"]}, {"query": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.power", "sets.code", "cards.setCode", "sets.name", "cards.convertedManaCost"]}, {"query": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.flavorText", "foreign_data.uuid", "cards.uuid", "cards.name", "foreign_data.language"]}, {"query": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["foreign_data.language", "foreign_data.uuid", "cards.uuid", "cards.name", "foreign_data.flavorText"]}, {"query": "What's the German type of the card \"Ancestor's Chosen\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.type", "foreign_data.uuid", "cards.uuid", "cards.name", "foreign_data.language"]}, {"query": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["foreign_data", "cards", "sets"], "label_col": ["foreign_data.text", "cards.uuid", "foreign_data.uuid", "sets.code", "cards.setCode", "sets.name", "foreign_data.language"]}, {"query": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["foreign_data", "cards", "sets"], "label_col": ["cards.name", "cards.uuid", "foreign_data.uuid", "sets.code", "cards.setCode", "sets.name", "foreign_data.language", "cards.convertedManaCost"]}, {"query": "When was the ruling for the card 'Reminisce' created?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.date", "rulings.uuid", "cards.uuid", "cards.name"]}, {"query": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.convertedManaCost", "cards.id", "sets.code", "cards.setCode", "sets.name"]}, {"query": "What is the percentage of incredibly powerful cards in the set Coldsnap?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.cardKingdomFoilId", "cards.cardKingdomId", "cards.id", "sets.code", "cards.setCode", "sets.name"]}, {"query": "What's the code for the set which was released on 2017/7/14?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.code", "sets.releaseDate"]}, {"query": "List the keyrune code for the set whose code is 'PKHC'.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.keyruneCode", "sets.code"]}, {"query": "For the set which had 'SS2' as the code, what is its magic card market id?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.mcmId", "sets.code"]}, {"query": "What's the magic card market name for the set which was released on 2017/6/9?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.mcmName", "sets.releaseDate"]}, {"query": "For the set \"From the Vault: Lore\", what is its expansion type?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.name"]}, {"query": "For the set \"Commander 2014 Oversized\" , give its parent code.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.parentCode", "sets.name"]}, {"query": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "cards.hasContentWarning", "rulings.uuid", "cards.uuid", "cards.artist"]}, {"query": "What was the release date for the set which card \"Evacuation\" in it?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["sets.releaseDate", "sets.code", "cards.setCode", "cards.name"]}, {"query": "What is the number of cards are there in the set of \"Rinascita di Alara\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.baseSetSize", "set_translations.setCode", "sets.code", "set_translations.translation"]}, {"query": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "set_translations"], "label_col": ["set_translations.translation", "set_translations.setCode", "cards.setCode", "cards.name", "set_translations.language"]}, {"query": "How many translations of the name of the set \"Salvat 2011\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["set_translations.translation", "set_translations.setCode", "sets.code", "sets.name"]}, {"query": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "set_translations"], "label_col": ["set_translations.translation", "set_translations.setCode", "cards.setCode", "cards.name", "set_translations.language"]}, {"query": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "sets"], "label_col": ["cards.name", "sets.code", "cards.setCode", "sets.name", "cards.convertedManaCost"]}, {"query": "What is the release date for the set \"Ola de frío\"?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.releaseDate", "set_translations.setCode", "sets.code", "set_translations.translation"]}, {"query": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.availability", "cards.artist", "cards.isTextless"]}, {"query": "What is the unique id of the set that has the highest number of cards?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.id", "sets.baseSetSize"]}, {"query": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.artist", "cards.side", "cards.convertedManaCost"]}, {"query": "What is the most common visual frame effects among the incredibly powerful foils?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.frameEffects", "cards.cardKingdomFoilId", "cards.cardKingdomId"]}, {"query": "How many cards with unknown power that can't be found in foil is in duel deck A?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.power", "cards.hasFoil", "cards.duelDeck"]}, {"query": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets"], "label_col": ["sets.id", "sets.totalSetSize"]}, {"query": "When was the oldest mythic card released and what are its legal play formats?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.originalReleaseDate", "legalities.format", "cards.uuid", "legalities.uuid", "cards.rarity", "legalities.status"]}, {"query": "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "foreign_data"], "label_col": ["cards.id", "foreign_data.uuid", "cards.uuid", "cards.artist", "foreign_data.language"]}, {"query": "How many rare enchantment Abundance cards are there whose play format status are all legal?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.id", "legalities.uuid", "cards.uuid", "cards.rarity", "cards.types", "cards.name", "legalities.status"]}, {"query": "Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["legalities.format", "cards.name", "legalities.uuid", "cards.uuid", "legalities.status"]}, {"query": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.artist", "legalities.format", "legalities.uuid", "cards.uuid", "cards.id"]}, {"query": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["legalities.status", "legalities.uuid", "cards.uuid", "cards.frameVersion", "cards.hasContentWarning", "cards.artist", "legalities.format"]}, {"query": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.name", "legalities.format", "legalities.uuid", "cards.uuid", "cards.edhrecRank", "legalities.status"]}, {"query": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["sets", "set_translations"], "label_col": ["sets.id", "set_translations.language", "set_translations.id", "sets.releaseDate"]}, {"query": "List the artists who illustrated cards with black borders which are available only in arena.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.artist", "cards.availability", "cards.BorderColor"]}, {"query": "Find the uuid of cards in which the old school format is restricted or banned.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["legalities"], "label_col": ["legalities.format", "legalities.status"]}, {"query": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards"], "label_col": ["cards.id", "cards.artist", "cards.availability"]}, {"query": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "rulings"], "label_col": ["rulings.text", "rulings.uuid", "cards.uuid", "cards.artist", "rulings.date"]}, {"query": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.", "table_infos": "table:\n{'cards': ['unique id number identifying the cards', 'artist', 'ascii Name', 'availability', 'border Color', 'card Kingdom Foil Id', 'card Kingdom Id', 'color Identity', 'color Indicator', 'colors', 'converted Mana Cost', 'duel Deck', 'rec Rank in edh', 'face Converted Mana Cost', 'face Name', 'flavor Name', 'flavor Text', 'frame Effects', 'frame Version', 'hand', 'has Alternative Deck Limit', 'has Content Warning', 'has Foil', 'has Non Foil', 'is Alternative', 'is Full Art', 'is Online Only', 'is Oversized', 'is Promotion', 'is Reprint', 'is Reserved', 'is Starter', 'is Story Spotlight', 'is Text less', 'is Time shifted', 'keywords', 'layout', 'leadership Skills', 'life', 'loyalty', 'mana Cost', 'mcmId', 'mcmMetaId', 'mtgArenaId', 'mtgjsonV4Id', 'mtgoFoilId', 'mtgoId', 'multiverseId', 'name', 'number', 'originalReleaseDate', 'originalText', 'originalType', 'otherFaceIds', 'power', 'printings', 'promo Types', 'purchase Urls', 'rarity', 'scryfallId', 'scryfallIllustrationId', 'scryfallOracleId', 'Set Code', 'side', 'subtypes', 'super types', 'tcg player ProductId', 'text', 'toughness', 'type', 'types', 'uuid', 'variations', 'watermark'], 'foreign_data': ['id', 'flavor Text', 'language', 'multiverseid', 'name', 'text', 'type', 'uuid'], 'legalities': ['id', 'format', 'status', 'uuid'], 'sets': ['id', 'base Set Size', 'block', 'booster', 'code', 'is Foil Only', 'is Foreign Only', 'is Non Foil Only', 'is Online Only', 'is Partial Preview', 'keyrune Code', 'magic card market id', 'magic card market ID Extras', 'magic card market name', 'magic the gathering online code', 'name', 'parent Code', 'release Date', 'tcg player Group Id', 'total Set Size', 'type'], 'set_translations': ['id', 'language', 'set code', 'translation'], 'ruling': ['id', 'date', 'text', 'uuid']}\nforeign_keys:['foreign_data.uuid = cards.uuid', 'legalities.uuid = cards.uuid', 'set_translations.set code = sets.code', 'ruling.uuid = cards.uuid']\n", "label_table": ["cards", "legalities"], "label_col": ["cards.frameVersion", "cards.name", "legalities.status", "cards.uuid", "legalities.uuid", "cards.artist"]}, {"query": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.Reputation"]}, {"query": "Please list the display names of all the users whose accounts were created in the year 2014.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.CreationDate"]}, {"query": "How many users last accessed the website after 2014/9/1?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.LastAccessDate"]}, {"query": "What is the display name of the user who has the most number of views?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName"]}, {"query": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.Upvotes", "users.Downvotes"]}, {"query": "How many users with more than 10 views created their account after the year 2013?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.id", "users.CreationDate"]}, {"query": "How many posts does the user csgillespie own?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.id", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "Please list the titles of the posts owned by the user csgillespie?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Title", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "Who is the owner of the post \"Eliciting priors from experts\"?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "posts.OwnerUserId", "users.Id", "posts.Title"]}, {"query": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Title", "posts.OwnerUserId", "users.Id", "users.DisplayName", "posts.ViewCount"]}, {"query": "What is the display name of the user who is the owner of the most valuable post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "posts.OwnerUserId", "users.Id", "posts.FavoriteCount"]}, {"query": "What is the total number of comments of all the posts owned by csgillespie?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.CommentCount", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.AnswerCount", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "posts.LastEditorUserId", "users.Id", "posts.Title"]}, {"query": "Among the posts owned by csgillespie, how many of them are root posts?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Id", "posts.OwnerUserId", "users.Id", "users.DisplayName", "posts.ParentId"]}, {"query": "Please list the display names of all the users who owns a post that is well-finished.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "posts.OwnerUserId", "users.Id", "posts.ClosedDate"]}, {"query": "Among the posts owned by an elder user, how many of them have a score of over 19?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Id", "posts.OwnerUserId", "users.Id", "posts.Score", "users.Age"]}, {"query": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.Location", "posts.OwnerUserId", "users.Id", "posts.Title"]}, {"query": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags", "posts"], "label_col": ["posts.Body", "posts.Id", "tags.ExcerptPostId", "tags.TagName"]}, {"query": "How many badges has the user csgillespie obtained?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Id", "badges.UserId", "users.Id", "users.DisplayName"]}, {"query": "Please list the names of the badges obtained by csgillespie.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Name", "badges.UserId", "users.Id", "users.DisplayName"]}, {"query": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Id", "badges.UserId", "users.Id", "badges.Date", "users.DisplayName"]}, {"query": "What is the display name of the user who has obtained the most number of badges?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["users.DisplayName", "badges.UserId", "users.Id", "badges.Id"]}, {"query": "What is the average score of the posts owned by the user csgillespie?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Score", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "What is the average number of badges obtained by a user with over 200 views?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Id", "users.DisplayName", "badges.UserId", "users.Id", "users.Views"]}, {"query": "Among the posts with a score of over 20, what is the percentage of them being owned by an elder user?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.Age", "posts.Id", "posts.OwnerUserId", "users.Id", "posts.Score"]}, {"query": "How many votes did the user No.58 take on 2010/7/19?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes"], "label_col": ["votes.Id", "votes.UserId", "votes.CreationDate"]}, {"query": "Indicate the creation date of the maximum number of votes.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes"], "label_col": ["votes.CreationDate", "votes.Id"]}, {"query": "Give the number of \"Revival\" badges.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.Id", "badges.Name"]}, {"query": "For the post which got 1910 view counts, how many comments does it get?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "comments"], "label_col": ["posts.Id", "comments.PostId", "posts.ViewCount"]}, {"query": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "comments"], "label_col": ["posts.FavoriteCount", "posts.Id", "comments.PostId", "comments.CreationDate", "comments.UserId"]}, {"query": "Give the only one comment text of the post with parent id 107829.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "comments"], "label_col": ["comments.Text", "posts.Id", "comments.PostId", "posts.ParentId", "posts.CommentCount"]}, {"query": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["posts.ClosedDate", "comments.PostId", "posts.Id", "comments.UserId", "comments.CreationDate"]}, {"query": "For the owner user of post No. 65041, what is his/her reputation points?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.Reputation", "users.Id", "posts.OwnerUserId", "posts.Id"]}, {"query": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.Id", "posts.OwnerUserId", "users.DisplayName"]}, {"query": "Provide the display name of the user who made the vote No.6347.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "votes"], "label_col": ["users.DisplayName", "users.Id", "votes.UserId", "votes.Id"]}, {"query": "Give the number of votes for the post about data visualization.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "votes"], "label_col": ["posts.Id", "votes.PostId", "posts.Title"]}, {"query": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Name", "users.Id", "badges.UserId", "users.DisplayName"]}, {"query": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes", "posts"], "label_col": ["posts.Id", "votes.Id", "votes.UserId", "posts.OwnerUserId"]}, {"query": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.ViewCount", "posts.Title"]}, {"query": "Write the contents of comments with a score of 17.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments"], "label_col": ["comments.Score"]}, {"query": "Which user has the website URL listed at 'http://stackoverflow.com'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.WebsiteUrl"]}, {"query": "What is the badge name that user 'SilentGhost' obtained?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Name", "users.Id", "badges.UserId", "users.DisplayName"]}, {"query": "Name the user that commented 'thank you user93!'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "comments"], "label_col": ["users.DisplayName", "users.Id", "comments.UserId", "comments.Text"]}, {"query": "Write all comments made by user 'A Lion.'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "comments"], "label_col": ["comments.Text", "users.Id", "comments.UserId", "users.DisplayName"]}, {"query": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.DisplayName", "users.Reputation", "users.Id", "posts.OwnerUserId", "posts.Title"]}, {"query": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.Text", "comments.PostId", "posts.Id", "posts.Title"]}, {"query": "Name 10 users with the badge name 'Necromancer.'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.DisplayName", "users.Id", "badges.UserId", "badges.Name"]}, {"query": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "posts.OwnerUserId", "users.Id", "posts.Title"]}, {"query": "List the title of posts which were edited by Vebjorn Ljosa.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Title", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["posts.Score", "users.WebsiteUrl", "posts.OwnerUserId", "users.Id", "users.DisplayName"]}, {"query": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "postHistory"], "label_col": ["postHistory.Comment", "posts.Id", "postHistory.PostId", "posts.Title"]}, {"query": "How much is the total bounty amount of the post titled about 'data'", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "votes"], "label_col": ["votes.BountyAmount", "posts.Id", "votes.PostId", "posts.Title"]}, {"query": "Which user added a bounty amount of 50 to the post title mentioning variance?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "votes", "users"], "label_col": ["users.DisplayName", "posts.Title", "posts.Id", "votes.PostId", "users.Id", "votes.UserId", "votes.BountyAmount"]}, {"query": "Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["posts.ViewCount", "posts.Title", "comments.Text", "comments.Id", "comments.PostId", "posts.Tags"]}, {"query": "Give the total number of comments posted by user ID 13.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments"], "label_col": ["comments.Id", "comments.UserId"]}, {"query": "Which user ID has the highest reputation?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.Reputation"]}, {"query": "Which user ID has the lowest view?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id"]}, {"query": "How many users are awarded with supporter badge during year 2011?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.Id", "badges.Name"]}, {"query": "How many users are awarded with more than 5 badges?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.UserId", "badges.Name"]}, {"query": "How many users from New York have a teacher and supporter badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Id", "badges.UserId", "users.Id", "badges.Name", "users.Location"]}, {"query": "Which user created post ID 1 and what is the reputation of this user?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["users.Id", "users.Reputation", "comments.UserId", "comments.PostId"]}, {"query": "Which user have only one post history per post and having at least 1000 views?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["postHistory.UserId", "users.Id", "postHistory.PostId", "posts.Id", "posts.ViewCount", "postHistory.PostHistoryTypeId"]}, {"query": "How many users from India have the teacher badges?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Id", "badges.UserId", "users.Id", "users.Location", "badges.Name"]}, {"query": "What is the percentage difference of student badges given during 2010 and 2011?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.Id", "badges.Name"]}, {"query": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "postLinks"], "label_col": ["posts.ViewCount", "posts.Id", "postLinks.PostId"]}, {"query": "What is the score and the link type ID for post ID 395?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "postLinks"], "label_col": ["posts.Score", "postLinks.LinkTypeId", "posts.Id", "postLinks.PostId"]}, {"query": "How many users obtained the \"Announcer\" badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.id", "badges.Name"]}, {"query": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.Name"]}, {"query": "How many positive comments are there on the list?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments"], "label_col": ["comments.id", "comments.score"]}, {"query": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments"], "label_col": ["comments.CreationDate"]}, {"query": "How many posts have a score of 10 on the list?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.id", "posts.Score"]}, {"query": "What are the names of badges that users who have the highest reputation obtained?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.name", "users.Id", "badges.UserId", "users.Reputation"]}, {"query": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.Reputation", "users.Id", "badges.UserId", "badges.Date"]}, {"query": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Name", "users.Id", "badges.UserId", "users.DisplayName"]}, {"query": "List out the dates that users who are located in Rochester, NY obtained their badges?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Date", "users.Id", "badges.UserId", "users.Location"]}, {"query": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["users.Age", "badges.Id", "badges.UserId", "users.Id", "badges.Name"]}, {"query": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.Score", "comments.PostId", "posts.Id", "comments.CreationDate"]}, {"query": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.Text", "comments.PostId", "posts.Id", "comments.CreationDate"]}, {"query": "List out the age of users who located in Vienna, Austria obtained the badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.Age", "users.Id", "badges.UserId", "users.Location"]}, {"query": "How many adults who obtained the badge Supporter?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.Id", "badges.UserId", "badges.Name", "users.Age"]}, {"query": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.Views", "users.Id", "badges.UserId", "badges.Date"]}, {"query": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Name", "users.Id", "badges.UserId", "users.DisplayName"]}, {"query": "How many elders obtained the \"Supporter\" badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.Id", "badges.UserId", "users.Age", "badges.Name"]}, {"query": "What is the name of user with the ID of 30?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.Id"]}, {"query": "How many users were from New York?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id"]}, {"query": "How many votes were made in 2010?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes"], "label_col": ["votes.id", "votes.CreationDate"]}, {"query": "How many users were adult?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.id", "users.Age"]}, {"query": "Which users have the highest number of views?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.DisplayName"]}, {"query": "Calculate the ratio of votes in 2010 and 2011.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes"], "label_col": ["votes.CreationDate"]}, {"query": "What is the name of tags used by John Stauffer's?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["posts.Tags", "users.Id", "postHistory.UserId", "postHistory.PostId", "posts.Id", "users.DisplayName"]}, {"query": "How many posts were created by Daniel Vassallo?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory"], "label_col": ["users.Id", "postHistory.UserId", "users.DisplayName"]}, {"query": "How many votes were made by Harlan?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "votes"], "label_col": ["users.Id", "postHistory.UserId", "votes.PostId", "postHistory.PostId", "users.DisplayName"]}, {"query": "Which post by slashnick has the most answers count? State the post ID.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["postHistory.PostId", "users.Id", "postHistory.UserId", "posts.Id", "users.DisplayName", "posts.AnswerCount"]}, {"query": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["users.DisplayName", "users.Id", "postHistory.UserId", "postHistory.PostId", "posts.Id", "posts.ViewCount"]}, {"query": "How many posts by Matt Parker have more than 4 votes?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts", "votes"], "label_col": ["users.Id", "postHistory.UserId", "postHistory.PostId", "posts.Id", "votes.PostId", "users.DisplayName", "votes.Id"]}, {"query": "How many negative comments did Neil McGuigan get in his posts?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts", "comments"], "label_col": ["comments.Id", "users.Id", "posts.OwnerUserId", "posts.Id", "comments.PostId", "users.DisplayName", "comments.Score"]}, {"query": "State all the tags used by Mark Meckes in his posts that doesn't have comments.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["posts.Tags", "users.Id", "postHistory.UserId", "posts.Id", "postHistory.PostId", "users.DisplayName", "posts.CommentCount"]}, {"query": "List all the name of users that obtained the Organizer Badges.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.DisplayName", "users.Id", "badges.UserId", "badges.Name"]}, {"query": "Based on posts posted by Community, calculate the percentage of posts that use the R language.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "tags"], "label_col": ["tags.TagName", "users.Id", "postHistory.UserId", "tags.ExcerptPostId", "postHistory.PostId", "users.DisplayName"]}, {"query": "Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "postHistory", "posts"], "label_col": ["users.DisplayName", "posts.ViewCount", "users.Id", "postHistory.UserId", "posts.Id", "postHistory.PostId"]}, {"query": "How many users received commentator badges in 2014?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.Id", "badges.Name"]}, {"query": "How many posts were created on 21st July, 2010?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postHistory"], "label_col": ["postHistory.id", "postHistory.CreationDate"]}, {"query": "What are the display names and ages of user who got the highest in views?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.Age"]}, {"query": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.LastEditDate", "posts.LastEditorUserId", "posts.Title"]}, {"query": "How many negative comments were given by user ID 13?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments"], "label_col": ["comments.Id", "comments.UserId", "comments.Score"]}, {"query": "Describe the post title which got positive comments and display names of the users who posted those comments.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "comments"], "label_col": ["posts.Title", "comments.UserDisplayName", "comments.PostId", "comments.Id", "posts.Score"]}, {"query": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["badges.Name", "users.Id", "badges.UserId", "badges.Date", "users.Location"]}, {"query": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.DisplayName", "users.WebsiteUrl", "users.Id", "posts.OwnerUserId", "posts.FavoriteCount"]}, {"query": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postHistory", "posts"], "label_col": ["postHistory.Id", "posts.LastEditDate", "postHistory.PostId", "posts.Id", "posts.Title"]}, {"query": "Describe the last accessed date and location of the users who received the outliers badge.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.LastAccessDate", "users.Location", "users.Id", "badges.UserId", "badges.Name"]}, {"query": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postLinks", "posts"], "label_col": ["posts.Title", "postLinks.PostId", "posts.Id", "postLinks.RelatedPostId"]}, {"query": "List the post IDs and badge names of the user Samuel in 2013.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postHistory", "badges"], "label_col": ["postHistory.PostId", "badges.Name", "postHistory.UserId", "badges.UserId", "postHistory.UserDisplayName", "postHistory.CreationDate", "badges.Date"]}, {"query": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags", "posts", "users"], "label_col": ["users.DisplayName", "users.Location", "tags.ExcerptPostId", "posts.Id", "users.Id", "posts.OwnerUserId", "tags.TagName"]}, {"query": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "postLinks"], "label_col": ["posts.Title", "postLinks.LinkTypeId", "posts.Id", "postLinks.PostId", "postLinks.RelatedPostId"]}, {"query": "What are the titles of the top 5 posts with the highest popularity?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.Title", "posts.ViewCount"]}, {"query": "How many tags have post count between 5,000 to 7,000?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags"], "label_col": ["tags.Id"]}, {"query": "What is the owner user id of the most valuable post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.OwnerUserId", "posts.FavoriteCount"]}, {"query": "How old is the most influential user?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Age", "users.Reputation"]}, {"query": "How many posts with votes that were created in 2011 have a bounty of 50?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "votes"], "label_col": ["posts.Id", "votes.PostId", "votes.BountyAmount", "votes.CreationDate"]}, {"query": "What is the id of the youngest user?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.Age"]}, {"query": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postLinks", "posts"], "label_col": ["postLinks.Id", "postLinks.PostId", "posts.Id", "posts.AnswerCount", "postLinks.CreationDate"]}, {"query": "Among the posts that were voted by user 1465, what is the id of the most valuable post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes", "posts"], "label_col": ["posts.Id", "votes.PostId", "votes.UserId", "posts.FavoriteCount"]}, {"query": "What is the title of the post with the oldest post link?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "postLinks"], "label_col": ["posts.Title", "postLinks.PostId", "posts.Id", "posts.CreaionDate"]}, {"query": "What is the display name of the user who acquired the highest amount of badges?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.DisplayName", "users.Id", "badges.UserId"]}, {"query": "When did \"chl\" cast its first vote in a post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "votes"], "label_col": ["votes.CreationDate", "users.Id", "votes.UserId", "users.DisplayName"]}, {"query": "What is the date when the youngest user made his or her first post?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["posts.CreaionDate", "users.Id", "posts.OwnerUserId", "users.Age"]}, {"query": "What is the display name of the user who acquired the first Autobiographer badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "badges"], "label_col": ["users.DisplayName", "users.Id", "badges.UserId", "badges.Name", "badges.Date"]}, {"query": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.Id", "posts.OwnerUserId", "users.Location", "posts.FavoriteCount"]}, {"query": "Who has the highest reputation? Please give the display name.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.Reputation"]}, {"query": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.id", "users.Reputation"]}, {"query": "Please list all display names of users who are adults.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.DisplayName", "users.Age"]}, {"query": "How many posts did Jay Stevens have in 2010?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.Id", "posts.OwnerUserId", "posts.CreaionDate", "users.DisplayName"]}, {"query": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["posts.Id", "posts.Title", "users.Id", "posts.OwnerUserId", "users.DisplayName", "posts.ViewCount"]}, {"query": "Which post has the highest score? Please give its id and title's name.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.Id", "posts.Title", "posts.OwnerUserId", "posts.Score"]}, {"query": "What is the average score of Stephen Turner's posts?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["posts.Score", "users.Id", "posts.OwnerUserId", "users.DisplayName"]}, {"query": "Please list the users' display names whose posts had over 20000 views in 2011.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["users.DisplayName", "users.Id", "posts.OwnerUserId", "posts.CreaionDate", "posts.ViewCount"]}, {"query": "Which is the most valuable post in 2010? Please give its id and the owner's display name.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["posts.OwnerUserId", "users.DisplayName", "users.Id", "users.CreationDate", "posts.FavoriteCount"]}, {"query": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts"], "label_col": ["posts.CreaionDate", "users.Reputation", "users.Id", "posts.OwnerUserId"]}, {"query": "Identify the percentage of teenage users.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Age", "users.Id"]}, {"query": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["postHistory", "posts", "users"], "label_col": ["posts.ViewCount", "users.DisplayName", "postHistory.PostId", "posts.Id", "posts.LastEditorUserId", "users.Id", "postHistory.Text"]}, {"query": "Identify the total number of posts with views above average.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.Id", "posts.ViewCount"]}, {"query": "How many comments were added to the post with the highest score?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "comments"], "label_col": ["comments.Id", "posts.Id", "comments.PostId", "posts.Score"]}, {"query": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.Id", "posts.ViewCount", "posts.CommentCount"]}, {"query": "Identify the display name and location of the user, who was the last to edit the post with ID 183.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts", "users"], "label_col": ["users.DisplayName", "users.Location", "posts.OwnerUserId", "users.Id", "posts.LastEditDate"]}, {"query": "Identify the latest badge awarded to the user with the display name Emmett.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Name", "badges.UserId", "users.Id", "users.DisplayName", "badges.Date"]}, {"query": "Identify the number of adult users who have cast over 5000 upvotes.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Id", "users.Age", "users.UpVotes"]}, {"query": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges", "users"], "label_col": ["badges.Date", "badges.UserId", "users.Id", "users.DisplayName"]}, {"query": "Identify the number of posts and comments left by the user, who has the latest created user account.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts", "comments"], "label_col": ["posts.Id", "users.Id", "posts.OwnerUserId", "comments.PostId", "users.CreationDate"]}, {"query": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "posts", "comments"], "label_col": ["comments.Text", "users.DisplayName", "users.Id", "posts.OwnerUserId", "posts.Id", "comments.PostId", "posts.Title", "users.CreationDate"]}, {"query": "How many users were awarded with 'Citizen Patrol' badge?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["badges"], "label_col": ["badges.id", "badges.Name"]}, {"query": "Count the number of posts with a tag specified as 'careers'.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags"], "label_col": ["tags.Id", "tags.TagName"]}, {"query": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.Reputation", "users.DisplayName"]}, {"query": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.CommentCount", "posts.AnswerCount", "posts.Title"]}, {"query": "When did the user known as 'IrishStat' create his or her account?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users"], "label_col": ["users.CreationDate", "users.DisplayName"]}, {"query": "Identify the number of posts that offer a bounty amount over 30.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["votes"], "label_col": ["votes.id", "votes.BountyAmount"]}, {"query": "How many posts have a score less than 20?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["posts"], "label_col": ["posts.id", "posts.Score"]}, {"query": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags"], "label_col": ["tags.id", "tags.Id"]}, {"query": "What is the excerpt post ID and wiki post ID of the tag named sample?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["tags"], "label_col": ["tags.ExcerptPostId", "tags.WikiPostId", "tags.TagName"]}, {"query": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["users.Reputation", "users.UpVotes", "comments.UserId", "users.Id", "comments.Text"]}, {"query": "Give the texts commented on the post about linear regression.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.Text", "comments.PostId", "posts.Id", "posts.Title"]}, {"query": "List the creation date and age of the user that commented with webiste.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["users.CreationDate", "users.Age", "comments.UserId", "users.Id", "comments.text"]}, {"query": "In comments with 0 score, how many of the posts have view count lower than 5?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.Id", "comments.PostId", "posts.Id", "posts.ViewCount", "posts.Score"]}, {"query": "In posts with 1 comment, how many of the comments have 0 score?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["comments.id", "comments.PostId", "posts.Id", "posts.CommentCount", "posts.Score"]}, {"query": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["comments.id", "comments.UserId", "users.Id", "comments.Score", "users.Age"]}, {"query": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "posts"], "label_col": ["posts.Id", "comments.Text", "comments.PostId", "posts.Title"]}, {"query": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["users.UpVotes", "comments.UserId", "users.Id", "comments.Text"]}, {"query": "List the comments commented by the user with a username of Harvey Motulsky.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["comments.Text", "comments.UserId", "users.Id", "users.DisplayName"]}, {"query": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["comments", "users"], "label_col": ["users.DisplayName", "comments.UserId", "users.Id", "comments.Score", "users.DownVotes"]}, {"query": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?", "table_infos": "table:\n{'badges': ['Id', 'User Id', 'Name', 'Date'], 'comments': ['Id', 'Post Id', 'Score', 'Text', 'Creation Date', 'User Id', 'User Display Name'], 'postHistory': ['Id', 'Post History Type Id', 'Post Id', 'Revision GUID', 'Creation Date', 'User Id', 'Text', 'Comment', 'User Display Name'], 'postLinks': ['Id', 'Creation Date', 'Post Id', 'Related Post Id', 'Link Type Id'], 'posts': ['Id', 'Post Type Id', 'Accepted Answer Id', 'Creation Date', 'Score', 'View Count', 'Body', 'Owner User Id', 'Last Activity Date', 'Title', 'Tags', 'Answer Count', 'Comment Count', 'Favorite Count', 'Last Editor User Id', 'Last Edit Date', 'Community Owned Date', 'ParentId', 'Closed Date', 'Owner Display Name', 'Last Editor Display Name'], 'tags': ['Id', 'Tag Name', 'Count', 'Excerpt Post Id', 'Wiki Post Id'], 'users': ['Id', 'Reputation', 'Creation Date', 'Display Name', 'Last Access Date', 'Website Url', 'Location', 'About Me', 'Views', 'UpVotes', 'DownVotes', 'Account Id', 'Age', 'Profile Image Url'], 'votes': ['Id', 'Post Id', 'Vote Type Id', 'Creation Date', 'User Id', 'Bounty Amount']}\nforeign_keys:['badges.User Id = users.Id', 'comments.User Id = users.Id', 'comments.Post Id = posts.Id', 'postHistory.User Id = users.Id', 'postHistory.Post Id = posts.Id', 'postLinks.Related Post Id = posts.Id', 'postLinks.Post Id = posts.Id', 'posts.ParentId = posts.Id', 'posts.Owner User Id = users.Id', 'posts.Last Editor User Id = users.Id', 'tags.Excerpt Post Id = posts.Id', 'votes.User Id = users.Id', 'votes.Post Id = posts.Id']\n", "label_table": ["users", "comments"], "label_col": ["users.UpVotes", "users.Id", "comments.UserId", "comments.Score"]}, {"query": "Please list all the superpowers of 3-D Man.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.superhero_name"]}, {"query": "How many superheroes have the super power of \"Super Strength\"?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name", "superhero.height_cm"]}, {"query": "Please list the full names of all the superheroes with over 15 super powers.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power"], "label_col": ["superhero.full_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id"]}, {"query": "How many superheroes have blue eyes?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.id", "superhero.eye_colour_id", "colour.id", "colour.colour"]}, {"query": "What is the colour of Apocalypse's skin?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.skin_colour_id", "colour.id", "superhero.superhero_name"]}, {"query": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower", "colour"], "label_col": ["superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.eye_colour_id", "colour.id", "superpower.power_name", "colour.colour"]}, {"query": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.superhero_name", "superhero.eye_colour_id", "colour.id", "superhero.hair_colour_id", "colour.colour"]}, {"query": "How many superheroes are published by Marvel Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "publisher.publisher_name"]}, {"query": "Please give the full name of the tallest hero published by Marvel Comics.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.full_name", "superhero.publisher_id", "publisher.id", "publisher.publisher_name", "superhero.height_cm"]}, {"query": "Who is the publisher of Sauron?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.superhero_name"]}, {"query": "Among the superheroes from Marvel Comics, how many of them have blue eyes?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "colour"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "superhero.eye_colour_id", "colour.id", "publisher.publisher_name", "colour.colour"]}, {"query": "What is the average height of the superheroes from Marvel Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.height_cm", "superhero.publisher_id", "publisher.id", "publisher.publisher_name"]}, {"query": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower", "publisher"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.publisher_id", "publisher.id", "publisher.publisher_name"]}, {"query": "How many superheroes did DC Comics publish?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "publisher.publisher_name"]}, {"query": "Which publisher published the slowest superhero?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "hero_attribute", "attribute"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "How many gold-eyed superheroes did Marvel Comics publish?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "colour"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "superhero.eye_colour_id", "colour.id", "publisher.publisher_name", "colour.colour"]}, {"query": "What is the publisher's name of Blue Beetle II?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.superhero_name"]}, {"query": "How many superheroes with blonde hair are there?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.id", "superhero.hair_colour_id", "colour.id", "colour.colour"]}, {"query": "Who is the dumbest superhero?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "What is Copycat's race?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["race.race", "superhero.race_id", "race.id", "superhero.superhero_name"]}, {"query": "How many superheroes have durability of less than 50?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_attribute", "attribute"], "label_col": ["hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "What are the names of the superheroes with the power of death touch?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "How many female superheroes have a strength value of 100?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute", "gender"], "label_col": ["superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "superhero.gender_id", "gender.id", "attribute.attribute_name", "hero_attribute.attribute_value", "gender.gender"]}, {"query": "What is the name of the superhero that has the most powers?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_power.hero_id"]}, {"query": "How many vampire superheroes are there?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.superhero_name", "superhero.race_id", "race.id", "race.race"]}, {"query": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "CAST", "SUM", "CASE", "publisher", "alignment"], "label_col": ["superhero.publisher_id", "publisher.id", "alignment.id", "superhero.alignment_id", "alignment.alignment"]}, {"query": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id"]}, {"query": "Give the publisher ID of Star Trek.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["publisher"], "label_col": ["publisher.id", "publisher.publisher_name"]}, {"query": "Calculate the average attribute value of all superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_attribute"], "label_col": ["hero_attribute.attribute_value"]}, {"query": "What is the total number of superheroes without full name?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.id", "superhero.full_name"]}, {"query": "What is the eye colour of superhero with superhero ID 75?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.id"]}, {"query": "Provide the superpowers of the superhero called Deathlok.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.superhero_name"]}, {"query": "What is the average weight of all female superheroes?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "gender"], "label_col": ["superhero.weight_kg", "superhero.gender_id", "gender.id", "gender.gender"]}, {"query": "List down at least five superpowers of male superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower", "gender"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "superpower.id", "hero_power.power_id", "gender.id", "superhero.gender_id", "gender.gender"]}, {"query": "Give the name of the alien superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.superhero_name", "superhero.race_id", "race.id", "race.race"]}, {"query": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.superhero_name", "superhero.eye_colour_id", "colour.id", "superhero.height_cm", "colour.colour"]}, {"query": "What is the superpower of hero ID 56?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["superpower.power_name", "hero_power.power_id", "superpower.id", "hero_power.hero_id"]}, {"query": "List down at least five full name of Demi-God superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.full_name", "superhero.race_id", "race.id", "race.race"]}, {"query": "How many bad superheroes are there?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment"], "label_col": ["superhero.id", "superhero.alignment_id", "alignment.id", "alignment.alignment"]}, {"query": "Identify the race of the superhero who weighed 169 kg.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["race.race", "superhero.race_id", "race.id", "superhero.weight_kg"]}, {"query": "Provide the hair colour of the human superhero who is 185 cm tall.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race", "colour"], "label_col": ["colour.colour", "superhero.race_id", "race.id", "superhero.hair_colour_id", "colour.id", "superhero.height_cm", "race.race"]}, {"query": "What is the eye clolour of the heaviest superhero?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.weight_kg"]}, {"query": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.id", "superhero.publisher_id", "publisher.id", "superhero.height_cm"]}, {"query": "Which power do superheroes have the most of?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["superpower.power_name", "hero_power.power_id", "superpower.id", "hero_power.hero_id"]}, {"query": "Indicate the attribute value of superhero Abomination.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute"], "label_col": ["hero_attribute.attribute_value", "superhero.id", "hero_attribute.hero_id", "superhero.superhero_name"]}, {"query": "What are the superpowers of heroes with ID 1?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["superpower.power_name", "hero_power.power_id", "superpower.id", "hero_power.hero_id"]}, {"query": "How many heroes have stealth power?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "What is the hero's full name with the highest attribute in strength?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["superhero.full_name", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "What is the average of superheroes with no skin colour?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.id", "superhero.skin_colour_id"]}, {"query": "How many superheroes were published by Dark Horse Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "publisher.publisher_name"]}, {"query": "Which superhero has the most durability published by Dark Horse Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute", "publisher"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_attribute.hero_id", "attribute.id", "hero_attribute.attribute_id", "publisher.id", "superhero.publisher_id", "publisher.publisher_name", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "What is the eyes colour of Abraham Sapien?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.full_name"]}, {"query": "List the name of superheroes with flight power.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "gender"], "label_col": ["superhero.eye_colour_id", "superhero.hair_colour_id", "superhero.skin_colour_id", "publisher.id", "superhero.publisher_id", "gender.id", "superhero.gender_id", "publisher.publisher_name", "gender.gender"]}, {"query": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.superhero_name", "publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.eye_colour_id", "superhero.hair_colour_id", "superhero.skin_colour_id"]}, {"query": "Which group does superhero A-Bomb belong to?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["race.race", "superhero.race_id", "race.id", "superhero.superhero_name"]}, {"query": "What is the percentage of blue female superheroes among all female superheroes?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "gender", "colour"], "label_col": ["colour.colour", "superhero.id", "superhero.gender_id", "gender.id", "superhero.skin_colour_id", "colour.id", "gender.gender"]}, {"query": "Provide the hero name and race of Charles Chandler.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.superhero_name", "race.race", "superhero.race_id", "race.id", "superhero.full_name"]}, {"query": "What is the gender of Agent 13 hero?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "gender"], "label_col": ["gender.gender", "superhero.gender_id", "gender.id", "superhero.superhero_name"]}, {"query": "Provide superheroes' names who have the adaptation power.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "How many powers does Amazo hero have?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superhero"], "label_col": ["hero_power.power_id", "hero_power.hero_id", "superhero.id", "superhero.superhero_name"]}, {"query": "List the powers of Hunter Zolomon.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.full_name"]}, {"query": "Provide the heights of the heroes whose eye colours are amber.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.height_cm", "superhero.eye_colour_id", "colour.id", "colour.colour"]}, {"query": "List the heroes' names whose eyes and hair colours are both black.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.superhero_name", "superhero.eye_colour_id", "colour.id", "superhero.hair_colour_id", "colour.colour"]}, {"query": "Provide the eye colours of the heroes whose skin colours are gold.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.skin_colour_id"]}, {"query": "Provide the full names of vampire heroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.full_name", "superhero.race_id", "race.id", "race.race"]}, {"query": "Describe the names of neutral alignment superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment"], "label_col": ["superhero.superhero_name", "superhero.alignment_id", "alignment.id", "alignment.alignment"]}, {"query": "What are the race and alignment of Cameron Hicks?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race", "alignment"], "label_col": ["race.race", "alignment.alignment", "superhero.race_id", "race.id", "superhero.alignment_id", "alignment.id", "superhero.superhero_name"]}, {"query": "How many percent of female heroes were published by Marvel Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "gender"], "label_col": ["publisher.publisher_name", "superhero.id", "superhero.publisher_id", "publisher.id", "superhero.gender_id", "gender.id", "gender.gender"]}, {"query": "Find the average weight of the heroes who are aliens.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.weight_kg", "superhero.id", "superhero.race_id", "race.id", "race.race"]}, {"query": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.weight_kg", "superhero.full_name"]}, {"query": "Calculate the average height for each superhero.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.height_cm", "superhero.id"]}, {"query": "What is Abomination's superpower?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.superhero_name"]}, {"query": "Among the superheroes with the race of god/eternal, how many of them are male", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race", "gender"], "label_col": ["superhero.race_id", "race.id", "gender.id", "superhero.gender_id"]}, {"query": "Which hero was the fastest?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "How many superheroes have a neutral alignment?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment"], "label_col": ["superhero.id", "superhero.alignment_id", "alignment.id", "alignment.alignment"]}, {"query": "State all of 3-D Man's attributes along with their values.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["attribute.attribute_name", "hero_attribute.attribute_value", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "superhero.superhero_name"]}, {"query": "Which superheroes have blue eyes with brown hair?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.superhero_name", "superhero.eye_colour_id", "colour.id", "superhero.hair_colour_id", "colour.colour"]}, {"query": "What is the publisher for Hawkman, Karate Kid and Speedy?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.superhero_name"]}, {"query": "How many superheroes didn't have any publisher?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id"]}, {"query": "Calculate the percentage of superheroes with blue eyes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.id", "superhero.eye_colour_id", "colour.id"]}, {"query": "Find the ratio between male superheroes and female superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "gender"], "label_col": ["gender.gender", "superhero.id", "superhero.gender_id", "gender.id"]}, {"query": "Who is the tallest superhero?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.superhero_name", "superhero.height_cm"]}, {"query": "What is the power ID of cryokinesis?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superpower"], "label_col": ["superpower.id", "superpower.power_name"]}, {"query": "Provide the name of superhero with superhero ID 294.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.superhero_name", "superhero.id"]}, {"query": "List the full names of superheroes with missing weight.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.full_name", "superhero.weight_kg"]}, {"query": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.full_name"]}, {"query": "What is the superpowers of the superhero has Helen Parr as their full name?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.full_name"]}, {"query": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["race.race", "superhero.race_id", "race.id", "superhero.weight_kg", "superhero.height_cm"]}, {"query": "What is the publisher name of the superhero ID 38?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id", "superhero.id"]}, {"query": "What is the race of the superhero with maximum attribute value?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "race"], "label_col": ["race.race", "superhero.id", "hero_attribute.hero_id", "superhero.race_id", "race.id", "hero_attribute.attribute_value"]}, {"query": "Give the alignment and superpowers of the superhero named Atom IV.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "superpower.id", "hero_power.power_id", "superhero.superhero_name"]}, {"query": "List down at least five full names of superheroes with blue eyes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.superhero_name", "superhero.eye_colour_id", "colour.id", "colour.colour"]}, {"query": "Calculate the average attribute value of all neutral superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_attribute", "superhero", "alignment"], "label_col": ["hero_attribute.attribute_value", "hero_attribute.hero_id", "superhero.id", "superhero.alignment_id", "alignment.id", "alignment.alignment"]}, {"query": "List the skin colour of the superheroes with 100 attribute value.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour", "hero_attribute"], "label_col": ["colour.colour", "superhero.skin_colour_id", "colour.id", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_value"]}, {"query": "Count the good female superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment", "gender"], "label_col": ["superhero.id", "superhero.alignment_id", "alignment.id", "superhero.gender_id", "gender.id", "alignment.alignment", "gender.gender"]}, {"query": "Provide the names of superheroes with attribute value between 75 to 80.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_value"]}, {"query": "Give the race of the blue-haired male superhero.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour", "race", "gender"], "label_col": ["race.race", "superhero.hair_colour_id", "colour.id", "superhero.race_id", "race.id", "superhero.gender_id", "gender.id", "colour.colour", "gender.gender"]}, {"query": "Among the bad superheroes, what is the percentage of female superheroes?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment", "gender"], "label_col": ["gender.gender", "superhero.id", "superhero.alignment_id", "alignment.id", "superhero.gender_id", "gender.id", "alignment.alignment"]}, {"query": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.id", "superhero.eye_colour_id", "superhero.weight_kg"]}, {"query": "How strong is the Hulk?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["hero_attribute.attribute_value", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "superhero.superhero_name", "attribute.attribute_name"]}, {"query": "List down Ajax's superpowers.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superpower.power_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.superhero_name"]}, {"query": "How many green-skinned villains are there in the superhero universe?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment", "colour"], "label_col": ["superhero.id", "superhero.alignment_id", "alignment.id", "superhero.skin_colour_id", "colour.id", "alignment.alignment", "colour.colour"]}, {"query": "How many female superheroes are in Marvel Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "gender"], "label_col": ["superhero.id", "superhero.publisher_id", "publisher.id", "superhero.gender_id", "gender.id", "publisher.publisher_name", "gender.gender"]}, {"query": "Identify superheroes who can control wind and list their names in alphabetical order.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower"], "label_col": ["superhero.superhero_name", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "Identify the gender of the superhero who has the ability of Phoenix Force.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_power", "superpower", "gender"], "label_col": ["gender.gender", "superhero.id", "hero_power.hero_id", "hero_power.power_id", "superpower.id", "superhero.gender_id", "gender.id", "superpower.power_name"]}, {"query": "Identify the heaviest superhero in DC Comics.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["superhero.superhero_name", "superhero.publisher_id", "publisher.id", "publisher.publisher_name", "superhero.weight_kg"]}, {"query": "What is the average height of a non-human superhero in Dark Horse Comics?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "race"], "label_col": ["superhero.height_cm", "superhero.publisher_id", "publisher.id", "superhero.race_id", "race.id", "publisher.publisher_name", "race.race"]}, {"query": "Count the fastest superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_attribute", "attribute", "superhero"], "label_col": ["superhero.superhero_name", "hero_attribute.attribute_id", "attribute.id", "hero_attribute.hero_id", "superhero.id", "attribute.attribute_name", "hero_attribute.attribute_value"]}, {"query": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher"], "label_col": ["publisher.publisher_name", "superhero.publisher_id", "publisher.id"]}, {"query": "Identify the weakest attribute of the Black Panther.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute", "attribute"], "label_col": ["attribute.attribute_name", "superhero.id", "hero_attribute.hero_id", "hero_attribute.attribute_id", "attribute.id", "superhero.superhero_name", "hero_attribute.attribute_value"]}, {"query": "What is Abomination's eye colour?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.superhero_name"]}, {"query": "Name the tallest superhero.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.superhero_name", "superhero.height_cm"]}, {"query": "Name the superhero, otherwise known as Charles Chandler.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.superhero_name", "superhero.full_name"]}, {"query": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "gender"], "label_col": ["gender.gender", "superhero.id", "superhero.publisher_id", "publisher.id", "superhero.gender_id", "gender.id", "publisher.publisher_name"]}, {"query": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "publisher", "alignment"], "label_col": ["alignment.alignment", "superhero.id", "superhero.publisher_id", "publisher.id", "superhero.alignment_id", "alignment.id", "publisher.publisher_name"]}, {"query": "What is the total number of superheroes that have John as their first name?", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.id", "superhero.full_name"]}, {"query": "Give the hero ID of superhero with the lowest attribute value.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_attribute"], "label_col": ["hero_attribute.hero_id", "hero_attribute.attribute_value"]}, {"query": "Provide the full name of the superhero named Alien.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero"], "label_col": ["superhero.full_name", "superhero.superhero_name"]}, {"query": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["superhero.full_name", "superhero.eye_colour_id", "colour.id", "superhero.weight_kg", "colour.colour"]}, {"query": "List the attribute value of the superhero named Aquababy.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "hero_attribute"], "label_col": ["hero_attribute.attribute_value", "superhero.id", "hero_attribute.hero_id", "superhero.superhero_name"]}, {"query": "Provide the weight and race of the superhero with superhero ID 40.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "race"], "label_col": ["superhero.weight_kg", "race.race", "superhero.race_id", "race.id", "superhero.id"]}, {"query": "Calculate the average height of all neutral superheroes.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "alignment"], "label_col": ["superhero.height_cm", "superhero.alignment_id", "alignment.id", "alignment.alignment"]}, {"query": "List the hero ID of superheroes have intellegence as their power.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["hero_power", "superpower"], "label_col": ["hero_power.hero_id", "hero_power.power_id", "superpower.id", "superpower.power_name"]}, {"query": "Give the eye colour of Blackwulf.", "table_infos": "table:\n{'alignment': ['id', 'alignment'], 'attribute': ['id', 'attribute name'], 'colour': ['id', 'colour'], 'gender': ['id', 'gender'], 'publisher': ['id', 'publisher_name'], 'race': ['id', 'race'], 'superhero': ['id', 'superhero name', 'full name', 'gender id', 'eye colour id', 'hair colour id', 'skin colour id', 'race id', 'publisher id', 'alignment id', 'height cm', 'weight kg'], 'hero_attribute': ['hero id', 'attribute id', 'attribute value'], 'superpower': ['id', 'power name'], 'hero_power': ['hero id', 'power id']}\nforeign_keys:['superhero.skin colour id = colour.id', 'superhero.race id = race.id', 'superhero.publisher id = publisher.id', 'superhero.hair colour id = colour.id', 'superhero.gender id = gender.id', 'superhero.eye colour id = colour.id', 'superhero.alignment id = alignment.id', 'hero_attribute.hero id = superhero.id', 'hero_attribute.attribute id = attribute.id', 'hero_power.power id = superpower.id', 'hero_power.hero id = superhero.id']\n", "label_table": ["superhero", "colour"], "label_col": ["colour.colour", "superhero.eye_colour_id", "colour.id", "superhero.superhero_name"]}, {"query": "Please list the reference names of the drivers who are eliminated in the first period in race number 18.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.driverRef", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q1"]}, {"query": "What is the surname of the driver with the best lap time in race number 19 in the second period?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.surname", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q2"]}, {"query": "Please list the year during which the race is held on circuits in Shanghai.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.year", "races.circuitID", "circuits.circuitId", "circuits.location"]}, {"query": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.url", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "Please give the name of the race held on the circuits in Germany.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.name", "races.circuitID", "circuits.circuitId", "circuits.country"]}, {"query": "Please list the positions of the circuits built by the constructor Renault.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorStandings", "constructors"], "label_col": ["constructorStandings.position", "constructors.constructorId", "constructorStandings.constructorId", "constructors.name"]}, {"query": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.raceId", "races.circuitID", "circuits.circuitId", "circuits.country", "races.year"]}, {"query": "Please give the names of the races held on the circuits in Spain.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.name", "races.circuitID", "circuits.circuitId", "circuits.country"]}, {"query": "What is the location coordinates of the circuits for Australian grand prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.lat", "circuits.lng", "races.circuitID", "circuits.circuitId", "races.name"]}, {"query": "Where can I find the information about the races held on Sepang International Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.url", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "Please list the time of the races held on Sepang International Circuit.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.time", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "Give the coordinate position for Abu Dhabi Grand Prix.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.lat", "circuits.lng", "circuits.location", "races.circuitID", "circuits.circuitId", "races.name"]}, {"query": "Which country is the constructor which got 1 point in the race No. 24 from?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorResults", "constructors"], "label_col": ["constructors.nationality", "constructors.constructorId", "constructorResults.constructorId", "constructorResults.raceId", "constructorResults.points"]}, {"query": "What's Bruno Senna's Q1 result in the qualifying race No. 354?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["qualifying.q1", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "drivers.forename", "drivers.surname"]}, {"query": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.nationality", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q2"]}, {"query": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.number", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q3"]}, {"query": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["drivers.driverId", "results.raceId", "races.raceId", "results.driverId", "races.year", "races.name", "results.time"]}, {"query": "Show me the season page of year when the race No. 901 took place.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "seasons"], "label_col": ["seasons.url", "seasons.year", "races.year", "races.raceId"]}, {"query": "For the race happened on 2015/11/29, how many drivers finished the game?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["results.driverId", "results.raceId", "races.raceId", "races.date", "results.time"]}, {"query": "For all the drivers who finished the game in race No. 592, who is the oldest?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["drivers.forename", "drivers.surname", "results.driverId", "drivers.driverId", "results.raceId", "results.time", "drivers.dob"]}, {"query": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "drivers.url", "drivers.driverId", "lapTimes.driverId", "lapTimes.raceId", "lapTimes.time"]}, {"query": "For the driver who set the fastest lap speed in race No.933, where does he come from?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["drivers.nationality", "results.driverId", "drivers.driverId", "results.raceId", "results.fastestLapTime", "results.fastestLapSpeed"]}, {"query": "Where is Malaysian Grand Prix held? Give the location coordinates.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.lat", "circuits.lng", "races.circuitID", "circuits.circuitId", "races.name"]}, {"query": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorResults", "constructors"], "label_col": ["constructors.url", "constructors.constructorId", "constructorResults.constructorId", "constructorResults.raceId", "constructorResults.points"]}, {"query": "What's Lucas di Grassi's Q1 result in the race No. 345?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["qualifying.q1", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "drivers.forename", "drivers.surname"]}, {"query": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.nationality", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q2"]}, {"query": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.code", "drivers.driverId", "qualifying.driverId", "qualifying.raceId", "qualifying.q3"]}, {"query": "What is the actual finish time for Bruce McLaren in the race No.743?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["results.time", "results.driverId", "drivers.driverId", "results.raceId", "drivers.forename", "drivers.surname"]}, {"query": "Who finished second in the San Marino Grand Prix in 2006?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "races.year", "races.name", "results.position"]}, {"query": "Show me the season page of year when the race No. 901 took place.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "seasons"], "label_col": ["seasons.url", "seasons.year", "races.year", "races.raceId"]}, {"query": "For the race happened in 2015/11/29, how many drivers finished the game?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["results.driverId", "results.raceId", "races.raceId", "races.date", "results.time"]}, {"query": "For all the drivers who finished the game in race No. 872, who is the youngest?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["drivers.forename", "drivers.surname", "results.driverId", "drivers.driverId", "results.raceId", "results.time", "drivers.dob"]}, {"query": "Who was the driver that got the best lap time in the race No. 348? Give his full name.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "drivers.driverId", "lapTimes.driverId", "lapTimes.raceId", "lapTimes.time"]}, {"query": "For the driver who set the fastest lap speed, what is his nationality?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["drivers.nationality", "results.driverId", "drivers.driverId", "results.fastestLapTime", "results.fastestLapSpeed"]}, {"query": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["results.raceId", "results.fastestLapSpeed", "results.driverId", "drivers.driverId", "drivers.forename", "drivers.surname"]}, {"query": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["results.time", "results.driverId", "results.raceId", "races.raceId", "races.date"]}, {"query": "Which year was the first Singapore Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.name"]}, {"query": "How many races were there in 2005? Name all the races in descending order.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.name"]}, {"query": "Name the first race recorded. What are the other races that happened within the same month and year of that race.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.name"]}, {"query": "State the name and date of the last round of race in year 1999.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.name", "races.round"]}, {"query": "Which year has the most number of races?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.round"]}, {"query": "Name the races in year 2017 that are not hosted in year 2000.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.name"]}, {"query": "In which country was the first European Grand Prix hosted? Name the circuit and location.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.country", "circuits.location", "races.circuitID", "circuits.circuitId", "races.name", "races.year"]}, {"query": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.date", "races.circuitID", "circuits.circuitId", "circuits.name", "races.name", "races.year"]}, {"query": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.circuitid", "races.circuitID", "circuits.circuitId", "circuits.name", "races.name"]}, {"query": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId", "races.name", "races.year", "driverStandings.position"]}, {"query": "State the driver with the most points scored. Find his full name with that points.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "driverStandings.points", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId"]}, {"query": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "driverStandings.points", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId", "races.name", "races.year"]}, {"query": "What is the best lap time recorded? List the driver and race with such recorded lap time.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "lapTimes", "races"], "label_col": ["lapTimes.milliseconds", "drivers.forename", "drivers.surname", "races.name", "drivers.driverId", "lapTimes.driverId", "lapTimes.raceId", "races.raceId"]}, {"query": "What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "lapTimes", "drivers"], "label_col": ["lapTimes.milliseconds", "lapTimes.raceId", "races.raceId", "drivers.driverId", "lapTimes.driverId", "drivers.forename", "drivers.surname", "races.year", "races.name"]}, {"query": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["driverStandings.position", "driverStandings.driverStandingsId", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId", "drivers.surname", "races.year"]}, {"query": "Name the driver with the most winning. Mention his nationality and what is his average point scores.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "driverStandings"], "label_col": ["drivers.forename", "drivers.surname", "drivers.nationality", "driverStandings.points", "driverStandings.driverId", "drivers.driverId", "driverStandings.wins"]}, {"query": "How old is the youngest Japanese driver? What is his name?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.dob", "drivers.forename", "drivers.surname", "drivers.nationality"]}, {"query": "List circuits which host 4 f1 races from year 1990 to 2000.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.name", "races.circuitID", "circuits.circuitId", "races.date", "races.raceId"]}, {"query": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.name", "circuits.location", "races.name", "races.circuitID", "circuits.circuitId", "circuits.country", "races.year"]}, {"query": "Name the races along with its circuit name and location for f1 races hosted in September 2005.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.name", "circuits.name", "circuits.location", "races.circuitID", "circuits.circuitId", "races.year", "races.date"]}, {"query": "Which race was Alex Yoong in when he was in track number less than 10?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["races.name", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId", "drivers.forename", "drivers.surname", "driverStandings.position"]}, {"query": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "driverStandings", "races", "circuits"], "label_col": ["driverStandings.wins", "driverStandings.driverId", "drivers.driverId", "races.raceId", "driverStandings.raceId", "circuits.circuitId", "races.circuitId", "drivers.forename", "drivers.surname", "circuits.name"]}, {"query": "State the race and year of race in which Michael Schumacher had his fastest lap.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "lapTimes", "drivers"], "label_col": ["races.name", "races.year", "lapTimes.raceId", "races.raceId", "drivers.driverId", "lapTimes.driverId", "drivers.forename", "drivers.surname", "lapTimes.milliseconds"]}, {"query": "What is Eddie Irvine's average points scored in year 2000?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "driverStandings", "races"], "label_col": ["driverStandings.points", "driverStandings.driverId", "drivers.driverId", "races.raceId", "driverStandings.raceId", "drivers.forename", "drivers.surname", "races.year"]}, {"query": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "driverStandings", "drivers"], "label_col": ["races.name", "driverStandings.points", "driverStandings.raceId", "races.raceId", "drivers.driverId", "driverStandings.driverId", "drivers.forename", "drivers.surname", "races.year"]}, {"query": "List all races in 2017 and the hosting country order by date of the event.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.name", "circuits.country", "races.circuitID", "circuits.circuitId", "races.year", "races.date"]}, {"query": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races", "lapTimes"], "label_col": ["lapTimes.lap", "races.name", "races.year", "circuits.location", "circuits.circuitId", "races.circuitId", "lapTimes.raceId", "races.raceId"]}, {"query": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.country", "races.circuitID", "races.circuitId", "circuits.circuitId", "races.name"]}, {"query": "What's the location coordinates of Silverstone Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.lat", "circuits.lng", "circuits.name"]}, {"query": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.name", "circuits.lat"]}, {"query": "What's the reference name of Marina Bay Street Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.circuitRef", "circuits.name"]}, {"query": "In which country can I find the circuit with the highest altitude?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.country", "circuits.alt"]}, {"query": "How many drivers don't have a code?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverId", "drivers.code"]}, {"query": "Which country is the oldest driver from?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.nationality", "drivers.dob"]}, {"query": "Please list the surnames of all the Italian drivers.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.surname", "drivers.nationality"]}, {"query": "Which website should I go to if I want to know more about Anthony Davidson?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.url", "drivers.forename", "drivers.surname"]}, {"query": "What's Lewis Hamilton's reference name?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverRef", "drivers.forename", "drivers.surname"]}, {"query": "Which circuit did the 2009 Spanish Grand Prix use?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.name", "races.circuitID", "circuits.circuitId", "races.year", "races.name"]}, {"query": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.year", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "Please give more information about the Formula_1 races that used the Silverstone Circuit.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.url", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.date", "races.time", "races.circuitID", "circuits.circuitId", "races.year", "races.name"]}, {"query": "How many Formula_1 races took place on the circuits in Italy?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.circuitId", "races.circuitID", "circuits.circuitId", "circuits.country"]}, {"query": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["races.date", "races.circuitID", "circuits.circuitId", "circuits.name"]}, {"query": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.url", "races.circuitID", "circuits.circuitId", "races.year", "races.name"]}, {"query": "What's the fastest lap time ever in a race for Lewis Hamilton?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["results.fastestLapTime", "results.driverId", "drivers.driverId", "drivers.forename", "drivers.surname"]}, {"query": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["drivers.forename", "drivers.surname", "results.driverId", "drivers.driverId", "results.fastestLapTime", "results.fastestLapSpeed"]}, {"query": "Which driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "drivers.driverRef", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "races.name", "results.rank", "races.year"]}, {"query": "Please list the Formula_1 races that Lewis Hamilton participated.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["races.name", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "drivers.forename", "drivers.surname"]}, {"query": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["results.fastestLapSpeed", "results.raceId", "races.raceId", "races.name", "races.year"]}, {"query": "In which years did Lewis Hamilton participate in a Formula_1 race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["races.year", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "drivers.forename", "drivers.surname"]}, {"query": "What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["results.positionOrder", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "drivers.forename", "drivers.surname", "races.name", "races.year"]}, {"query": "Which driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "results.raceId", "races.raceId", "drivers.driverId", "results.driverId", "results.grid", "races.name", "races.year"]}, {"query": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["results.driverId", "results.raceId", "races.raceId", "races.name", "races.year", "results.time"]}, {"query": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "drivers"], "label_col": ["results.fastestLap", "results.raceId", "races.raceId", "results.driverId", "drivers.driverId", "races.name", "races.year", "drivers.forename", "drivers.surname"]}, {"query": "What's the finish time for the driver who ranked second in 2008's Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.time", "results.raceId", "races.raceId", "results.rank", "races.name", "races.year"]}, {"query": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results", "races"], "label_col": ["drivers.forename", "drivers.surname", "drivers.url", "drivers.driverId", "results.driverId", "races.raceId", "results.raceId", "races.name", "results.time", "races.year"]}, {"query": "How many drivers from the USA participated in the 2008 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results", "races"], "label_col": ["drivers.driverId", "results.driverId", "races.raceId", "results.raceId", "races.name", "drivers.nationality", "races.year"]}, {"query": "Among the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.driverId", "results.raceId", "races.raceId", "races.name", "races.year", "results.time"]}, {"query": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["results.points", "drivers.driverId", "results.driverId", "drivers.forename", "drivers.surname"]}, {"query": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results"], "label_col": ["results.fastestLapTime", "drivers.driverId", "results.driverId", "drivers.surname", "drivers.forename"]}, {"query": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.time", "results.resultId", "results.raceId", "races.raceId", "races.name", "races.year"]}, {"query": "How many circuits are there in Melbourne, Australia?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.circuitId", "circuits.country"]}, {"query": "Please list the location coordinates of the US circuits.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.lat", "circuits.lng", "circuits.country"]}, {"query": "How many British drivers were born after 1980?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverId", "drivers.nationality", "drivers.dob"]}, {"query": "What are the average points of British constructors?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorStandings", "constructors"], "label_col": ["constructorStandings.points", "constructorStandings.constructorId", "constructors.constructorId", "constructors.nationality"]}, {"query": "Which constructor has the highest point?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorStandings", "constructors"], "label_col": ["constructors.name", "constructorStandings.constructorId", "constructors.constructorId", "constructorStandings.points"]}, {"query": "Please list the constructor names with 0 points at race 291.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorStandings", "constructors"], "label_col": ["constructors.name", "constructorStandings.constructorId", "constructors.constructorId", "constructorStandings.points", "constructorStandings.raceId"]}, {"query": "Which constructors have been ranked 1?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "constructors"], "label_col": ["constructors.name", "results.constructorId", "constructors.constructorId", "results.rank"]}, {"query": "How many French constructors have a lap number of over 50?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "constructors"], "label_col": ["constructors.constructorId", "results.constructorId", "results.laps", "constructors.nationality"]}, {"query": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "drivers"], "label_col": ["results.time", "results.raceId", "races.raceId", "results.driverId", "drivers.driverId", "drivers.nationality", "races.year"]}, {"query": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "results.driverId", "drivers.driverId", "drivers.dob", "results.rank"]}, {"query": "How many Italian drivers haven't finished the race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "drivers"], "label_col": ["results.driverId", "drivers.driverId", "drivers.nationality", "results.time"]}, {"query": "Which driver has the fastest lap time? Please give their forenames and surnames.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "results.fastestLapTime", "results.driverId", "drivers.driverId"]}, {"query": "What is the fastest lap number of the champion in 2009?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.fastestLap", "results.raceId", "races.raceId", "races.year", "results.time"]}, {"query": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.fastestLapSpeed", "results.raceId", "races.raceId", "races.year", "races.name"]}, {"query": "Which race has the shortest actual finishing time? Please give the name and year.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["races.name", "races.year", "races.raceId", "results.raceId", "results.milliseconds"]}, {"query": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "drivers"], "label_col": ["drivers.dob", "results.laps", "results.raceId", "races.raceId", "results.driverId", "drivers.driverId", "races.year"]}, {"query": "How many French drivers who obtain the laptime less than 02:00.00?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "lapTimes"], "label_col": ["drivers.driverId", "lapTimes.driverId", "drivers.nationality", "lapTimes.time"]}, {"query": "List out the code for drivers who have nationality in America.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.code", "drivers.Nationality"]}, {"query": "List out the Id number of races which were hold in 2009.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": ["races.raceId"]}, {"query": "How many driver participated in race ID number 18?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["driverStandings"], "label_col": ["driverStandings.driverId", "driverStandings.raceId"]}, {"query": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.drivers.nationality", "drivers.drivers.dob"]}, {"query": "What is reference name of Robert Kubica?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverRef", "drivers.forename", "drivers.surname"]}, {"query": "How many Australian drivers who were born in 1980?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverId", "drivers.nationality", "drivers.dob"]}, {"query": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "drivers"], "label_col": ["drivers.driverId", "pitStops.driverId", "drivers.nationality", "drivers.dob", "pitStops.time"]}, {"query": "Please state the reference name of the oldest German driver.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.driverRef", "drivers.nationality", "drivers.dob"]}, {"query": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "drivers"], "label_col": ["drivers.driverId", "drivers.code", "results.driverId", "drivers.dob", "results.fastestLapTime"]}, {"query": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "drivers"], "label_col": ["drivers.driverId", "pitStops.driverId", "drivers.nationality", "drivers.dob", "pitStops.time"]}, {"query": "State the racing year which has the fastest lap time?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["races.year", "results.raceId", "races.raceId", "results.fastestLapTime"]}, {"query": "Which year has the lowest speed of lap time?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "races"], "label_col": ["races.year", "lapTimes.raceId", "races.raceId", "lapTimes.time"]}, {"query": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes"], "label_col": ["lapTimes.driverId", "lapTimes.lap"]}, {"query": "From race no. 50 to 100, how many finishers have been disqualified?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results"], "label_col": ["results.statusId", "results.raceID", "results.raceId"]}, {"query": "How many times the circuits were held in Austria? Please give their location and coordinates.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.lat", "circuits.lng", "circuits.country"]}, {"query": "What race number has the most finishers?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results"], "label_col": ["results.raceId"]}, {"query": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["qualifying", "drivers"], "label_col": ["drivers.driverRef", "drivers.nationality", "drivers.dob", "qualifying.driverId", "drivers.driverId", "qualifying.raceId", "qualifying.q2"]}, {"query": "How many American drivers have been disqualified from the race.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "results", "status"], "label_col": ["drivers.driverId", "results.driverId", "results.statusId", "status.statusId", "status.status", "drivers.nationality"]}, {"query": "Which of the Italian constructor got the highest point to date? Give its introduction website?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructors", "constructorStandings"], "label_col": ["constructors.url", "constructors.constructorId", "constructorStandings.constructorId", "constructors.nationality", "constructorStandings.points"]}, {"query": "What is the website of the constructor who tallied the most total wins.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructors", "constructorStandings"], "label_col": ["constructors.url", "constructors.constructorId", "constructorStandings.constructorId", "constructorStandings.wins"]}, {"query": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "races"], "label_col": ["lapTimes.driverId", "lapTimes.raceId", "races.raceId", "races.name", "lapTimes.lap", "lapTimes.time"]}, {"query": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "races"], "label_col": ["lapTimes.milliseconds", "lapTimes.raceId", "races.raceId", "lapTimes.lap", "lapTimes.time"]}, {"query": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.fastestLapTime", "results.raceId", "races.raceId", "results.rank", "races.year", "races.name"]}, {"query": "List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "drivers"], "label_col": ["drivers.forename", "drivers.surname", "pitStops.driverId", "drivers.driverId", "drivers.nationality", "drivers.dob", "pitStops.duration"]}, {"query": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races"], "label_col": ["results.time", "results.raceId", "races.raceId", "races.name", "races.year"]}, {"query": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "constructors"], "label_col": ["constructors.constructorRef", "constructors.url", "results.raceId", "races.raceId", "results.constructorId", "constructors.constructorId", "races.name", "races.year", "results.time"]}, {"query": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.forename", "drivers.surname", "drivers.dob", "drivers.nationality"]}, {"query": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.forename", "drivers.surname", "drivers.url", "drivers.dob", "drivers.nationality"]}, {"query": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits"], "label_col": ["circuits.country", "circuits.lat", "circuits.lng", "circuits.name"]}, {"query": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["constructorResults", "constructors", "races"], "label_col": ["constructorResults.points", "constructors.name", "constructors.nationality", "constructorResults.constructorId", "constructors.constructorId", "races.raceid", "constructorResults.raceid", "races.name", "races.year"]}, {"query": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "driverStandings", "races"], "label_col": ["driverStandings.points", "drivers.driverId", "driverStandings.driverId", "races.raceId", "driverStandings.raceId", "drivers.forename", "drivers.surname", "races.name"]}, {"query": "What is the annual average number of races held during the first 10 years of the 21st century?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races"], "label_col": []}, {"query": "Which citizenship do the vast majority of the drivers hold?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers"], "label_col": ["drivers.nationality", "drivers.driverId"]}, {"query": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["driverStandings"], "label_col": ["driverStandings.points", "driverStandings.wins"]}, {"query": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["races", "results"], "label_col": ["races.name", "races.raceId", "results.raceId", "results.fastestLapTime"]}, {"query": "Which racetrack hosted the most recent race? Indicate the full location.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["circuits", "races"], "label_col": ["circuits.location", "circuits.circuitId", "races.circuitId", "races.date"]}, {"query": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["drivers", "driverStandings", "races"], "label_col": ["drivers.forename", "drivers.surname", "drivers.nationality", "races.name", "drivers.driverId", "driverStandings.driverId", "driverStandings.raceId", "races.raceId", "drivers.dob"]}, {"query": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "status"], "label_col": ["results.driverId", "results.raceId", "races.raceId", "results.statusId", "status.statusId", "races.name"]}, {"query": "How many wins was achieved by the oldest racer? Indicate his/her full name.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["driverStandings", "drivers"], "label_col": ["driverStandings.wins", "driverStandings.driverId", "drivers.driverId", "drivers.forename", "drivers.surname", "drivers.dob"]}, {"query": "What was the longest time a driver had ever spent at a pit stop?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops"], "label_col": ["pitStops.duration"]}, {"query": "Among all the lap records set on various circuits, what is the time for the fastest one?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes"], "label_col": []}, {"query": "What was the longest time that Lewis Hamilton had spent at a pit stop?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "drivers"], "label_col": ["pitStops.duration", "pitStops.driverId", "drivers.driverId", "drivers.forename", "drivers.surname"]}, {"query": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "drivers", "races"], "label_col": ["pitStops.lap", "pitStops.driverId", "drivers.driverId", "pitStops.raceId", "races.raceId", "drivers.forename", "drivers.surname", "races.year", "races.name"]}, {"query": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["pitStops", "races"], "label_col": ["pitStops.duration", "pitStops.raceId", "races.raceId", "races.year", "races.name"]}, {"query": "What is the lap record set by Lewis Hamilton in a Formula_1 race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "drivers"], "label_col": ["lapTimes.time", "lapTimes.driverId", "drivers.driverId", "drivers.forename", "drivers.surname"]}, {"query": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "drivers"], "label_col": ["lapTimes.position", "lapTimes.driverId", "drivers.driverId", "drivers.forename", "drivers.surname", "lapTimes.time"]}, {"query": "What is the lap record for the Austrian Grand Prix Circuit?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "circuits"], "label_col": ["results.raceId", "results.fastestLapTime", "results.FastestLapTime", "races.raceId", "races.circuitId", "circuits.circuitId", "races.name"]}, {"query": "Please list the lap records for the circuits in Italy.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "circuits", "INSTR", "T1.FastestLapTime", "CAST", "SUBSTR"], "label_col": ["results.raceId", "results.FastestLapTime", "races.raceId", "races.circuitId", "circuits.circuitId", "circuits.country"]}, {"query": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "circuits", "INSTR", "T1.FastestLapTime", "CAST", "SUBSTR"], "label_col": ["results.raceId", "results.FastestLapTime", "races.name", "races.circuitId", "circuits.circuitId", "races.raceId"]}, {"query": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["results", "races", "circuits", "INSTR", "T1.FastestLapTime", "CAST", "SUBSTR", "pitStops"], "label_col": ["results.raceId", "results.driverId", "results.FastestLapTime", "races.raceId", "races.circuitId", "circuits.circuitId", "races.name", "pitStops.duration", "pitStops.raceId", "pitStops.driverId"]}, {"query": "Please list the location coordinates of the circuits whose lap record is 1:29.488.", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "races", "circuits"], "label_col": ["circuits.lat", "circuits.lng", "lapTimes.raceId", "races.raceId", "races.circuitId", "circuits.circuitId", "lapTimes.time"]}, {"query": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?", "table_infos": "table:\n{'circuits': ['circuit Id', 'circuit reference name', 'name', 'location', 'country', 'latitude', 'longitude', 'alt', 'url'], 'constructors': ['constructor Id', 'Constructor Reference name', 'name', 'nationality', 'url'], 'drivers': ['driver ID', 'driver reference name', 'number', 'code', 'forename', 'surname', 'date of birth', 'nationality', 'url'], 'seasons': ['race ID', 'url'], 'races': ['race ID', 'year', 'round', 'Circuit Id', 'name', 'date', 'time', 'url'], 'constructorResults': ['constructor Results Id', 'race Id', 'constructor Id', 'points', 'status'], 'constructorStandings': ['constructor Standings Id', 'race id', 'constructor id', 'points', 'position', 'position text', 'wins'], 'driverStandings': ['driver Standings Id', 'constructor Reference name', 'driverId', 'points', 'position', 'position text', 'wins'], 'lapTimes': ['race ID', 'driver ID', 'lap', 'position', 'time', 'milliseconds'], 'pitStops': ['race ID', 'driver ID', 'stop', 'lap', 'time', 'duration', 'milliseconds'], 'qualifying': ['qualify Id', 'race Id', 'driver Id', 'constructor id', 'number', 'position', 'qualifying 1', 'qualifying 2', 'qualifying 3'], 'status': ['status ID', 'status'], 'results': ['Result ID', 'race ID', 'driver ID', 'constructor Id', 'number', 'grid', 'position', 'position text', 'position order', 'points', 'laps', 'time', 'milliseconds', 'fastest lap', 'rank', 'fastest Lap Time', 'fastest Lap Speed', 'status Id']}\nforeign_keys:['races.Circuit Id = circuits.circuit Id', 'races.year = seasons.race ID', 'constructorResults.constructor Id = constructors.constructor Id', 'constructorResults.race Id = races.race ID', 'constructorStandings.constructor id = constructors.constructor Id', 'constructorStandings.race id = races.race ID', 'driverStandings.driverId = drivers.driver ID', 'driverStandings.constructor Reference name = races.race ID', 'lapTimes.driver ID = drivers.driver ID', 'lapTimes.race ID = races.race ID', 'pitStops.driver ID = drivers.driver ID', 'pitStops.race ID = races.race ID', 'qualifying.constructor id = constructors.constructor Id', 'qualifying.driver Id = drivers.driver ID', 'qualifying.race Id = races.race ID', 'results.status Id = status.status ID', 'results.constructor Id = constructors.constructor Id', 'results.driver ID = drivers.driver ID', 'results.race ID = races.race ID']\n", "label_table": ["lapTimes", "races", "circuits"], "label_col": ["lapTimes.milliseconds", "lapTimes.lap", "lapTimes.raceId", "races.raceId", "races.circuitId", "circuits.circuitId", "circuits.country"]}, {"query": "Which player has the highest overall rating? Indicate the player's api id.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.player_api_id", "Player_Attributes.overall_rating"]}, {"query": "What is the height of the tallest player? Indicate his name.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.height"]}, {"query": "What is the preferred foot when attacking of the player with the lowest potential?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.preferred_foot", "Player_Attributes.potential"]}, {"query": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.id", "Player_Attributes.overall_rating", "Player_Attributes.defensive_work_rate"]}, {"query": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.id", "Player_Attributes.crossing"]}, {"query": "Which league had the most goals in the 2016 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "League"], "label_col": ["League.name", "Match.league_id", "League.id", "Match.season", "Match.home_team_goal", "Match.away_team_goal"]}, {"query": "Which home team had lost the fewest matches in the 2016 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "Team"], "label_col": ["Team.team_long_name", "Match.home_team_api_id", "Team.team_api_id", "Match.season", "Match.home_team_goal", "Match.away_team_goal"]}, {"query": "Indicate the full names of the top 10 players with the highest number of penalties.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes", "Player"], "label_col": ["Player.player_name", "Player_Attributes.id", "Player.id", "Player_Attributes.penalties"]}, {"query": "In Scotland Premier League, which away team won the most during the 2010 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match", "Team"], "label_col": ["Team.team_long_name", "League.id", "Match.league_id", "Match.away_team_api_id", "Team.team_api_id", "League.name", "Match.season", "Match.away_team_goal", "Match.home_team_goal"]}, {"query": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team_Attributes", "Team"], "label_col": ["Team_Attributes.buildUpPlaySpeed", "Team_Attributes.team_api_id", "Team.team_api_id", "Team_Attributes.buildUpPlayDribbling"]}, {"query": "Which League had the most matches end as draw in the 2016 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "League"], "label_col": ["League.name", "Match.league_id", "League.id", "Match.season", "Match.home_team_goal", "Match.away_team_goal", "Match.id"]}, {"query": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes", "Player"], "label_col": ["T2.birthday", "Player_Attributes.player_api_id", "Player.player_api_id", "Player_Attributes.date", "Player_Attributes.sprint_speed"]}, {"query": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "League"], "label_col": ["League.name", "Match.id", "Match.league_id", "League.id"]}, {"query": "What is the average height of players born between 1990 and 1995?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.height", "Player.id", "Player.birthday"]}, {"query": "List the players' api id who had the highest above average overall ratings in 2010.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.player_api_id", "Player_Attributes.date", "Player_Attributes.overall_rating"]}, {"query": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team_Attributes"], "label_col": ["Team_Attributes.team_fifa_api_id", "Team_Attributes.buildUpPlaySpeed"]}, {"query": "List the long name of teams with above-average build-up play passing in 2012.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team_Attributes", "Team"], "label_col": ["Team.team_long_name", "Team_Attributes.team_api_id", "Team.team_api_id", "Team_Attributes.date", "Team_Attributes.buildUpPlayPassing", "Team.id"]}, {"query": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.preferred_foot", "Player.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.birthday"]}, {"query": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["League.name", "Match.home_team_goal", "Match.away_team_goal", "League.id", "Match.league_id"]}, {"query": "Find the average number of long-shot done by Ahmed Samir Farag.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.long_shots", "Player_Attributes.date", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.height", "Player.id", "Player_Attributes.heading_accuracy", "Player_Attributes.player_fifa_api_id"]}, {"query": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_long_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.buildUpPlayDribblingClass", "Team_Attributes.chanceCreationPassing", "Team.id", "Team_Attributes.date"]}, {"query": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["League.name", "League.id", "Match.league_id", "Match.season", "Match.home_team_goal", "Match.id", "Match.away_team_goal"]}, {"query": "What is the short name of the football team Queens Park Rangers?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team"], "label_col": ["Team.team_short_name", "Team.team_long_name"]}, {"query": "List the football players with a birthyear of 1970 and a birthmonth of October.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.birthday"]}, {"query": "What is the attacking work rate of the football playerr Franco Zennaro?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.attacking_work_rate", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_attributes"], "label_col": ["Team_attributes.buildUpPlayPositioningClass", "Team.team_fifa_api_id", "Team_attributes.team_fifa_api_id", "Team.team_long_name"]}, {"query": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.heading_accuracy", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name", "Player_Attributes.date"]}, {"query": "What is the overall rating of the football player Gabriel Tamas in year 2011?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name", "Player_Attributes.date"]}, {"query": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.id", "League.id", "Match.league_id", "Match.season", "League.name"]}, {"query": "What is the preferred foot when attacking of the youngest football player?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.preferred_foot", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.birthday"]}, {"query": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.weight", "Player_Attributes.preferred_foot"]}, {"query": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_attributes"], "label_col": ["Team.team_short_name", "Team.team_api_id", "Team_attributes.team_api_id", "Team_attributes.chanceCreationPassingClass"]}, {"query": "What is the defensive work rate of the football player David Wilson\n?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.defensive_work_rate", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "When is the birthday of the football player who has the highest overall rating?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.birthday", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.overall_rating"]}, {"query": "What is the name of the football league in the country of Netherlands?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "League"], "label_col": ["League.name", "Country.id", "League.country_id", "Country.name"]}, {"query": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "Match"], "label_col": ["Match.home_team_goal", "Match.id", "Country.id", "Match.country_id", "Country.name", "Match.season"]}, {"query": "Please list player names which are higher than 180.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.height"]}, {"query": "How many players were born after 1990?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.id", "Player.birthday"]}, {"query": "How many players whose first names are Adam and weigh more than 170?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.id", "Player.weight", "Player.player_name"]}, {"query": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.overall_rating", "Player_Attributes.date"]}, {"query": "What is Aaron Doran's potential score?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.potential", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "List out of players whose preferred foot is left.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.id", "Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.preferred_foot"]}, {"query": "Please list all team names which the speed class is fast.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_long_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.buildUpPlaySpeedClass"]}, {"query": "What is the passing class of CLB team?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.buildUpPlayPassingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_short_name"]}, {"query": "Which teams have build up play passing more than 70? Please list their short names.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_short_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.buildUpPlayPassing"]}, {"query": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player_Attributes.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.height", "Player_Attributes.date"]}, {"query": "Which football player has the shortest height?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["player"], "label_col": ["player.player_name", "player.height"]}, {"query": "Which country is the league Italy Serie A from?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "League"], "label_col": ["Country.name", "Country.id", "League.country_id", "League.name"]}, {"query": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_short_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.buildUpPlaySpeed", "Team_Attributes.buildUpPlayDribbling", "Team_Attributes.buildUpPlayPassing"]}, {"query": "What is the average overall rating of the football player Aaron Doran?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player_Attributes.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.id", "League.id", "Match.league_id", "League.name", "Match.date"]}, {"query": "List all the short name of the football team that had a home team goal of 10?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Match"], "label_col": ["Team.team_short_name", "Team.team_api_id", "Match.home_team_api_id", "Match.home_team_goal"]}, {"query": "List all the football player with the highest balance score and potential score of 61.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.potential", "Player_Attributes.balance"]}, {"query": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player_Attributes.ball_control", "Player_Attributes.id", "Player.player_api_id", "Player_Attributes.player_api_id"]}, {"query": "What's the long name for the team GEN?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team"], "label_col": ["Team.team_long_name", "Team.team_short_name"]}, {"query": "Which player is older, Aaron Lennon or Abdelaziz Barrada?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.birthday"]}, {"query": "Which player is the tallest?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.height"]}, {"query": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.player_api_id", "Player_Attributes.preferred_foot", "Player_Attributes.attacking_work_rate"]}, {"query": "Which country is the Belgium Jupiler League from?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "League"], "label_col": ["Country.name", "Country.id", "League.country_id", "League.name"]}, {"query": "Please list the leagues from Germany.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "League"], "label_col": ["League.name", "Country.id", "League.country_id", "Country.name"]}, {"query": "Which player has the strongest overall strength?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.overall_rating"]}, {"query": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.birthday", "Player_Attributes.defensive_work_rate"]}, {"query": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player_Attributes.crossing", "Player.player_api_id", "Player_Attributes.player_api_id"]}, {"query": "What's the heading accuracy of Ariel Borysiuk?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.heading_accuracy", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "Among the players whose height is over 180, how many of them have a volley score of over 70?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.height", "Player_Attributes.volleys"]}, {"query": "Please list the names of the players whose volley score and dribbling score are over 70.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.volleys", "Player_Attributes.dribbling"]}, {"query": "How many matches in the 2008/2009 season were held in Belgium?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "Match"], "label_col": ["Match.id", "Country.id", "Match.country_id", "Country.name", "Match.season"]}, {"query": "What is the long passing score of the oldest player?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.long_passing", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.birthday"]}, {"query": "How many matches were held in the Belgium Jupiler League in April, 2009?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.id", "League.id", "Match.league_id", "League.name", "Match.date"]}, {"query": "Which league had the most matches in the 2008/2009 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["League.name", "League.id", "Match.league_id", "Match.season", "Match.id"]}, {"query": "What is the average overall rating of the players born before the year 1986?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.birthday"]}, {"query": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player_Attributes.overall_rating", "Player.player_api_id", "Player_Attributes.player_api_id"]}, {"query": "How much is the average build up play speed of the Heart of Midlothian team?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.buildUpPlaySpeed", "Team_Attributes.id", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name"]}, {"query": "Calculate the average overall rating of Pietro Marino.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player_Attributes.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "What is Aaron Lennox's total crossing score?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.crossing", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "What is Ajax's highest chance creation passing score and what is it classified as?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.chanceCreationPassing", "Team_Attributes.chanceCreationPassingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name"]}, {"query": "Which foot is preferred by Abdou Diallo?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.preferred_foot", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "What is the highest overall rating received by Dorlan Pabon?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.player_name"]}, {"query": "What is the average number of goals made by Parma as the away team while playing in Italy?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "TEAM", "Country"], "label_col": ["Match.away_team_goal", "Match.id", "Match.away_team_api_id", "TEAM.team_api_id", "Match.country_id", "Country.id", "TEAM.team_long_name", "Country.name"]}, {"query": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.date", "Player_Attributes.overall_rating", "Player.birthday"]}, {"query": "What was the overall rating for Aaron Mooy on 2016/2/4?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.date", "Player.player_name"]}, {"query": "What was the potiential for Francesco Parravicini on 2010/8/30?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.potential", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.date", "Player.player_name"]}, {"query": "How was Francesco Migliore's attacking work rate on 2015/5/1?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.attacking_work_rate", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.date", "Player.player_name"]}, {"query": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.defensive_work_rate", "Player.player_fifa_api_id", "Player_Attributes.player_fifa_api_id", "Player_Attributes.date", "Player.player_name"]}, {"query": "What was the build up play speed class for \"Willem II\" on 2011/2/22?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.buildUpPlaySpeedClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name", "Team_Attributes.date"]}, {"query": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.buildUpPlayDribblingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_short_name", "Team_Attributes.date"]}, {"query": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.buildUpPlayPassingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name", "Team_Attributes.date"]}, {"query": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.chanceCreationPassingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name", "Team_Attributes.date"]}, {"query": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.chanceCreationCrossingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name", "Team_Attributes.date"]}, {"query": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team_Attributes.chanceCreationShootingClass", "Team.team_api_id", "Team_Attributes.team_api_id", "Team.team_long_name", "Team_Attributes.date"]}, {"query": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player_Attributes.id", "Player.player_fifa_api_id", "Player_Attributes.player_fifa_api_id", "Player.player_name", "Player_Attributes.date"]}, {"query": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player_Attributes.overall_rating", "Player.player_fifa_api_id", "Player_Attributes.player_fifa_api_id", "Player_Attributes.date"]}, {"query": "List down 5 tallest players' name.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.height"]}, {"query": "What are the player api id of 10 heaviest players?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_api_id", "Player.weight"]}, {"query": "List down the name of players who are 35 years old and above.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.birthday"]}, {"query": "How many home team goal have been scored by Aaron Lennon?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "match"], "label_col": ["match.home_team_goal", "Player.player_api_id", "match.away_player_9", "Player.player_name"]}, {"query": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "match"], "label_col": ["match.away_team_goal", "Player.player_api_id", "match.away_player_5", "Player.player_name"]}, {"query": "Calculate the total home team goal scored by players whose age are 30 years old and below.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "match"], "label_col": ["match.home_team_goal", "Player.player_api_id", "match.away_player_1", "T1.birthday"]}, {"query": "State 10 names of the strongest players.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.overall_rating"]}, {"query": "What is the name of players with the highest potential?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.potential"]}, {"query": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.attacking_work_rate"]}, {"query": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player.player_name", "Player.player_api_id", "Player_Attributes.player_api_id", "Player_Attributes.finishing", "Player.birthday"]}, {"query": "State the name of players who came from Belgium.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "Match", "Player"], "label_col": ["Player.player_name", "Country.id", "Match.country_id", "Match.home_player_1", "Player.player_api_id", "Country.name"]}, {"query": "Locate players with vision scores of 90 and above, state the country of these players.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes", "Player", "Match", "Country"], "label_col": ["Country.name", "Player_Attributes.player_api_id", "Player.player_api_id", "Match.home_player_8", "Match.country_id", "Country.id", "Player_Attributes.vision"]}, {"query": "Which country's players have the heaviest average weights?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Country", "Match", "Player"], "label_col": ["Country.name", "Country.id", "Match.country_id", "Match.home_player_1", "Player.player_api_id", "Player.weight"]}, {"query": "List down the long name for slow speed class team.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_long_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.buildUpPlaySpeedClass"]}, {"query": "What are the short name of team who played safe while creating chance of passing?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team", "Team_Attributes"], "label_col": ["Team.team_short_name", "Team.team_api_id", "Team_Attributes.team_api_id", "Team_Attributes.chanceCreationPassingClass"]}, {"query": "What is the average heights of Italy players?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Match", "Country"], "label_col": ["Player.height", "Player.id", "Match.id", "Match.country_id", "Country.ID", "Country.NAME"]}, {"query": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.player_name", "Player.height"]}, {"query": "How many football players born after the 1990s have the first name \"Aaron\"?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player"], "label_col": ["Player.id", "Player.birthday", "Player.player_name"]}, {"query": "What is the difference between players 6 and 23's jumping scores?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.Player_Attributes.id", "Player_Attributes.Player_Attributes.jumping"]}, {"query": "Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.id", "Player_Attributes.preferred_foot", "Player_Attributes.potential"]}, {"query": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.Player_Attributes.id", "Player_Attributes.Player_Attributes.preferred_foot", "Player_Attributes.Player_Attributes.crossing", "Player_Attributes.crossing"]}, {"query": "What percentage of players have a strength and stamina score of more than 80?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player_Attributes"], "label_col": ["Player_Attributes.strength", "Player_Attributes.stamina", "Player_Attributes.id"]}, {"query": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.home_team_goal", "Match.away_team_goal", "League.id", "Match.league_id", "League.name", "Match.date"]}, {"query": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Team_Attributes", "Team"], "label_col": ["Team_Attributes.buildUpPlaySpeedClass", "Team_Attributes.team_api_id", "Team.team_api_id", "Team.team_long_name"]}, {"query": "In the 2015–2016 season, how many games were played in the Italian Serie A league?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.id", "League.id", "Match.league_id", "League.name", "Match.season"]}, {"query": "What was the highest score of the home team in the Netherlands Eredivisie league?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["Match.home_team_goal", "League.id", "Match.league_id", "League.name"]}, {"query": "Which league had the most games in the 2015–2016 season?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["League", "Match"], "label_col": ["League.name", "League.id", "Match.league_id", "Match.season", "Match.id"]}, {"query": "Please provide the full name of the away team that scored the most goals.", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Match", "Team"], "label_col": ["Team.team_long_name", "Match.away_team_api_id", "Team.team_api_id", "Match.away_team_goal"]}, {"query": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?", "table_infos": "table:\n{'Player_Attributes': ['id', 'player federation international football association api id', 'player api id', 'date', 'overall_rating', 'potential', 'preferred foot', 'attacking work rate', 'defensive_work_rate', 'crossing', 'finishing', 'heading accuracy', 'short passing', 'volleys', 'dribbling', 'curve', 'free kick accuracy', 'long passing', 'ball control', 'acceleration', 'sprint speed', 'agility', 'reactions', 'balance', 'shot power', 'jumping', 'stamina', 'strength', 'long shots', 'aggression', 'interceptions', 'positioning', 'vision', 'penalties', 'marking', 'standing tackle', 'sliding tackle', 'goalkeep diving', 'goalkeep handling', 'goalkeep kicking', 'goalkeep positioning', 'goalkeep reflexes'], 'Player': ['id', 'player api id', 'player name', 'player federation international football association api id', 'birthday', 'height', 'weight'], 'League': ['id', 'country id', 'name'], 'Country': ['id', 'name'], 'Team': ['id', 'team api id', 'team federation international football association api id', 'team long name', 'team short name'], 'Team_Attributes': ['id', 'team federation international football association api id', 'team api id', 'date', 'build Up Play Speed', 'build Up Play Speed Class', 'build Up Play Dribbling', 'build Up Play Dribbling Class', 'build Up Play Passing', 'build Up Play Passing Class', 'build Up Play Positioning Class', 'chance Creation Passing', 'chance Creation Passing Class', 'chance Creation Crossing', 'chance Creation Crossing Class', 'chance Creation Shooting', 'chance Creation Shooting Class', 'chance Creation Positioning Class', 'defence Pressure', 'defence Pressure Class', 'defence Aggression', 'defence Aggression Class', 'defence Team Width', 'defence Team Width Class', 'defence Defender Line Class'], 'Match': ['id', 'country id', 'league id', 'season', 'stage', 'date', 'match api id', 'home team api id', 'away team api id', 'home team goal', 'away team goal', 'home_player_X1', 'home_player_X2', 'home_player_X3', 'home_player_X4', 'home_player_X5', 'home_player_X6', 'home_player_X7', 'home_player_X8', 'home_player_X9', 'home_player_X10', 'home_player_X11', 'away_player_X1', 'away_player_X2', 'away_player_X3', 'away_player_X4', 'away_player_X5', 'away_player_X6', 'away_player_X7', 'away_player_X8', 'away_player_X9', 'away_player_X10', 'away_player_X11', 'home_player_Y1', 'home_player_Y2', 'home_player_Y3', 'home_player_Y4', 'home_player_Y5', 'home_player_Y6', 'home_player_Y7', 'home_player_Y8', 'home_player_Y9', 'home_player_Y10', 'home_player_Y11', 'away_player_Y1', 'away_player_Y2', 'away_player_Y3', 'away_player_Y4', 'away_player_Y5', 'away_player_Y6', 'away_player_Y7', 'away_player_Y8', 'away_player_Y9', 'away_player_Y10', 'away_player_Y11', 'home_player_1', 'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7', 'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2', 'away_player_3', 'away_player_4', 'away_player_5', 'away_player_6', 'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10', 'away_player_11', 'goal', 'shot on', 'shot off', 'foul commit', 'card', 'cross', 'corner', 'possession', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD', 'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH', 'VCD', 'VCA', 'GBH', 'GBD', 'GBA', 'BSH', 'BSD', 'BSA']}\nforeign_keys:['Player_Attributes.player api id = Player.player api id', 'Player_Attributes.player federation international football association api id = Player.player federation international football association api id', 'League.country id = Country.id', 'Team_Attributes.team api id = Team.team api id', 'Team_Attributes.team federation international football association api id = Team.team federation international football association api id', 'Match.away_player_11 = Player.player api id', 'Match.away_player_10 = Player.player api id', 'Match.away_player_9 = Player.player api id', 'Match.away_player_8 = Player.player api id', 'Match.away_player_7 = Player.player api id', 'Match.away_player_6 = Player.player api id', 'Match.away_player_5 = Player.player api id', 'Match.away_player_4 = Player.player api id', 'Match.away_player_3 = Player.player api id', 'Match.away_player_2 = Player.player api id', 'Match.away_player_1 = Player.player api id', 'Match.home_player_11 = Player.player api id', 'Match.home_player_10 = Player.player api id', 'Match.home_player_9 = Player.player api id', 'Match.home_player_8 = Player.player api id', 'Match.home_player_7 = Player.player api id', 'Match.home_player_6 = Player.player api id', 'Match.home_player_5 = Player.player api id', 'Match.home_player_4 = Player.player api id', 'Match.home_player_3 = Player.player api id', 'Match.home_player_2 = Player.player api id', 'Match.home_player_1 = Player.player api id', 'Match.away team api id = Team.team api id', 'Match.home team api id = Team.team api id']\n", "label_table": ["Player", "Player_Attributes"], "label_col": ["Player_Attributes.overall_rating", "Player.id", "Player.player_api_id", "Player_Attributes.player_api_id", "Player.height"]}, {"query": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Admission", "Patient.SEX"]}, {"query": "What is the percentage of female patient were born after 1930?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Birthday", "Patient.SEX"]}, {"query": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Admission", "Patient.Birthday"]}, {"query": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Admission", "Patient.Diagnosis"]}, {"query": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Laboratory.Date", "Patient.ID", "Laboratory.ID"]}, {"query": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.SEX", "Patient.Birthday", "Examination.Examination Date", "Examination.Symptoms", "Patient.ID", "Examination.ID"]}, {"query": "List the patient ID, sex and birthday of patient with LDH beyond normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.LDH"]}, {"query": "State the ID and age of patient with positive degree of coagulation.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Patient.Birthday", "Examination.ID", "Examination.RVVT"]}, {"query": "For patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Diagnosis", "Examination.ID", "Examination.Thrombosis"]}, {"query": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.Birthday", "Laboratory.T-CHO"]}, {"query": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Diagnosis", "Laboratory.ID", "Laboratory.ALB"]}, {"query": "What is the percentage of female patient had total protein not within the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Laboratory.TP", "Patient.ID", "Laboratory.ID"]}, {"query": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Examination.aCL IgG", "Patient.ID", "Examination.ID", "Patient.Birthday", "Patient.Admission"]}, {"query": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Description", "Patient.SEX", "Patient.Admission"]}, {"query": "What was the age of the youngest patient when they initially arrived at the hospital?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.First Date", "Patient.Birthday"]}, {"query": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.SEX", "Patient.ID", "Examination.ID", "Examination.Examination Date", "Examination.Thrombosis"]}, {"query": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.TG"]}, {"query": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Examination.Symptoms", "Patient.Diagnosis", "Patient.ID", "Examination.ID", "Patient.Birthday"]}, {"query": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.Date", "Patient.SEX"]}, {"query": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory", "Patient"], "label_col": ["Laboratory.Date", "Patient.First Date", "Patient.Birthday", "Laboratory.ID", "Patient.ID", "Patient.Diagnosis"]}, {"query": "What is the ratio of male to female patients among all those with abnormal uric acid counts?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.UA", "Patient.SEX", "Patient.ID", "Laboratory.ID"]}, {"query": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Examination.ID", "Patient.Admission", "Examination.Examination Date", "Patient.First Date"]}, {"query": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Examination.ID", "Examination.Examination Date", "Patient.Birthday"]}, {"query": "How many male patients have elevated total bilirubin count?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.T-BIL", "Patient.SEX"]}, {"query": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Patient"], "label_col": ["Patient.Diagnosis", "Examination.ID", "Patient.ID", "Examination.Examination Date"]}, {"query": "What is the average age of patients examined in the laboratory for the October of the year 1991?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory", "Patient"], "label_col": ["Patient.Birthday", "Laboratory.ID", "Patient.ID", "Laboratory.Date"]}, {"query": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.Date", "Patient.Birthday", "Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.HGB"]}, {"query": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination"], "label_col": ["Examination.ANA", "Examination.ID", "Examination.Examination Date"]}, {"query": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.T-CHO", "Laboratory.ID"]}, {"query": "What was the gender of the first AORTITIS diagnosed patient?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.SEX", "Patient.Diagnosis", "Patient.First Date"]}, {"query": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Patient.ID", "Laboratory.ID", "Laboratory.GPT", "Laboratory.Date"]}, {"query": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.Date", "Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.UA"]}, {"query": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Examination.Symptoms", "Patient.ID", "Examination.ID", "Patient.Birthday", "Examination.Examination Date"]}, {"query": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.Date", "Laboratory.T-CHO", "Patient.ID", "Laboratory.ID", "Patient.Birthday"]}, {"query": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination"], "label_col": ["Examination.ID", "Examination.Examination Date", "Examination.Diagnosis"]}, {"query": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.ID", "Laboratory.GPT", "Laboratory.ALB"]}, {"query": "How many female patients born in 1964 were admitted to the hospital? List them by ID.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.ID", "Patient.Birthday", "Patient.SEX", "Patient.Admission"]}, {"query": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination"], "label_col": ["Examination.Thrombosis", "Examination.ANA Pattern", "Examination.aCL IgM"]}, {"query": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.UA", "Laboratory.ID", "Laboratory.U-PRO"]}, {"query": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Patient.First Date", "Patient.SEX"]}, {"query": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.Admission", "Laboratory.T-BIL", "Laboratory.Date"]}, {"query": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Examination.ID", "Examination.ANA Pattern", "Patient.Birthday", "Patient.SEX"]}, {"query": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination", "Laboratory"], "label_col": ["Patient.SEX", "Patient.ID", "Examination.ID", "Laboratory.ID", "Examination.Diagnosis", "Laboratory.CRP", "Laboratory.CRE", "Laboratory.LDH"]}, {"query": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.ALB", "Patient.ID", "Laboratory.ID", "Laboratory.PLT", "Patient.Diagnosis", "Patient.SEX"]}, {"query": "What is the most common sign of patients with SLE disease?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination"], "label_col": ["Examination.Symptoms", "Examination.Diagnosis"]}, {"query": "When was the medical information on patient number 48473 first documented, and what disease did she have?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.First Date", "Patient.Diagnosis", "Patient.ID"]}, {"query": "How many female patients were given an APS diagnosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Diagnosis"]}, {"query": "How many patients who underwent testing in 1997 had protein levels outside the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.ID", "Laboratory.ALB"]}, {"query": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination"], "label_col": ["Examination.Diagnosis", "Examination.ID", "Examination.Symptoms"]}, {"query": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient"], "label_col": ["Patient.SEX", "Patient.ID", "Patient.Diagnosis", "Patient.Birthday"]}, {"query": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with BEHCET disease did not stay in the hospital for treatment?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Patient.ID", "Examination.ID", "Examination.Diagnosis", "Patient.SEX", "Examination.Examination Date", "Patient.Admission"]}, {"query": "How many patients who were female got white blood cells that were below 3.5?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.WBC", "Patient.SEX"]}, {"query": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination"], "label_col": ["Examination.Examination Date", "Patient.First Date", "Patient.ID", "Examination.ID"]}, {"query": "Was the patient with the number 57266's uric acid within a normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Laboratory.UA", "Patient.ID", "Laboratory.ID"]}, {"query": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.ID", "Laboratory.GOT"]}, {"query": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.GOT", "Laboratory.Date"]}, {"query": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.SEX", "Laboratory.GPT"]}, {"query": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.GPT", "Patient.Birthday"]}, {"query": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.LDH"]}, {"query": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.Birthday", "Laboratory.ID", "Laboratory.LDH"]}, {"query": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Admission", "Patient.ID", "Laboratory.ID", "Laboratory.ALP"]}, {"query": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ALP", "Laboratory.ID", "Patient.Birthday"]}, {"query": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.TP"]}, {"query": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.TP", "Patient.ID", "Laboratory.ID", "Patient.SEX"]}, {"query": "Sort in descending order all patients by birthday for male patient with albumin not within range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.SEX", "Laboratory.ALB", "Patient.Birthday"]}, {"query": "For all patient born in 1982, state if their albumin is within normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.ALB", "Patient.ID", "Laboratory.ID", "Patient.Birthday"]}, {"query": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.UA", "Patient.ID", "Laboratory.ID", "Patient.SEX"]}, {"query": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.UA", "Patient.ID", "Laboratory.ID", "Patient.SEX", "Laboratory.Date"]}, {"query": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.UN"]}, {"query": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.UN", "Patient.Diagnosis"]}, {"query": "How many male patients are are with creatinine index out of the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.CRE", "Patient.SEX"]}, {"query": "Are there more male patients with creatinine not within the normal range than female? True or False?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Patient.ID", "Laboratory.ID", "Laboratory.CRE"]}, {"query": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.T-BIL", "Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID"]}, {"query": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.SEX", "Patient.ID", "Laboratory.ID", "Laboratory.T-BIL"]}, {"query": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.T-CHO", "Laboratory.ID", "Patient.Birthday"]}, {"query": "What is the average age of the male patient with high cholesterol?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.T-CHO", "Patient.SEX"]}, {"query": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.Diagnosis", "Laboratory.ID", "Laboratory.TG"]}, {"query": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.TG", "Patient.Birthday"]}, {"query": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.CPK", "Patient.Admission"]}, {"query": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.Birthday", "Patient.SEX", "Laboratory.CPK"]}, {"query": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.GLU", "Laboratory.T-CHO"]}, {"query": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.GLU", "Laboratory.ID", "Patient.First Date"]}, {"query": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Patient.Birthday", "Laboratory.ID", "Laboratory.WBC"]}, {"query": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Patient.Birthday", "Laboratory.ID", "Laboratory.RBC"]}, {"query": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.Admission", "Laboratory.ID", "Patient.SEX", "Laboratory.RBC", "Patient.Birthday"]}, {"query": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Laboratory.ID", "Laboratory.HGB", "Patient.Admission"]}, {"query": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Patient.SEX", "Laboratory.ID", "Patient.Diagnosis", "Laboratory.HGB", "Patient.Birthday"]}, {"query": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.HCT", "Patient.ID", "Laboratory.ID", "Laboratory.Date"]}, {"query": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.PLT", "Patient.ID", "Laboratory.ID"]}, {"query": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.PLT", "Laboratory.Date", "Patient.Birthday"]}, {"query": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.PT", "Patient.SEX", "Patient.ID", "Laboratory.ID", "Patient.Birthday"]}, {"query": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.First Date", "Laboratory.PT"]}, {"query": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.Date", "Laboratory.APTT"]}, {"query": "For the patients with an abnormal activated partial prothrom bin time, how many of them have a mild thrombosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Examination.Thrombosis", "Laboratory.APTT"]}, {"query": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.FG", "Laboratory.WBC", "Patient.SEX"]}, {"query": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.FG", "Patient.Birthday"]}, {"query": "Please list the disease names of the patients that have a proteinuria level higher than normal.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.U-PRO"]}, {"query": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.U-PRO", "Patient.Diagnosis"]}, {"query": "How many patients with an Ig G lower than normal has the symptom of abortion?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.IGG", "Examination.Symptoms"]}, {"query": "Among the patients with a normal Ig G level, how many of them have symptoms?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.IGG", "Examination.Symptoms"]}, {"query": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.IGA"]}, {"query": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.IGA", "Patient.First Date"]}, {"query": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.IGM"]}, {"query": "How many patients with a normal C-reactive protein don't have their data recorded?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.CRP", "Patient.Description"]}, {"query": "Among the patients whose C-reactive protein level is abnormal, how many of them aren't 18 yet?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.CRP", "Patient.Birthday"]}, {"query": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.RA", "Examination.KCT"]}, {"query": "Please list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.RA", "Patient.Birthday"]}, {"query": "Please list the ID of the patient whose RF is normal and who is older than 60.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.RF", "Patient.Birthday"]}, {"query": "How many patients with a normal RF don't have thrombosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.RF", "Examination.Thrombosis"]}, {"query": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.C3", "Examination.ANA Pattern"]}, {"query": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination", "Laboratory"], "label_col": ["Patient.ID", "Examination.ID", "Laboratory.ID", "Laboratory.HCT", "Examination.aCL IgA"]}, {"query": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.C4", "Patient.Diagnosis"]}, {"query": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.RNP", "Patient.Admission"]}, {"query": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.RNP"]}, {"query": "Among the patients with normal anti-SM, how many of them have the most severe degree of thrombosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.SM", "Examination.Thrombosis"]}, {"query": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.SM", "Patient.Birthday"]}, {"query": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.SC170", "Laboratory.Date"]}, {"query": "Among the patients who has a normal anti-scl70, how many of them are male and have the symptom of vertigo?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.SC170", "Patient.SEX", "Examination.Symptoms"]}, {"query": "How many patients with a normal anti-SSA came to the hospital before 1990?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.SSA", "Laboratory.Date"]}, {"query": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.First Date", "Laboratory.SSA"]}, {"query": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.SSB", "Patient.Diagnosis"]}, {"query": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.SSB", "Examination.Symptoms"]}, {"query": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.CENTROMEA", "Laboratory.SSB", "Patient.SEX"]}, {"query": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.DNA"]}, {"query": "How many patients have a normal anti-DNA level, yet their data are not recorded.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.DNA", "Patient.Description"]}, {"query": "Of the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.DNA-II", "Patient.Admission"]}, {"query": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.GOT"]}, {"query": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.GOT", "Patient.SEX"]}, {"query": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.GOT"]}, {"query": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.GPT"]}, {"query": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.GOT", "Patient.SEX"]}, {"query": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.First Date", "Patient.ID", "Laboratory.ID", "Laboratory.LDH"]}, {"query": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.First Date", "Patient.ID", "Laboratory.ID", "Laboratory.LDH"]}, {"query": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.ALP", "Patient.Admission"]}, {"query": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.ALP", "Patient.Admission"]}, {"query": "Please list the diagnosis of the patients whose total protein is lower than normal.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Diagnosis", "Patient.ID", "Laboratory.ID", "Laboratory.TP"]}, {"query": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.Diagnosis", "Laboratory.TP"]}, {"query": "What is the examination date of the patient whose albumin is the highest in the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory"], "label_col": ["Laboratory.ALB"]}, {"query": "How many male patients have a normal level of both albumin and total protein?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.SEX", "Laboratory.ALB", "Laboratory.TP"]}, {"query": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Examination.aCL IgG", "Examination.aCL IgM", "Examination.aCL IgA", "Patient.ID", "Laboratory.ID", "Examination.ID", "Patient.SEX", "Laboratory.UA"]}, {"query": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Examination", "Laboratory"], "label_col": ["Examination.ANA", "Patient.ID", "Examination.ID", "Laboratory.ID", "Laboratory.CRE"]}, {"query": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory", "Examination"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.CRE", "Examination.aCL IgA"]}, {"query": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.T-BIL", "Examination.ANA Pattern"]}, {"query": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Examination.ANA", "Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.T-BIL"]}, {"query": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.T-CHO", "Examination.KCT"]}, {"query": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Examination.ANA Pattern", "Laboratory.T-CHO"]}, {"query": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.ID", "Laboratory.ID", "Laboratory.TG", "Examination.Symptoms"]}, {"query": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Examination", "Laboratory"], "label_col": ["Examination.Diagnosis", "Examination.ID", "Laboratory.ID", "Laboratory.TG"]}, {"query": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Laboratory", "Examination"], "label_col": ["Laboratory.ID", "Examination.ID", "Examination.Thrombosis", "Laboratory.CPK"]}, {"query": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.CPK", "Examination.KCT", "Examination.RVVT", "Examination.LAC"]}, {"query": "When is the birthday of the oldest patient whose blood glucose is abnormal?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.Birthday", "Patient.ID", "Laboratory.ID", "Laboratory.GLU"]}, {"query": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.GLU", "Examination.Thrombosis"]}, {"query": "How many patients accepted to the hospital have a normal level of white blood cells?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.WBC", "Patient.Admission"]}, {"query": "How many patients diagnosed with SLE have a normal white blood cell level?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Patient.Diagnosis", "Laboratory.WBC"]}, {"query": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.RBC", "Patient.Admission"]}, {"query": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Patient.ID", "Laboratory.ID", "Laboratory.PLT", "Patient.Diagnosis"]}, {"query": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.PLT", "Patient.ID", "Laboratory.ID", "Patient.Diagnosis"]}, {"query": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory"], "label_col": ["Laboratory.PT", "Patient.ID", "Laboratory.ID", "Patient.SEX"]}, {"query": "How many patients with severe thrombosis have a normal prothrombin time?", "table_infos": "table:\n{'Examination': ['ID', 'Examination Date', 'anti-Cardiolipin antibody (IgG)', 'anti-Cardiolipin antibody (IgM)', 'anti-nucleus antibody', 'pattern observed in the sheet of ANA examination', 'anti-Cardiolipin antibody (IgA) concentration', 'Diagnosis', 'measure of degree of coagulation', 'measure of degree of coagulation', 'measure of degree of coagulation', 'Symptoms', 'Thrombosis'], 'Patient': ['ID', 'SEX', 'Birthday', 'Description', 'First Date', 'Admission', 'Diagnosis'], 'Laboratory': ['ID', 'Date', 'AST glutamic oxaloacetic transaminase', 'ALT glutamic pyruvic transaminase', 'lactate dehydrogenase', 'alkaliphophatase', 'total protein', 'albumin', 'uric acid', 'urea nitrogen', 'creatinine', 'total bilirubin', 'total cholesterol', 'triglyceride', 'creatinine phosphokinase', 'blood glucose', 'White blood cell', 'Red blood cell', 'Hemoglobin', 'Hematoclit', 'platelet', 'prothrombin time', 'activated partial prothrombin time', 'fibrinogen', 'PIC', 'TAT', 'TAT2', 'proteinuria', 'Ig G', 'Ig A', 'Ig M', 'C-reactive protein', 'Rhuematoid Factor', 'RAHA', 'complement 3', 'complement 4', 'anti-ribonuclear protein', 'anti-SM', 'anti-scl70', 'anti-SSA', 'anti-SSB', 'anti-centromere', 'anti-DNA', 'anti-DNA']}\nforeign_keys:['Examination.ID = Patient.ID', 'Laboratory.ID = Patient.ID']\n", "label_table": ["Patient", "Laboratory", "Examination"], "label_col": ["Patient.ID", "Laboratory.ID", "Examination.ID", "Laboratory.PT", "Examination.Thrombosis"]}, {"query": "What's Angela Sanders's major?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "member.link_to_major", "major.major_id", "member.first_name", "member.last_name"]}, {"query": "How many students in the Student_Club are from the College of Engineering?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.member_id", "member.link_to_major", "major.major_id", "major.college"]}, {"query": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.first_name", "member.last_name", "member.link_to_major", "major.major_id", "major.department"]}, {"query": "How many students of the Student_Club have attended the event \"Women's Soccer\"?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["event.event_id", "attendance.link_to_event", "event.event_name"]}, {"query": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member"], "label_col": ["member.phone", "event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "event.event_name"]}, {"query": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member"], "label_col": ["event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "event.event_name", "member.t_shirt_size"]}, {"query": "What is the event that has the highest attendance of the students from the Student_Club?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["event.event_name", "event.event_id", "attendance.link_to_event"]}, {"query": "Which college is the vice president of the Student_Club from?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.college", "member.link_to_major", "major.major_id", "member.position"]}, {"query": "Please list the event names of all the events attended by Maya Mclean.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member"], "label_col": ["event.event_name", "event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "member.first_name", "member.last_name"]}, {"query": "How many events of the Student_Club did Sacha Harrison attend in 2019?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member"], "label_col": ["event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "member.first_name", "member.last_name", "event.event_date"]}, {"query": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["event.event_id", "attendance.link_to_event", "event.type"]}, {"query": "Please list the names of all the events of the Student_Club that had an attendance of over 20 students.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["event.event_name", "event.event_id", "attendance.link_to_event"]}, {"query": "What is the average attendance of meetings in 2020?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["attendance.link_to_event", "event.event_id", "event.event_date", "event.type"]}, {"query": "What is the most expensive item that was spent in support of club events?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.expense_description", "expense.cost"]}, {"query": "How many members of the Student_Club have majored Environmental Engineering?\n", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.member_id", "member.link_to_major", "major.major_id", "major.major_name"]}, {"query": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "attendance", "event"], "label_col": ["member.first_name", "member.last_name", "member.member_id", "attendance.link_to_member", "attendance.link_to_event", "event.event_id", "event.event_name"]}, {"query": "List the last name of all the students who majored Law and Constitutional Studies. \n", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.last_name", "member.link_to_major", "major.major_id", "major.major_name"]}, {"query": "What county did Sherri Ramsey grew up?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.county", "member.zip", "zip_code.zip_code", "member.first_name", "member.last_name"]}, {"query": "What college offers the major that Tyler Hewitt took?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.college", "member.link_to_major", "major.major_id", "member.first_name", "member.last_name"]}, {"query": "What is the amount of the funds that the Vice President received?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["income.amount", "member.member_id", "income.link_to_member", "member.position"]}, {"query": "How much did the Student_Club members spend on food in September Meeting?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.spent", "event.event_id", "budget.link_to_event", "event.event_name", "budget.category", "event.event_date"]}, {"query": "What city and state did the President of the Student_Club grow up?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.city", "zip_code.state", "member.zip", "zip_code.zip_code", "member.position"]}, {"query": "List the full name of the Student_Club members that grew up in Illinois state.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["member.first_name", "member.last_name", "member.zip", "zip_code.zip_code", "zip_code.state"]}, {"query": "How much did the Student_Club members spend on advertisement in September Meeting?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.spent", "event.event_id", "budget.link_to_event", "event.event_name", "budget.category", "event.event_date"]}, {"query": "What department offers the major that Pierce and Guidi took?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.department", "member.link_to_major", "major.major_id", "member.last_name"]}, {"query": "What is the total budgeted amount for all category in \"October Speaker\" event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.amount", "event.event_id", "budget.link_to_event", "event.event_name"]}, {"query": "Was each expense in October Meeting on October 8, 2019 approved?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["expense.approved", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "event.event_name", "event.event_date"]}, {"query": "Calculate the total average cost that Elijah Allen spent in the events on September and October.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["expense.cost", "member.member_id", "expense.link_to_member", "member.last_name", "member.first_name", "expense.expense_date"]}, {"query": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["event.event_date", "budget.spent", "event.event_id", "budget.link_to_event"]}, {"query": "Give the location for \"Spring Budget Review\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event"], "label_col": ["event.event_name"]}, {"query": "What was the cost for the \"Posters\" on 2019/9/4?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.cost", "expense.expense_description", "expense.expense_date"]}, {"query": "With the biggest budget for the \"Food\", what was the remaining of it?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.remaining", "budget.category", "budget.amount"]}, {"query": "What was the notes of the fundraising on 2019/9/14?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["income"], "label_col": ["income.notes", "income.date_received"]}, {"query": "How many majors are there in \"College of Humanities and Social Sciences\"?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major"], "label_col": ["major.major_name", "major.college"]}, {"query": "Tell the phone number of \"Carlo Jacobs\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.phone", "member.first_name", "member.last_name"]}, {"query": "Tell the hometown county for \"Adela O'Gallagher\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.county", "member.zip", "zip_code.zip_code", "member.first_name", "member.last_name"]}, {"query": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_id", "budget.link_to_event", "event.event_name", "budget.remaining"]}, {"query": "Provide the total number of the budget amount for \"September Speaker\" event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["budget.amount", "budget.link_to_event", "event.event_id", "event.event_name"]}, {"query": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "expense"], "label_col": ["budget.event_status", "budget.budget_id", "expense.link_to_budget", "expense.expense_description", "expense.expense_date"]}, {"query": "What was Brent Thomason's major?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "member.link_to_major", "major.major_id", "member.first_name", "member.last_name"]}, {"query": "For all the club members from \"Human Development and Family Studies\" major, how many of them wear large size t-shirt?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.member_id", "member.link_to_major", "major.major_id", "major.major_name", "member.t_shirt_size"]}, {"query": "What's Christof Nielson's zip code type?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.type", "member.zip", "zip_code.zip_code", "member.first_name", "member.last_name"]}, {"query": "State the major name for the Vice President of the club.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "member.link_to_major", "major.major_id", "member.position"]}, {"query": "Where is the hometown state for \"Sacha Harrison\"?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.state", "member.zip", "zip_code.zip_code", "member.first_name", "member.last_name"]}, {"query": "Which department was the President of the club in?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.department", "member.link_to_major", "major.major_id", "member.position"]}, {"query": "State the date Connor Hilton paid his/her dues.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["income.date_received", "member.member_id", "income.link_to_member", "member.first_name", "member.last_name", "income.source"]}, {"query": "Who was the first one paid his/her dues? Tell the full name.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["member.first_name", "member.last_name", "member.member_id", "income.link_to_member", "income.source", "income.date_received"]}, {"query": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_name", "budget.amount", "budget.link_to_event", "event.event_id", "budget.category", "event.type"]}, {"query": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["budget.category", "budget.amount", "budget.link_to_event", "event.event_id", "event.event_name"]}, {"query": "What is the total cost of the pizzas for all the events?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.cost", "expense.expense_description"]}, {"query": "How many cities are there in Orange County, Virginia?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["zip_code"], "label_col": ["zip_code.city", "zip_code.county", "zip_code.state"]}, {"query": "List all of the College of Humanities and Social Sciences' departments.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major"], "label_col": ["major.department", "major.college"]}, {"query": "Where is Amy Firth's hometown?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.city", "zip_code.county", "zip_code.state", "member.zip", "zip_code.zip_code", "member.first_name", "member.last_name"]}, {"query": "What are the expenses of the budget with the lowest remaining?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "expense"], "label_col": ["expense.expense_description", "budget.budget_id", "expense.link_to_budget", "budget.remaining"]}, {"query": "List all the members who attended the event \"October Meeting\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member"], "label_col": ["member.member_id", "event.event_id", "attendance.link_to_event", "attendance.link_to_member", "event.event_name"]}, {"query": "Which college do most of the members go to?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.college", "member.link_to_major", "major.major_id"]}, {"query": "What does the person with the phone number \"809-555-3360\" major in?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "member.link_to_major", "major.major_id", "member.phone"]}, {"query": "Which event has the highest budget amount?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_name", "budget.link_to_event", "event.event_id", "budget.amount"]}, {"query": "List all the expenses incurred by the vice president.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["expense.expense_id", "expense.expense_description", "member.member_id", "expense.link_to_member", "member.position"]}, {"query": "How many members attended the \"Women's Soccer\" event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["attendance.link_to_member", "event.event_id", "attendance.link_to_event", "event.event_name"]}, {"query": "When did the member, Casey Mason, received the income?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["income.date_received", "member.member_id", "income.link_to_member", "member.first_name", "member.last_name"]}, {"query": "How many of the members' hometowns are from Maryland state?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["zip_code", "member"], "label_col": ["member.member_id", "zip_code.zip_code", "member.zip", "zip_code.state"]}, {"query": "How many events did the member with the phone number \"954-555-6240\" attend?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "attendance"], "label_col": ["attendance.link_to_event", "member.member_id", "attendance.link_to_member", "member.phone"]}, {"query": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.first_name", "member.last_name", "member.link_to_major", "major.major_id", "major.department"]}, {"query": "Among all the closed events, which event has the highest spend-to-budget ratio?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_name", "budget.link_to_event", "event.event_id", "event.status", "budget.spent", "budget.amount"]}, {"query": "How many student have the position of president?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.member_id"]}, {"query": "What is the highest amount of budget spend for an event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.spent"]}, {"query": "How many meeting events were held in 2020?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event"], "label_col": ["event.event_id", "event.event_date"]}, {"query": "What is the total amount of money spent for food?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.spent", "budget.category"]}, {"query": "List the name of students that have attended more than 7 events.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "attendance"], "label_col": ["member.first_name", "member.last_name", "member.member_id", "attendance.link_to_member", "attendance.link_to_event"]}, {"query": "Among the students majored in interior design, who have attended the Community Theater event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member", "attendance", "event"], "label_col": ["member.first_name", "member.last_name", "major.major_id", "member.link_to_major", "member.member_id", "attendance.link_to_member", "attendance.link_to_event", "event.event_id", "event.event_name", "major.major_name"]}, {"query": "State the name of students from Georgetown, South Carolina.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["member.first_name", "member.last_name", "member.zip", "zip_code.zip_code", "zip_code.city", "zip_code.state"]}, {"query": "How many income generated by Grant Gilmour?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["income.amount", "member.member_id", "income.link_to_member", "member.first_name", "member.last_name"]}, {"query": "Which student was able to generate income more than $40?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["member.first_name", "member.last_name", "member.member_id", "income.link_to_member", "income.amount"]}, {"query": "What is the total expense for the Yearly Kickoff?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["expense.cost", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "event.event_name"]}, {"query": "Which student has been entrusted to manage the budget for the Yearly Kickoff?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense", "member"], "label_col": ["member.first_name", "member.last_name", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "expense.link_to_member", "member.member_id", "event.event_name"]}, {"query": "Which students manage to generate the highest income. State his/her full name along with the income source.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["member.first_name", "member.last_name", "income.source", "member.member_id", "income.link_to_member", "income.amount"]}, {"query": "Which event has the lowest cost?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["event.event_name", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "expense.cost"]}, {"query": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["event.event_name", "expense.cost", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget"]}, {"query": "What is the ratio between students majored in finance and physics?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major"], "label_col": ["major.major_name"]}, {"query": "Indicate the top source of funds received in September 2019 based on their amount.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["income"], "label_col": ["income.date_received"]}, {"query": "Provide the full name and email address of the Student_Club's Secretary.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.first_name", "member.last_name", "member.email"]}, {"query": "How many members of the Student_Club have major in 'Physics Teaching'?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["member.member_id", "major.major_id", "member.link_to_major", "major.major_name"]}, {"query": "How many members did attend the event 'Community Theater' in 2019?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance"], "label_col": ["attendance.link_to_member", "event.event_id", "attendance.link_to_event", "event.event_name", "event.event_date"]}, {"query": "Provide the number of events attended by Luisa Guidi. What is her major?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member", "attendance"], "label_col": ["attendance.link_to_event", "major.major_name", "major.major_id", "member.link_to_major", "member.member_id", "attendance.link_to_member", "member.first_name", "member.last_name"]}, {"query": "On average, how much did the Student_Club spend on food for the typical event in the past?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.spent", "budget.category", "budget.event_status"]}, {"query": "Name the event with the highest amount spent on advertisement.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_name", "budget.link_to_event", "event.event_id", "budget.category", "budget.spent"]}, {"query": "Did Maya Mclean attend the 'Women's Soccer' event?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "attendance", "event"], "label_col": ["event.event_name", "member.member_id", "attendance.link_to_member", "attendance.link_to_event", "event.event_id", "member.first_name", "member.last_name"]}, {"query": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event"], "label_col": ["event.event_date"]}, {"query": "Indicate the cost of posters for 'September Speaker' event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["expense.cost", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "event.event_name", "expense.expense_description"]}, {"query": "What is the most popular size of t-shirt ordered by the club members?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.t_shirt_size"]}, {"query": "Indicate the name of the closed event whose cost has exceeded the budget the most.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["event.event_name", "event.event_id", "budget.link_to_event", "budget.event_status", "budget.remaining"]}, {"query": "Identify the type of expenses and their total value approved for 'October Meeting' event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["event.type", "expense.cost", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "event.event_name"]}, {"query": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.amount", "budget.category", "event.event_id", "budget.link_to_event", "event.event_name"]}, {"query": "Among the budgets for Food, which one has the highest budgeted amount?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.budget_id", "budget.category", "budget.amount"]}, {"query": "Among the budgets for Advertising, list out top three which have the most budgeted amount?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.budget_id", "budget.category", "budget.amount"]}, {"query": "Calculate the total cost spent for Parking in the list.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.cost", "expense.expense_description"]}, {"query": "Mention the total expense used on 8/20/2019.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.cost", "expense.expense_date"]}, {"query": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["member.first_name", "member.last_name", "expense.cost", "member.member_id", "expense.link_to_member"]}, {"query": "State what kind of expenses that Sacha Harrison incurred?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["expense.expense_description", "member.member_id", "expense.link_to_member", "member.first_name", "member.last_name"]}, {"query": "What kind of expenses incurred by members who have X-Large in size of tee shirt?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["expense.expense_description", "member.member_id", "expense.link_to_member", "member.t_shirt_size"]}, {"query": "Mention the zip code of member who incurred less than 50USD.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["member.zip", "member.member_id", "expense.link_to_member", "expense.cost"]}, {"query": "State the name of major that Phillip Cullen has joined.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["major.major_name", "major.major_id", "member.link_to_major", "member.first_name", "member.last_name"]}, {"query": "List out the position of members who joined major of Business.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["member.position", "major.major_id", "member.link_to_major", "major.major_name"]}, {"query": "How many members of Business have the Medium size of tee shirt?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["member.member_id", "major.major_id", "member.link_to_major", "major.major_name", "member.t_shirt_size"]}, {"query": "List out the type of events which have remaining budget more than 30 USD.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["event.type", "event.event_id", "budget.link_to_event", "budget.remaining"]}, {"query": "Mention the category of events which were held at MU 215.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.category", "event.event_id", "budget.link_to_event", "event.location"]}, {"query": "What is the category of event which was taken place in 2020-03-24T12:00:00?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.category", "event.event_id", "budget.link_to_event", "event.event_date"]}, {"query": "State the name of major that Vice President has joined.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["major.major_name", "major.major_id", "member.link_to_major", "member.position"]}, {"query": "Calculate the percentage of members who are major Mathematics in the list?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "member.member_id", "major.major_id", "member.link_to_major", "member.position"]}, {"query": "State the category of events were held at MU 215.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.category", "event.event_id", "budget.link_to_event", "event.location"]}, {"query": "How many income are received with an amount of 50?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["income"], "label_col": ["income.income_id", "income.amount"]}, {"query": "Among the members, how many of them have an extra large t-shirt size?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.member_id", "member.t_shirt_size"]}, {"query": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major"], "label_col": ["major.major_id", "major.department", "major.college"]}, {"query": "List the last name of members with a major in environmental engineering and include its department and college name.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["major", "member"], "label_col": ["member.last_name", "major.department", "major.college", "major.major_id", "member.link_to_major", "member.position", "major.major_name"]}, {"query": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.category", "event.type", "event.event_id", "budget.link_to_event", "event.location", "budget.spent"]}, {"query": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["attendance", "event", "member"], "label_col": ["event.event_name", "event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "member.position", "event.location", "event.type"]}, {"query": "What is the last name and position of the student that bought pizza on 09/10/2019?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["member.last_name", "member.position", "member.member_id", "expense.link_to_member", "expense.expense_date", "expense.expense_description"]}, {"query": "List the last name of the members of the club that attended the women's soccer event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["attendance", "event", "member"], "label_col": ["member.last_name", "event.event_id", "attendance.link_to_event", "attendance.link_to_member", "member.member_id", "event.event_name", "member.position"]}, {"query": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "income"], "label_col": ["income.amount", "income.income_id", "member.member_id", "income.link_to_member", "member.position", "member.t_shirt_size"]}, {"query": "Which countries have zip codes with post office boxes?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["zip_code"], "label_col": ["zip_code.county"]}, {"query": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["zip_code"], "label_col": ["zip_code.zip_code", "zip_code.county", "zip_code.state"]}, {"query": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event"], "label_col": ["event.event_name", "event.event_date", "event.status"]}, {"query": "Please provide links to events for members who have paid more than 50 dollar.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "member", "attendance"], "label_col": ["attendance.link_to_event", "expense.link_to_member", "member.member_id", "attendance.link_to_member", "expense.cost"]}, {"query": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "member", "attendance"], "label_col": ["expense.link_to_member", "attendance.link_to_event", "member.member_id", "attendance.link_to_member", "expense.expense_date", "expense.approved"]}, {"query": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.college", "major.major_id", "member.link_to_major", "member.first_name"]}, {"query": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.phone", "major.major_id", "member.link_to_major", "major.major_name", "major.college"]}, {"query": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "expense"], "label_col": ["member.email", "member.member_id", "expense.link_to_member", "expense.expense_date", "expense.cost"]}, {"query": "How many members have education major in the College of Education & Human Services?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.member_id", "major.major_id", "member.link_to_major", "member.position", "major.major_name", "major.college"]}, {"query": "What is the percentage of the events that went over budget?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget"], "label_col": ["budget.remaining", "budget.budget_id"]}, {"query": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event"], "label_col": ["event.event_id", "event.location", "event.status", "event.event_date"]}, {"query": "List the expenses that spend more than fifty dollars on average.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense"], "label_col": ["expense.expense_description", "expense.cost"]}, {"query": "Find the full name of members whose t-shirt size is extra large.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member"], "label_col": ["member.first_name", "member.last_name", "member.t_shirt_size"]}, {"query": "Calculate the percentage of zip codes that are PO boxes.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["zip_code"], "label_col": ["zip_code.zip_code"]}, {"query": "List the name and location of events that underspend its budget.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["event.event_name", "event.location", "event.event_id", "budget.link_to_event", "budget.remaining"]}, {"query": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["event.event_name", "event.event_date", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget", "expense.expense_description", "expense.cost"]}, {"query": "What is the name and major of members who had to spend more than a hundred dollars on an expense?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major", "expense"], "label_col": ["member.first_name", "member.last_name", "major.major_name", "major.major_id", "member.link_to_major", "member.member_id", "expense.link_to_member", "expense.cost"]}, {"query": "In the events with more than forty incomes, list the city and country in which the event is happening.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["income", "member", "zip_code"], "label_col": ["zip_code.city", "zip_code.county", "income.link_to_member", "member.member_id", "zip_code.zip_code", "member.zip", "income.amount"]}, {"query": "Among the members who incurred expenses in more than one event, who paid the most amount?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "member", "budget", "event"], "label_col": ["member.member_id", "expense.link_to_member", "expense.link_to_budget", "budget.budget_id", "budget.link_to_event", "event.event_id", "expense.cost"]}, {"query": "What is the average amount paid by students in a position other than a member?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "member"], "label_col": ["expense.cost", "expense.link_to_member", "member.member_id", "member.position"]}, {"query": "What is the percentage of the cost for the game events?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget", "expense"], "label_col": ["event.type", "expense.cost", "event.event_id", "budget.link_to_event", "budget.budget_id", "expense.link_to_budget"]}, {"query": "Which budget allowed the most money for water, chips, and cookies?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "budget"], "label_col": ["budget.budget_id", "expense.link_to_budget", "expense.expense_description", "expense.cost"]}, {"query": "List the full name of the top five members who spend the most money in the descending order of spending.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "budget", "member"], "label_col": ["member.first_name", "member.last_name", "expense.link_to_budget", "budget.budget_id", "expense.link_to_member", "member.member_id", "budget.spent"]}, {"query": "Give the full name and contact number of members who had to spend more than average on each expense.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "budget", "member"], "label_col": ["member.first_name", "member.last_name", "member.phone", "expense.link_to_budget", "budget.budget_id", "member.member_id", "expense.link_to_member", "expense.cost"]}, {"query": "Calculate the difference in the percentage of members in Maine and Vermont.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.state", "member.member_id", "zip_code.zip_code", "member.zip"]}, {"query": "What is the major of Garrett Gerke and which department does it belong to?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["major.major_name", "major.department", "major.major_id", "member.link_to_major", "member.first_name", "member.last_name"]}, {"query": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "member"], "label_col": ["member.first_name", "member.last_name", "expense.cost", "expense.link_to_member", "member.member_id", "expense.expense_description"]}, {"query": "List the last names of students under the Elementary Education major and include their phone numbers.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "major"], "label_col": ["member.last_name", "member.phone", "major.major_id", "member.link_to_major", "major.major_name"]}, {"query": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["budget.category", "budget.amount", "event.event_id", "budget.link_to_event", "event.event_name"]}, {"query": "List the event names which were budgeted for the food.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "budget"], "label_col": ["event.event_name", "event.event_id", "budget.link_to_event", "budget.category"]}, {"query": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["event", "attendance", "member", "income"], "label_col": ["member.first_name", "member.last_name", "income.amount", "event.event_id", "attendance.link_to_event", "member.member_id", "attendance.link_to_member", "income.link_to_member", "income.date_received"]}, {"query": "Which budget category does the expense 'Posters' fall to?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["expense", "budget"], "label_col": ["budget.category", "expense.link_to_budget", "budget.budget_id", "expense.expense_description"]}, {"query": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["budget", "event"], "label_col": ["budget.spent", "event.event_name", "budget.link_to_event", "event.event_id", "budget.category"]}, {"query": "Where is the hometown of Garrett Girke?", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["zip_code.city", "zip_code.zip_code", "member.zip", "member.first_name", "member.last_name"]}, {"query": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.", "table_infos": "table:\n{'Event': ['event id', 'event name', 'event date', 'type', 'notes', 'location', 'status'], 'Major': ['major id', 'major name', 'department', 'college'], 'Zip_Code': ['zip code', 'type', 'city', 'county', 'state', 'short state'], 'Attendance': ['link to event', 'link to member'], 'Budget': ['budget id', 'category', 'spent', 'remaining', 'amount', 'event status', 'link to event'], 'Expense': ['expense id', 'expense description', 'expense date', 'cost', 'approved', 'link to member', 'link to budget'], 'Income': ['income id', 'date received', 'amount', 'source', 'notes', 'link to member'], 'Member': ['member id', 'first name', 'last name', 'email', 'position', 't_shirt_size', 'phone', 'zip', 'link to major']}\nforeign_keys:['Attendance.link to member = Member.member id', 'Attendance.link to event = Event.event id', 'Budget.link to event = Event.event id', 'Expense.link to member = Member.member id', 'Expense.link to budget = Budget.budget id', 'Income.link to member = Member.member id', 'Member.zip = Zip_Code.zip code', 'Member.link to major = Major.major id']\n", "label_table": ["member", "zip_code"], "label_col": ["member.first_name", "member.last_name", "member.position", "zip_code.zip_code", "member.zip", "zip_code.city", "zip_code.state"]}, {"query": "How many gas stations in CZE has Premium gas?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["gasstations"], "label_col": ["gasstations.GasStationID", "gasstations.Country"]}, {"query": "What is the ratio of costumers who pay in EUR against customers who pay in CZK?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers"], "label_col": ["customers.Currency"]}, {"query": "In 2012, who had the least consumption in LAM?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.CustomerID", "yearmonth.CustomerID", "customers.Segment", "yearmonth.date", "yearmonth.Consumption"]}, {"query": "What was the average monthly consumption of customers in SME for the year 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date", "customers.Segment"]}, {"query": "Which customers, paying in CZK, consumed the most gas in 2011?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.CustomerID", "yearmonth.CustomerID", "customers.Currency", "yearmonth.Date", "yearmonth.Consumption"]}, {"query": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.CustomerID", "customers.CustomerID", "customers.Segment", "yearmonth.Date", "yearmonth.Consumption"]}, {"query": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.Currency", "yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date"]}, {"query": "Which year recorded the most gas use paid in EUR?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Date", "customers.CustomerID", "yearmonth.CustomerID", "customers.Currency", "yearmonth.Consumption"]}, {"query": "Which segment had the least consumption?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.Segment", "customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Consumption"]}, {"query": "Which year recorded the most consumption of gas paid in CZK?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Date", "customers.CustomerID", "yearmonth.CustomerID", "customers.Currency", "yearmonth.Consumption"]}, {"query": "What was the gas consumption peak month for SME customers in 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Date", "customers.CustomerID", "yearmonth.CustomerID", "customers.Segment", "yearmonth.Consumption"]}, {"query": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.Segment", "yearmonth.Date", "yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID"]}, {"query": "How much did customer 6 consume in total between August and November 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth"], "label_col": ["yearmonth.Consumption", "yearmonth.CustomerID"]}, {"query": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["gasstations"], "label_col": ["gasstations.Country"]}, {"query": "How much more was customer 7 consuming in April 2013 than customer 5?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth"], "label_col": ["yearmonth.CustomerID", "yearmonth.Consumption"]}, {"query": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers"], "label_col": ["customers.Currency"]}, {"query": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.CustomerID", "yearmonth.CustomerID", "customers.Segment", "yearmonth.Date", "customers.Currency", "yearmonth.Consumption"]}, {"query": "Who among KAM's customers consumed the most? How much did it consume?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.CustomerID", "yearmonth.Consumption", "customers.CustomerID", "customers.Segment"]}, {"query": "How much did the KAM customers consume in total in May 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date", "customers.Segment"]}, {"query": "How many percent of LAM customer consumed more than 46.73?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID", "customers.Segment"]}, {"query": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["gasstations"], "label_col": ["gasstations.Country", "gasstations.GasStationID"]}, {"query": "What percentage of KAM customers pay in euros?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers"], "label_col": ["customers.Currency", "customers.CustomerID"]}, {"query": "In February 2012, what percentage of customers consumed more than 528.3?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth"], "label_col": ["yearmonth.Consumption", "yearmonth.CustomerID"]}, {"query": "What percentage of Slovakian gas stations are premium?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["gasstations"], "label_col": ["gasstations.GasStationID", "gasstations.Country"]}, {"query": "Which client ID consumed the most in September 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date", "yearmonth.Consumption"]}, {"query": "Which client segment consumed the least in September 2013?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.Segment", "customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date", "yearmonth.Consumption"]}, {"query": "Which SME customer consumed the least in June 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["customers.CustomerID", "yearmonth.CustomerID", "yearmonth.Date", "customers.Segment", "yearmonth.Consumption"]}, {"query": "What is the highest monthly consumption in the year 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth"], "label_col": ["yearmonth.Consumption"]}, {"query": "What is the biggest monthly consumption of the customers who use euro as their currency?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["customers", "yearmonth"], "label_col": ["yearmonth.Consumption", "customers.CustomerID", "yearmonth.CustomerID", "customers.Currency"]}, {"query": "Please list the product description of the products consumed in September, 2013.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "yearmonth", "products"], "label_col": ["products.Description", "transactions_1k.CustomerID", "yearmonth.CustomerID", "transactions_1k.ProductID", "products.ProductID", "yearmonth.Date"]}, {"query": "Please list the countries of the gas stations with transactions taken place in June, 2013.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations", "yearmonth"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.CustomerID", "yearmonth.CustomerID", "yearmonth.Date"]}, {"query": "Please list the chains of the gas stations with transactions in euro.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers", "gasstations"], "label_col": ["gasstations.ChainID", "transactions_1k.CustomerID", "customers.CustomerID", "transactions_1k.GasStationID", "gasstations.GasStationID", "customers.Currency"]}, {"query": "Please list the product description of the products bought in transactions in euro.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers", "products"], "label_col": ["transactions_1k.ProductID", "products.Description", "transactions_1k.CustomerID", "customers.CustomerID", "products.ProductID", "customers.Currency"]}, {"query": "What is the average total price of the transactions taken place in January, 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k"], "label_col": ["transactions_1k.Amount"]}, {"query": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth", "customers"], "label_col": ["yearmonth.CustomerID", "customers.CustomerID", "customers.Currency", "yearmonth.Consumption"]}, {"query": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations", "products"], "label_col": ["products.Description", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.ProductID", "products.ProductID", "gasstations.Country"]}, {"query": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.Time", "transactions_1k.GasStationID", "gasstations.GasStationID", "gasstations.ChainID"]}, {"query": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.TransactionID", "transactions_1k.GasStationID", "gasstations.GasStationID", "gasstations.Country", "transactions_1k.Price"]}, {"query": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.TransactionID", "transactions_1k.GasStationID", "gasstations.GasStationID", "gasstations.Country", "transactions_1k.Date"]}, {"query": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.Price", "transactions_1k.GasStationID", "gasstations.GasStationID", "gasstations.Country"]}, {"query": "For the customers who paid in the euro, what is their average total price of the transactions?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations", "customers"], "label_col": ["transactions_1k.Price", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.CustomerID", "customers.CustomerID", "customers.Currency"]}, {"query": "Which customer paid the most in 2012/8/25?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k"], "label_col": ["transactions_1k.CustomerID", "transactions_1k.Price"]}, {"query": "Which country's gas station had the first paid cusomer in 2012/8/25?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.Date", "transactions_1k.Time"]}, {"query": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations", "customers"], "label_col": ["customers.Currency", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.CustomerID", "customers.CustomerID", "transactions_1k.Date", "transactions_1k.Time"]}, {"query": "What segment did the customer have at 2012/8/23 21:20:00?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers"], "label_col": ["customers.Segment", "transactions_1k.CustomerID", "customers.CustomerID", "transactions_1k.date", "transactions_1k.time"]}, {"query": "How many transactions were paid in EUR in the morning of 2012/8/26?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers"], "label_col": ["transactions_1k.TransactionID", "transactions_1k.CustomerID", "customers.CustomerID", "transactions_1k.Date", "transactions_1k.Time", "customers.Currency"]}, {"query": "For the earliest customer, what segment did he/she have?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers"], "label_col": ["customers.Segment", "transactions_1k.CustomerID", "customers.CustomerID"]}, {"query": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.Date", "transactions_1k.Time"]}, {"query": "What was the product id of the transaction happened at 2012/8/23 21:20:00?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.ProductID", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.Date", "transactions_1k.Time"]}, {"query": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "yearmonth"], "label_col": ["transactions_1k.CustomerID", "yearmonth.Date", "yearmonth.Consumption", "yearmonth.CustomerID", "transactions_1k.Date", "transactions_1k.Price"]}, {"query": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["transactions_1k.TransactionID", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.Date", "transactions_1k.Time", "gasstations.Country"]}, {"query": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["yearmonth", "customers"], "label_col": ["customers.Currency", "yearmonth.CustomerID", "customers.CustomerID", "yearmonth.Date", "yearmonth.Consumption"]}, {"query": "Which country was the card owner of No.667467 in?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.CardID"]}, {"query": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.Date", "transactions_1k.Price"]}, {"query": "What is the percentage of the customers who used EUR in 2012/8/25?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "customers"], "label_col": ["customers.Currency", "transactions_1k.CustomerID", "customers.CustomerID", "transactions_1k.Date"]}, {"query": "Which gas station has the highest amount of revenue?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k"], "label_col": ["transactions_1k.GasStationID", "transactions_1k.Price"]}, {"query": "What is the percentage of \"premium\" against the overall segment in \"SVK\"?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["gasstations"], "label_col": ["gasstations.Country"]}, {"query": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations", "yearmonth"], "label_col": ["transactions_1k.Price", "yearmonth.Date", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.CustomerID", "yearmonth.CustomerID"]}, {"query": "Which are the top five best selling products? Please state the full name of them.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "products"], "label_col": ["products.Description", "transactions_1k.ProductID", "products.ProductID", "transactions_1k.Amount"]}, {"query": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "gasstations"], "label_col": ["gasstations.Country", "transactions_1k.GasStationID", "gasstations.GasStationID", "transactions_1k.ProductID", "transactions_1k.Price"]}, {"query": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.", "table_infos": "table:\n{'customers': ['CustomerID', 'client segment', 'Currency'], 'gasstations': ['Gas Station ID', 'Chain ID', 'Country', 'chain segment'], 'products': ['Product ID', 'Description'], 'transactions_1k': ['Transaction ID', 'Date', 'Time', 'Customer ID', 'Card ID', 'Gas Station ID', 'Product ID', 'Amount', 'Price'], 'yearmonth': ['Customer ID', 'Date', 'Consumption']}\nforeign_keys:['yearmonth.Customer ID = customers.CustomerID']\n", "label_table": ["transactions_1k", "yearmonth"], "label_col": ["yearmonth.Consumption", "transactions_1k.CustomerID", "yearmonth.CustomerID", "transactions_1k.Price", "transactions_1k.Amount", "transactions_1k.ProductID", "yearmonth.Date"]}, {"query": "How many singers do we have?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": []}, {"query": "What is the total number of singers?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": []}, {"query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.name", "singer.country", "singer.age"]}, {"query": "What are the names, countries, and ages for every singer in descending order of age?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.name", "singer.country", "singer.age"]}, {"query": "What is the average, minimum, and maximum age of all singers from France?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.age", "singer.country"]}, {"query": "What is the average, minimum, and maximum age for all French singers?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.age", "singer.country"]}, {"query": "Show the name and the release year of the song by the youngest singer.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.song_name", "singer.song_release_year", "singer.age"]}, {"query": "What are the names and release years for all the songs of the youngest singer?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.song_name", "singer.song_release_year", "singer.age"]}, {"query": "What are all distinct countries where singers above age 20 are from?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.country", "singer.age"]}, {"query": "What are  the different countries with singers above age 20?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.country", "singer.age"]}, {"query": "Show all countries and the number of singers in each country.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.country"]}, {"query": "How many singers are from each country?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.country"]}, {"query": "List all song names by singers above the average age.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.song_name", "singer.age"]}, {"query": "What are all the song names by singers who are older than average?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.song_name", "singer.age"]}, {"query": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.LOCATION", "stadium.name", "stadium.capacity"]}, {"query": "What are the locations and names of all stations with capacity between 5000 and 10000?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.LOCATION", "stadium.name", "stadium.capacity"]}, {"query": "What is the maximum capacity and the average of all stadiums ?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.capacity", "stadium.average"]}, {"query": "What is the average and maximum capacities for all stadiums ?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.capacity"]}, {"query": "What is the name and capacity for the stadium with highest average attendance?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.name", "stadium.capacity", "stadium.average"]}, {"query": "What is the name and capacity for the stadium with the highest average attendance?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["stadium"], "label_col": ["stadium.name", "stadium.capacity", "stadium.average"]}, {"query": "How many concerts are there in year 2014 or 2015?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert"], "label_col": []}, {"query": "How many concerts occurred in 2014 or 2015?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert"], "label_col": []}, {"query": "Show the stadium name and the number of concerts in each stadium.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "concert.stadium_id", "stadium.stadium_id"]}, {"query": "For each stadium, how many concerts play there?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "concert.stadium_id", "stadium.stadium_id"]}, {"query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "stadium.capacity", "concert.stadium_id", "stadium.stadium_id", "concert.year"]}, {"query": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "stadium.capacity", "concert.stadium_id", "stadium.stadium_id", "concert.year"]}, {"query": "Which year has most number of concerts?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert"], "label_col": []}, {"query": "What is the year that had the most concerts?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert"], "label_col": []}, {"query": "Show countries where a singer above age 40 and a singer below 30 are from.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.country", "singer.age"]}, {"query": "Show the name and theme for all concerts and the number of singers in each concert.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "concert"], "label_col": ["concert.concert_name", "concert.theme", "singer_in_concert.concert_id", "concert.concert_id"]}, {"query": "What are the names , themes , and number of singers for every concert ?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "concert"], "label_col": ["concert.concert_name", "concert.theme", "singer_in_concert.concert_id", "concert.concert_id"]}, {"query": "List singer names and number of concerts for each singer.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "singer"], "label_col": ["singer.name", "singer_in_concert.singer_id", "singer.singer_id"]}, {"query": "What are the names of the singers and number of concerts for each person?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "singer"], "label_col": ["singer.name", "singer_in_concert.singer_id", "singer.singer_id"]}, {"query": "List all singer names in concerts in year 2014.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "singer", "concert"], "label_col": ["singer.name", "singer_in_concert.singer_id", "singer.singer_id", "singer_in_concert.concert_id", "concert.concert_id", "concert.year"]}, {"query": "What are the names of the singers who performed in a concert in 2014?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer_in_concert", "singer", "concert"], "label_col": ["singer.name", "singer_in_concert.singer_id", "singer.singer_id", "singer_in_concert.concert_id", "concert.concert_id", "concert.year"]}, {"query": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.name", "singer.country", "singer.song_name"]}, {"query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["singer"], "label_col": ["singer.name", "singer.country", "singer.song_name"]}, {"query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "stadium.location", "concert.stadium_id", "stadium.stadium_id", "concert.Year"]}, {"query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "table_infos": "table:\n{'stadium': ['stadium id', 'location', 'name', 'capacity', 'highest', 'lowest', 'average'], 'singer': ['singer id', 'name', 'country', 'song name', 'song release year', 'age', 'is male'], 'concert': ['concert id', 'concert name', 'theme', 'stadium id', 'year'], 'singer in concert': ['concert id', 'singer id']}\nforeign_keys:['concert.stadium id = stadium.stadium id', 'singer in concert.singer id = singer.singer id', 'singer in concert.concert id = concert.concert id']\n", "label_table": ["concert", "stadium"], "label_col": ["stadium.name", "stadium.location", "concert.stadium_id", "stadium.stadium_id", "concert.Year"]}, {"query": "Find the number of pets whose weight is heavier than 10.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight"]}, {"query": "How many pets have a greater weight than 10?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight"]}, {"query": "Find the weight of the youngest dog.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.pet_age"]}, {"query": "How much does the youngest dog weigh?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.pet_age"]}, {"query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.petType"]}, {"query": "List the maximum weight and type for each type of pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.petType"]}, {"query": "Find number of pets owned by students who are older than 20.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.stuid", "has_pet.stuid", "student.age"]}, {"query": "How many pets are owned by students that have an age greater than 20?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.stuid", "has_pet.stuid", "student.age"]}, {"query": "Find the number of dog pets that are raised by female students (with sex F).", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.stuid", "has_pet.stuid", "has_pet.petid", "pets.petid", "student.sex", "pets.pettype"]}, {"query": "How many dog pets are raised by female students?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.stuid", "has_pet.stuid", "has_pet.petid", "pets.petid", "student.sex", "pets.pettype"]}, {"query": "Find the number of distinct type of pets.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pettype"]}, {"query": "How many different types of pet are there?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pettype"]}, {"query": "Find the first name of students who have cat or dog pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.Fname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "What are the first names of every student who has a cat or dog as a pet?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.Fname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "Find the first name of students who have both cat and dog pets .", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.fname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "What are the students' first names who have both cats and dogs as pets?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.Fname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.fname", "student.age", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "What is the first name of every student who has a dog but does not have a cat?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.fname", "student.age", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pettype"]}, {"query": "Find the type and weight of the youngest pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pettype", "pets.weight", "pets.pet_age"]}, {"query": "What type of pet is the youngest animal, and how much does it weigh?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pettype", "pets.weight", "pets.pet_age"]}, {"query": "Find the id and weight of all pets whose age is older than 1.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.petid", "pets.weight", "pets.pet_age"]}, {"query": "What is the id and weight of every pet who is older than 1?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.petid", "pets.weight", "pets.pet_age"]}, {"query": "Find the average and maximum age for each type of pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pet_age", "pets.pettype"]}, {"query": "What is the average and maximum age for each pet type?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.pet_age", "pets.pettype"]}, {"query": "Find the average weight for each pet type.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.pettype"]}, {"query": "What is the average weight for each type of pet?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["pets"], "label_col": ["pets.weight", "pets.pettype"]}, {"query": "Find the first name and age of students who have a pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.fname", "student.age", "student.stuid", "has_pet.stuid"]}, {"query": "What are the different first names and ages of the students who do have pets?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.fname", "student.age", "student.stuid", "has_pet.stuid"]}, {"query": "Find the id of the pet owned by student whose last name is ‘Smith’.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["has_pet.petid", "student.stuid", "has_pet.stuid", "student.Lname"]}, {"query": "What is the id of the pet owned by the student whose last name is 'Smith'?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["has_pet.petid", "student.stuid", "has_pet.stuid", "student.Lname"]}, {"query": "Find the number of pets for each student who has any pet and student id.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.stuid", "has_pet.stuid"]}, {"query": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.stuid", "has_pet.stuid"]}, {"query": "Find the first name and gender of student who have more than one pet.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.fname", "student.sex", "student.stuid", "has_pet.stuid"]}, {"query": "What is the first name and gender of the all the students who have more than one pet?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet"], "label_col": ["student.fname", "student.sex", "student.stuid", "has_pet.stuid"]}, {"query": "Find the last name of the student who has a cat that is age 3.", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.lname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pet_age", "pets.pettype"]}, {"query": "What is the last name of the student who has a cat that is 3 years old?", "table_infos": "table:\n{'student': ['student id', 'last name', 'first name', 'age', 'sex', 'major', 'advisor', 'city code'], 'has pet': ['student id', 'pet id'], 'pets': ['pet id', 'pet type', 'pet age', 'weight']}\nforeign_keys:['has pet.student id = student.student id', 'has pet.pet id = pets.pet id']\n", "label_table": ["student", "has_pet", "pets"], "label_col": ["student.lname", "student.stuid", "has_pet.stuid", "pets.petid", "has_pet.petid", "pets.pet_age", "pets.pettype"]}, {"query": "How many continents are there?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS"], "label_col": []}, {"query": "What is the number of continents?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS"], "label_col": []}, {"query": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS", "COUNTRIES"], "label_col": ["CONTINENTS.ContId", "CONTINENTS.Continent", "COUNTRIES.Continent"]}, {"query": "For each continent, list its id, name, and how many countries it has?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS", "COUNTRIES"], "label_col": ["CONTINENTS.ContId", "CONTINENTS.Continent", "COUNTRIES.Continent"]}, {"query": "How many countries are listed?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES"], "label_col": []}, {"query": "How many countries exist?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES"], "label_col": []}, {"query": "How many models does each car maker produce? List maker full name, id and the number.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.FullName", "CAR_MAKERS.Id", "MODEL_LIST.Maker"]}, {"query": "What is the full name of each car maker, along with its id and how many models it produces?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.FullName", "CAR_MAKERS.Id", "MODEL_LIST.Maker"]}, {"query": "Which model of the car has the minimum horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.horsepower"]}, {"query": "What is the model of the car with the smallest amount of horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.horsepower"]}, {"query": "Find the name of the makers that produced some cars in the year of 1970?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST", "CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_MAKERS.Maker", "CAR_MAKERS.Id", "MODEL_LIST.Maker", "MODEL_LIST.model", "CAR_NAMES.model", "CAR_NAMES.MakeId", "CARS_DATA.id", "CARS_DATA.year"]}, {"query": "What is the name of the different car makers who produced a car in 1970?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST", "CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_MAKERS.Maker", "CAR_MAKERS.Id", "MODEL_LIST.Maker", "MODEL_LIST.model", "CAR_NAMES.model", "CAR_NAMES.MakeId", "CARS_DATA.id", "CARS_DATA.year"]}, {"query": "Find the make and production time of the cars that were produced in the earliest year?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CAR_NAMES.Make", "CARS_DATA.Year", "CARS_DATA.Id", "CAR_NAMES.MakeId"]}, {"query": "What is the maker of the carr produced in the earliest year and what year was it?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CAR_NAMES.Make", "CARS_DATA.Year", "CARS_DATA.Id", "CAR_NAMES.MakeId"]}, {"query": "Which distinct car models are the produced after 1980?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_NAMES", "CARS_DATA"], "label_col": ["MODEL_LIST.model", "CAR_NAMES.model", "CAR_NAMES.MakeId", "CARS_DATA.id", "CARS_DATA.year"]}, {"query": "What are the different models for the cards produced after 1980?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_NAMES", "CARS_DATA"], "label_col": ["MODEL_LIST.model", "CAR_NAMES.model", "CAR_NAMES.MakeId", "CARS_DATA.id", "CARS_DATA.year"]}, {"query": "How many car makers are there in each continents? List the continent name and the count.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS", "COUNTRIES", "car_makers"], "label_col": ["CONTINENTS.Continent", "CONTINENTS.ContId", "COUNTRIES.continent", "COUNTRIES.CountryId", "car_makers.Country"]}, {"query": "What is the name of each continent and how many car makers are there in each one?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CONTINENTS", "COUNTRIES", "car_makers"], "label_col": ["CONTINENTS.Continent", "CONTINENTS.ContId", "COUNTRIES.continent", "COUNTRIES.CountryId", "car_makers.Country"]}, {"query": "Which of the countries has the most car makers? List the country name.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "COUNTRIES"], "label_col": ["COUNTRIES.CountryName", "CAR_MAKERS.Country", "COUNTRIES.CountryId"]}, {"query": "What is the name of the country with the most car makers?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "COUNTRIES"], "label_col": ["COUNTRIES.CountryName", "CAR_MAKERS.Country", "COUNTRIES.CountryId"]}, {"query": "How many car models are produced by each maker ? Only list the count and the maker full name .", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["model_list", "car_makers"], "label_col": ["car_makers.fullname", "model_list.maker", "car_makers.id"]}, {"query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_MAKERS"], "label_col": ["CAR_MAKERS.FullName", "CAR_MAKERS.id", "MODEL_LIST.Maker", "CAR_MAKERS.Id"]}, {"query": "What is the accelerate of the car make amc hornet sportabout (sw)?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Id", "CAR_NAMES.MakeId", "CAR_NAMES.Make"]}, {"query": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Id", "CAR_NAMES.MakeId", "CAR_NAMES.Make"]}, {"query": "How many car makers are there in france?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "COUNTRIES"], "label_col": ["CAR_MAKERS.Country", "COUNTRIES.CountryId", "COUNTRIES.CountryName"]}, {"query": "What is the number of makers of care in France?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "COUNTRIES"], "label_col": ["CAR_MAKERS.Country", "COUNTRIES.CountryId", "COUNTRIES.CountryName"]}, {"query": "How many car models are produced in the usa?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_MAKERS", "COUNTRIES"], "label_col": ["MODEL_LIST.Maker", "CAR_MAKERS.Id", "CAR_MAKERS.Country", "COUNTRIES.CountryId", "COUNTRIES.CountryName"]}, {"query": "What is the count of the car models produced in the United States?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_MAKERS", "COUNTRIES"], "label_col": ["MODEL_LIST.Maker", "CAR_MAKERS.Id", "CAR_MAKERS.Country", "COUNTRIES.CountryId", "COUNTRIES.CountryName"]}, {"query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.mpg", "CARS_DATA.Cylinders"]}, {"query": "What is the average miles per gallon of all the cards with 4 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.mpg", "CARS_DATA.Cylinders"]}, {"query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.weight", "cars_data.cylinders"]}, {"query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.weight", "cars_data.cylinders"]}, {"query": "What are all the makers and models?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST"], "label_col": ["MODEL_LIST.Maker", "MODEL_LIST.Model"]}, {"query": "What are the makers and models?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST"], "label_col": ["MODEL_LIST.Maker", "MODEL_LIST.Model"]}, {"query": "What are the countries having at least one car maker? List name and id.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES", "CAR_MAKERS"], "label_col": ["COUNTRIES.CountryName", "COUNTRIES.CountryId", "CAR_MAKERS.Country"]}, {"query": "What are the names and ids of all countries with at least one car maker?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES", "CAR_MAKERS"], "label_col": ["COUNTRIES.CountryName", "COUNTRIES.CountryId", "CAR_MAKERS.Country"]}, {"query": "What is the number of the cars with horsepower more than 150?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.horsepower"]}, {"query": "What is the number of cars with a horsepower greater than 150?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.horsepower"]}, {"query": "What is the average weight of cars each year?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Weight"]}, {"query": "What is the average weight and year for each year?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Weight"]}, {"query": "Which countries in europe have at least 3 car manufacturers?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES", "CONTINENTS", "CAR_MAKERS"], "label_col": ["COUNTRIES.CountryName", "COUNTRIES.Continent", "CONTINENTS.ContId", "COUNTRIES.CountryId", "CAR_MAKERS.Country", "CONTINENTS.Continent"]}, {"query": "What are the names of all European countries with at least 3 manufacturers?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["COUNTRIES", "CONTINENTS", "CAR_MAKERS"], "label_col": ["COUNTRIES.CountryName", "COUNTRIES.Continent", "CONTINENTS.ContId", "COUNTRIES.CountryId", "CAR_MAKERS.Country", "CONTINENTS.Continent"]}, {"query": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CARS_DATA.horsepower", "CAR_NAMES.Make", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.cylinders"]}, {"query": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CARS_DATA.horsepower", "CAR_NAMES.Make", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.cylinders"]}, {"query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.mpg"]}, {"query": "What is the car model with the highest mpg ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["car_names", "cars_data"], "label_col": ["car_names.model", "car_names.makeid", "cars_data.id", "cars_data.mpg"]}, {"query": "What is the average horsepower of the cars before 1980?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.horsepower"]}, {"query": "What is the average horsepower for all cars produced before 1980 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.horsepower"]}, {"query": "What is the average edispl of the cars of model volvo?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CARS_DATA.edispl", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CAR_NAMES.Model"]}, {"query": "What is the average edispl for all volvos?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CARS_DATA.edispl", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CAR_NAMES.Model"]}, {"query": "What is the maximum accelerate for different number of cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Cylinders"]}, {"query": "What is the maximum accelerate for all the different cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Cylinders"]}, {"query": "Which model has the most version(make) of cars?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES"], "label_col": ["CAR_NAMES.Model"]}, {"query": "What model has the most different versions?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES"], "label_col": ["CAR_NAMES.Model"]}, {"query": "How many cars have more than 4 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Cylinders"]}, {"query": "What is the number of cars with more than 4 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Cylinders"]}, {"query": "how many cars were produced in 1980?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": []}, {"query": "In 1980, how many cars were made?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": []}, {"query": "How many car models were produced by the maker with full name American Motor Company?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.Id", "MODEL_LIST.Maker", "CAR_MAKERS.FullName"]}, {"query": "What is the number of car models created by the car maker American Motor Company?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.Id", "MODEL_LIST.Maker", "CAR_MAKERS.FullName"]}, {"query": "Which makers designed more than 3 car models? List full name and the id.", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.FullName", "CAR_MAKERS.Id", "MODEL_LIST.Maker"]}, {"query": "What are the names and ids of all makers with more than 3 models?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST"], "label_col": ["CAR_MAKERS.FullName", "CAR_MAKERS.Id", "MODEL_LIST.Maker"]}, {"query": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "MODEL_LIST", "CAR_MAKERS", "CARS_DATA"], "label_col": ["MODEL_LIST.Model", "CAR_NAMES.Model", "MODEL_LIST.Maker", "CAR_MAKERS.Id", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CAR_MAKERS.FullName", "CARS_DATA.weight"]}, {"query": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "MODEL_LIST", "CAR_MAKERS", "CARS_DATA"], "label_col": ["MODEL_LIST.Model", "CAR_NAMES.Model", "MODEL_LIST.Maker", "CAR_MAKERS.Id", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CAR_MAKERS.FullName", "CARS_DATA.weight"]}, {"query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.weight"]}, {"query": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.weight"]}, {"query": "What is the horsepower of the car with the largest accelerate?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.CARS_DATA.horsepower", "CARS_DATA.CARS_DATA.accelerate"]}, {"query": "What is the horsepower of the car with the greatest accelerate?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.CARS_DATA.horsepower", "CARS_DATA.CARS_DATA.accelerate"]}, {"query": "For model volvo, how many cylinders does the car with the least accelerate have?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CARS_DATA.cylinders", "CARS_DATA.Id", "CAR_NAMES.MakeId", "CAR_NAMES.Model", "CARS_DATA.accelerate"]}, {"query": "For a volvo model, how many cylinders does the version with least accelerate have?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA", "CAR_NAMES"], "label_col": ["CARS_DATA.cylinders", "CARS_DATA.Id", "CAR_NAMES.MakeId", "CAR_NAMES.Model", "CARS_DATA.accelerate"]}, {"query": "How many cars have a larger accelerate than the car with the largest horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Horsepower"]}, {"query": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Accelerate", "CARS_DATA.Horsepower"]}, {"query": "How many countries has more than 2 car makers ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["countries", "car_makers"], "label_col": ["countries.countryid", "car_makers.country"]}, {"query": "What is the number of countries with more than 2 car makers ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["countries", "car_makers"], "label_col": ["countries.countryid", "car_makers.country"]}, {"query": "How many cars has over 6 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Cylinders"]}, {"query": "What is the number of carsw ith over 6 cylinders?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CARS_DATA"], "label_col": ["CARS_DATA.Cylinders"]}, {"query": "For the cars with 4 cylinders, which model has the largest horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.Cylinders", "CARS_DATA.horsepower"]}, {"query": "For all of the 4 cylinder cars, which model has the most horsepower?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_NAMES", "CARS_DATA"], "label_col": ["CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "CARS_DATA.Cylinders", "CARS_DATA.horsepower"]}, {"query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.mpg", "cars_data.cylinders"]}, {"query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["cars_data"], "label_col": ["cars_data.mpg", "cars_data.cylinders"]}, {"query": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_NAMES", "CARS_DATA", "CAR_MAKERS"], "label_col": ["MODEL_LIST.model", "MODEL_LIST.Model", "CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "MODEL_LIST.Maker", "CAR_MAKERS.Id", "CARS_DATA.weight", "CAR_MAKERS.FullName"]}, {"query": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["MODEL_LIST", "CAR_NAMES", "CARS_DATA", "CAR_MAKERS"], "label_col": ["MODEL_LIST.model", "MODEL_LIST.Model", "CAR_NAMES.Model", "CAR_NAMES.MakeId", "CARS_DATA.Id", "MODEL_LIST.Maker", "CAR_MAKERS.Id", "CARS_DATA.weight", "CAR_MAKERS.FullName"]}, {"query": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["car_makers", "model_list", "car_names"], "label_col": ["car_makers.id", "car_makers.maker", "model_list.maker", "model_list.model", "car_names.model"]}, {"query": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["CAR_MAKERS", "MODEL_LIST", "CAR_NAMES"], "label_col": ["CAR_MAKERS.Id", "CAR_MAKERS.Maker", "MODEL_LIST.Maker", "MODEL_LIST.model", "CAR_NAMES.model"]}, {"query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["Countries", "CAR_MAKERS", "MODEL_LIST"], "label_col": ["Countries.countryId", "Countries.CountryName", "Countries.CountryId", "CAR_MAKERS.Country", "CAR_MAKERS.Id", "MODEL_LIST.Maker", "MODEL_LIST.Model"]}, {"query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "table_infos": "table:\n{'continents': ['cont id', 'continent'], 'countries': ['country id', 'country name', 'continent'], 'car makers': ['id', 'maker', 'full name', 'country'], 'model list': ['model id', 'maker', 'model'], 'car names': ['make id', 'model', 'make'], 'cars data': ['id', 'mpg', 'cylinders', 'edispl', 'horsepower', 'weight', 'accelerate', 'year']}\nforeign_keys:['countries.continent = continents.cont id', 'car makers.country = countries.country id', 'model list.maker = car makers.id', 'car names.model = model list.model', 'cars data.id = car names.make id']\n", "label_table": ["countries", "car_makers", "model_list"], "label_col": ["countries.countryid", "countries.countryname", "car_makers.country", "car_makers.id", "model_list.maker", "model_list.model"]}, {"query": "Which country does Airline \"JetBlue Airways\" belong to?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Country", "AIRLINES.Airline", "AIRLINES.JetBlue Airways"]}, {"query": "What country is Jetblue Airways affiliated with?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Country", "AIRLINES.Airline", "AIRLINES.JetBlue Airways"]}, {"query": "What is the abbreviation of Airline \"JetBlue Airways\"?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Abbreviation", "AIRLINES.Airline", "AIRLINES.JetBlue Airways"]}, {"query": "Which abbreviation corresponds to Jetblue Airways?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Abbreviation", "AIRLINES.Airline", "AIRLINES.JetBlue Airways"]}, {"query": "List all airline names and their abbreviations in \"USA\".", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Airline", "AIRLINES.Abbreviation", "AIRLINES.Country", "AIRLINES.USA"]}, {"query": "What are the airline names and abbreviations for airlines in the USA?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Airline", "AIRLINES.Abbreviation", "AIRLINES.Country", "AIRLINES.USA"]}, {"query": "List the airport code and name in the city of Anthony.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportCode", "AIRPORTS.AirportName", "AIRPORTS.city", "AIRPORTS.Anthony"]}, {"query": "Give the airport code and airport name corresonding to the city Anthony.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportCode", "AIRPORTS.AirportName", "AIRPORTS.city", "AIRPORTS.Anthony"]}, {"query": "How many airlines do we have?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": []}, {"query": "What is the total number of airlines?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": []}, {"query": "How many airports do we have?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": []}, {"query": "Return the number of  airports.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": []}, {"query": "How many flights do we have?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": []}, {"query": "Return the number of flights.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": []}, {"query": "Which airline has abbreviation 'UAL'?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Airline", "AIRLINES.Abbreviation", "AIRLINES.UAL"]}, {"query": "Give the airline with abbreviation 'UAL'.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Airline", "AIRLINES.Abbreviation", "AIRLINES.UAL"]}, {"query": "How many airlines are from USA?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Country", "AIRLINES.USA"]}, {"query": "Return the number of airlines in the USA.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES"], "label_col": ["AIRLINES.Country", "AIRLINES.USA"]}, {"query": "Which city and country is the Alton airport at?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.Country", "AIRPORTS.AirportName", "AIRPORTS.Alton"]}, {"query": "Give the city and country for the Alton airport.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.Country", "AIRPORTS.AirportName", "AIRPORTS.Alton"]}, {"query": "What is the airport name for airport 'AKO'?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportName", "AIRPORTS.AirportCode", "AIRPORTS.AKO"]}, {"query": "Return the name of the airport with code 'AKO'.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportName", "AIRPORTS.AirportCode", "AIRPORTS.AKO"]}, {"query": "What are airport names at City 'Aberdeen'?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportName", "AIRPORTS.City", "AIRPORTS.Aberdeen"]}, {"query": "What are the names of airports in Aberdeen?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS"], "label_col": ["AIRPORTS.AirportName", "AIRPORTS.City", "AIRPORTS.Aberdeen"]}, {"query": "How many flights depart from 'APG'?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.SourceAirport", "FLIGHTS.APG"]}, {"query": "Count the number of flights departing from 'APG'.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.SourceAirport", "FLIGHTS.APG"]}, {"query": "How many flights have destination ATO?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.DestAirport", "FLIGHTS.ATO"]}, {"query": "Count the number of flights into ATO.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.DestAirport", "FLIGHTS.ATO"]}, {"query": "Which city has most number of arriving flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.AirportCode", "FLIGHTS.DestAirport"]}, {"query": "Which city has the most frequent destination airport?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.AirportCode", "FLIGHTS.DestAirport"]}, {"query": "Which city has most number of departing flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.AirportCode", "FLIGHTS.SourceAirport"]}, {"query": "Which city is the most frequent source airport?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.City", "AIRPORTS.AirportCode", "FLIGHTS.SourceAirport"]}, {"query": "What is the code of airport that has the highest number of flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.AirportCode", "FLIGHTS.DestAirport", "FLIGHTS.SourceAirport"]}, {"query": "What is the airport code of the airport with the most flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.AirportCode", "FLIGHTS.DestAirport", "FLIGHTS.SourceAirport"]}, {"query": "What is the code of airport that has fewest number of flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.AirportCode", "FLIGHTS.DestAirport", "FLIGHTS.SourceAirport"]}, {"query": "Give the code of the airport with the least flights.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRPORTS", "FLIGHTS"], "label_col": ["AIRPORTS.AirportCode", "FLIGHTS.DestAirport", "FLIGHTS.SourceAirport"]}, {"query": "Which airline has most number of flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "What airline serves the most flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "Find the abbreviation and country of the airline that has fewest number of flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Abbreviation", "AIRLINES.Country", "AIRLINES.uid", "FLIGHTS.Airline", "AIRLINES.Airline"]}, {"query": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Abbreviation", "AIRLINES.Country", "AIRLINES.uid", "FLIGHTS.Airline", "AIRLINES.Airline"]}, {"query": "Find all airlines that have at least 10 flights.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "Which airlines have at least 10 flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "Find all airlines that have fewer than 200 flights.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "Which airlines have less than 200 flights?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["AIRLINES", "FLIGHTS"], "label_col": ["AIRLINES.Airline", "AIRLINES.uid", "FLIGHTS.Airline"]}, {"query": "What are flight numbers of flights departing from Airport \"APG\"?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.FlightNo", "FLIGHTS.SourceAirport", "FLIGHTS.APG"]}, {"query": "Give the flight numbers of flights leaving from APG.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.FlightNo", "FLIGHTS.SourceAirport", "FLIGHTS.APG"]}, {"query": "What are flight numbers of flights arriving at Airport \"APG\"?", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.FlightNo", "FLIGHTS.DestAirport", "FLIGHTS.APG"]}, {"query": "Give the flight numbers of flights landing at APG.", "table_infos": "table:\n{'airlines': ['airline id', 'airline name', 'abbreviation', 'country'], 'airports': ['city', 'airport code', 'airport name', 'country', 'country abbrev'], 'flights': ['airline', 'flight number', 'source airport', 'destination airport']}\nforeign_keys:['flights.destination airport = airports.airport code', 'flights.source airport = airports.airport code']\n", "label_table": ["FLIGHTS"], "label_col": ["FLIGHTS.FlightNo", "FLIGHTS.DestAirport", "FLIGHTS.APG"]}, {"query": "How many employees are there?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": []}, {"query": "Count the number of employees", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": []}, {"query": "Sort employee names by their age in ascending order.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.name", "employee.age"]}, {"query": "List the names of employees and sort in ascending order of age.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.name", "employee.age"]}, {"query": "What is the number of employees from each city?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.city"]}, {"query": "Count the number of employees for each city.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.city"]}, {"query": "Which cities do more than one employee under age 30 come from?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.city", "employee.age"]}, {"query": "Find the cities that have more than one employee under age 30.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee"], "label_col": ["employee.city", "employee.age"]}, {"query": "Find the number of shops in each location.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": []}, {"query": "How many shops are there in each location?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": []}, {"query": "Find the manager name and district of the shop whose number of products is the largest.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.manager_name", "shop.district", "shop.number_products"]}, {"query": "What are the manager name and district of the shop that sells the largest number of products?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.manager_name", "shop.district", "shop.number_products"]}, {"query": "find the minimum and maximum number of products of all stores.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.Number_products"]}, {"query": "What are the minimum and maximum number of products across all the shops?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.Number_products"]}, {"query": "Return the name, location and district of all shops in descending order of number of products.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.name", "shop.LOCATION", "shop.district", "shop.number_products"]}, {"query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.name", "shop.LOCATION", "shop.district", "shop.number_products"]}, {"query": "Find the names of stores whose number products is more than the average number of products.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.name", "shop.number_products"]}, {"query": "Which shops' number products is above the average? Give me the shop names.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.name", "shop.number_products"]}, {"query": "find the name of employee who was awarded the most times in the evaluation.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee", "evaluation"], "label_col": ["employee.name", "employee.Employee_ID", "evaluation.Employee_ID"]}, {"query": "Which employee received the most awards in evaluations? Give me the employee name.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee", "evaluation"], "label_col": ["employee.name", "employee.Employee_ID", "evaluation.Employee_ID"]}, {"query": "Find the name of the employee who got the highest one time bonus.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee", "evaluation"], "label_col": ["employee.name", "employee.Employee_ID", "evaluation.Employee_ID", "evaluation.bonus"]}, {"query": "Which employee received the biggest bonus? Give me the employee name.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["employee", "evaluation"], "label_col": ["employee.name", "employee.Employee_ID", "evaluation.Employee_ID", "evaluation.bonus"]}, {"query": "What is the name of the shop that is hiring the largest number of employees?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring", "shop"], "label_col": ["shop.name", "hiring.shop_id", "shop.shop_id"]}, {"query": "Which shop has the most employees? Give me the shop name.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring", "shop"], "label_col": ["shop.name", "hiring.shop_id", "shop.shop_id"]}, {"query": "Find the number of employees hired in each shop; show the shop name as well.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring", "shop"], "label_col": ["shop.name", "hiring.shop_id", "shop.shop_id"]}, {"query": "For each shop, return the number of employees working there and the name of the shop.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring", "shop"], "label_col": ["shop.name", "hiring.shop_id", "shop.shop_id"]}, {"query": "What is total bonus given in all evaluations?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["evaluation"], "label_col": ["evaluation.bonus"]}, {"query": "Find the total amount of bonus given in all the evaluations.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["evaluation"], "label_col": ["evaluation.bonus"]}, {"query": "Give me all the information about hiring.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring"], "label_col": ["hiring.*"]}, {"query": "What is all the information about hiring?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["hiring"], "label_col": ["hiring.*"]}, {"query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.district", "shop.Number_products"]}, {"query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": ["shop.district", "shop.Number_products"]}, {"query": "How many different store locations are there?", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": []}, {"query": "Count the number of distinct store locations.", "table_infos": "table:\n{'employee': ['employee id', 'name', 'age', 'city'], 'shop': ['shop id', 'name', 'location', 'district', 'number products', 'manager name'], 'hiring': ['shop id', 'employee id', 'start from', 'is full time'], 'evaluation': ['employee id', 'year awarded', 'bonus']}\nforeign_keys:['hiring.employee id = employee.employee id', 'hiring.shop id = shop.shop id', 'evaluation.employee id = employee.employee id']\n", "label_table": ["shop"], "label_col": []}, {"query": "How many documents do we have?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": []}, {"query": "Count the number of documents.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": []}, {"query": "List document IDs, document names, and document descriptions for all documents.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_id", "Documents.document_name", "Documents.document_description"]}, {"query": "What are the ids, names, and descriptions for all documents?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_id", "Documents.document_name", "Documents.document_description"]}, {"query": "What is the document name and template id for document with description with the letter 'w' in it?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_name", "Documents.template_id", "Documents.Document_Description", "Documents.%w%"]}, {"query": "Return the names and template ids for documents that contain the letter w in their description.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_name", "Documents.template_id", "Documents.Document_Description", "Documents.%w%"]}, {"query": "What is the document id, template id and description for document named \"Robbin CV\"?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_id", "Documents.template_id", "Documents.Document_Description", "Documents.document_name", "Documents.Robbin CV"]}, {"query": "Return the document id, template id, and description for the document with the name Robbin CV.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.document_id", "Documents.template_id", "Documents.Document_Description", "Documents.document_name", "Documents.Robbin CV"]}, {"query": "How many different templates do all document use?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "Count the number of different templates used for documents.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "How many documents are using the template with type code 'PPT'?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents", "Templates"], "label_col": ["Documents.Template_ID", "Templates.Template_ID", "Templates.Template_Type_Code"]}, {"query": "Count the number of documents that use the PPT template type.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents", "Templates"], "label_col": ["Documents.Template_ID", "Templates.Template_ID", "Templates.Template_Type_Code"]}, {"query": "Show all template ids and number of documents using each template.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "What are all different template ids used for documents, and how many times were each of them used?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "What is the id and type code for the template used by the most documents?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents", "Templates"], "label_col": ["Documents.template_id", "Templates.Template_Type_Code", "Templates.template_id"]}, {"query": "Return the id and type code of the template that is used for the greatest number of documents.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents", "Templates"], "label_col": ["Documents.template_id", "Templates.Template_Type_Code", "Templates.template_id"]}, {"query": "Show ids for all templates that are used by more than one document.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "What are the template ids of any templates used in more than a single document?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Documents"], "label_col": ["Documents.template_id"]}, {"query": "How many templates do we have?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": []}, {"query": "Count the number of templates.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": []}, {"query": "Show template ids, version numbers, and template type codes for all templates.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_id", "Templates.version_number", "Templates.template_type_code"]}, {"query": "What are the ids, version numbers, and type codes for each template?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_id", "Templates.version_number", "Templates.template_type_code"]}, {"query": "Show all distinct template type codes for all templates.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "What are the different template type codes?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "What are the ids of templates with template type code PP or PPT?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_id", "Templates.template_type_code", "Templates.PP", "Templates.PPT"]}, {"query": "Return the ids of templates that have the code PP or PPT.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_id", "Templates.template_type_code", "Templates.PP", "Templates.PPT"]}, {"query": "How many templates have template type code CV?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code", "Templates.CV"]}, {"query": "Count the number of templates of the type CV.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code", "Templates.CV"]}, {"query": "What is the version number and template type code for the template with version number later than 5?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.version_number", "Templates.template_type_code"]}, {"query": "Return the version numbers and template type codes of templates with a version number greater than 5.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.version_number", "Templates.template_type_code"]}, {"query": "Show all template type codes and number of templates for each.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "What are the different template type codes, and how many templates correspond to each?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "Which template type code has most number of templates?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "Return the type code of the template type that the most templates belong to.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "Show all template type codes with less than three templates.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "What are the codes of template types that have fewer than 3 templates?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.template_type_code"]}, {"query": "What the smallest version number and its template type code?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.Version_Number", "Templates.template_type_code"]}, {"query": "Return the lowest version number, along with its corresponding template type code.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates"], "label_col": ["Templates.Version_Number", "Templates.template_type_code"]}, {"query": "Show all template type codes and the number of documents using each type.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates", "Documents"], "label_col": ["Templates.template_type_code", "Templates.template_id", "Documents.template_id"]}, {"query": "What are the different template type codes, and how many documents use each type?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates", "Documents"], "label_col": ["Templates.template_type_code", "Templates.template_id", "Documents.template_id"]}, {"query": "Which template type code is used by most number of documents?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates", "Documents"], "label_col": ["Templates.template_type_code", "Templates.template_id", "Documents.template_id"]}, {"query": "Return the code of the template type that is most commonly used in documents.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Templates", "Documents"], "label_col": ["Templates.template_type_code", "Templates.template_id", "Documents.template_id"]}, {"query": "Show all template type codes and descriptions.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_code", "Ref_template_types.template_type_description"]}, {"query": "What are the type codes and descriptions for all template types?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_code", "Ref_template_types.template_type_description"]}, {"query": "What is the template type descriptions for template type code \"AD\".", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_description", "Ref_template_types.template_type_code", "Ref_template_types.AD"]}, {"query": "Return the template type description of the template type with the code AD.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_description", "Ref_template_types.template_type_code", "Ref_template_types.AD"]}, {"query": "What is the template type code for template type description \"Book\".", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_code", "Ref_template_types.template_type_description", "Ref_template_types.Book"]}, {"query": "Return the type code of the template type with the description \"Book\".", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types"], "label_col": ["Ref_template_types.template_type_code", "Ref_template_types.template_type_description", "Ref_template_types.Book"]}, {"query": "What are the distinct template type descriptions for the templates ever used by any document?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types", "Templates", "Documents"], "label_col": ["Ref_template_types.template_type_description", "Ref_template_types.template_type_code", "Templates.template_type_code", "Templates.Template_ID", "Documents.template_ID"]}, {"query": "Return the different descriptions for templates that have been used in a document.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Ref_template_types", "Templates", "Documents"], "label_col": ["Ref_template_types.template_type_description", "Ref_template_types.template_type_code", "Templates.template_type_code", "Templates.Template_ID", "Documents.template_ID"]}, {"query": "How many paragraphs in total?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": []}, {"query": "Count the number of paragraphs.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": []}, {"query": "How many paragraphs for the document with name 'Summer Show'?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_ID", "Documents.document_ID", "Documents.document_name"]}, {"query": "Count the number of paragraphs in the document named 'Summer Show'.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_ID", "Documents.document_ID", "Documents.document_name"]}, {"query": "Show paragraph details for paragraph with text 'Korea ' .", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["paragraphs"], "label_col": ["paragraphs.other_details", "paragraphs.paragraph_text"]}, {"query": "What are the details for the paragraph that includes the text 'Korea ' ?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["paragraphs"], "label_col": ["paragraphs.other_details", "paragraphs.paragraph_text"]}, {"query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.paragraph_id", "Paragraphs.paragraph_text", "Paragraphs.document_id", "Documents.document_id", "Documents.Document_Name"]}, {"query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.paragraph_id", "Paragraphs.paragraph_text", "Paragraphs.document_id", "Documents.document_id", "Documents.Document_Name"]}, {"query": "Show all document ids and the number of paragraphs in each document. Order by document id.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "Show all document ids, names and the number of paragraphs in each document.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_id", "Documents.document_name", "Documents.document_id"]}, {"query": "What are the ids and names of each document, as well as the number of paragraphs in each?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_id", "Documents.document_name", "Documents.document_id"]}, {"query": "List all document ids with at least two paragraphs.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "What are the ids of documents that have 2 or more paragraphs?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "What is the document id and name with greatest number of paragraphs?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_id", "Documents.document_name", "Documents.document_id"]}, {"query": "Return the id and name of the document with the most paragraphs.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs", "Documents"], "label_col": ["Paragraphs.document_id", "Documents.document_name", "Documents.document_id"]}, {"query": "What is the document id with least number of paragraphs?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "Return the id of the document with the fewest paragraphs.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "What is the document id with 1 to 2 paragraphs?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "Give the ids of documents that have between one and two paragraphs.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id"]}, {"query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id", "Paragraphs.paragraph_text"]}, {"query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "table_infos": "table:\n{'reference template types': ['template type code', 'template type description'], 'templates': ['template id', 'version number', 'template type code', 'date effective from', 'date effective to', 'template details'], 'documents': ['document id', 'template id', 'document name', 'document description', 'other details'], 'paragraphs': ['paragraph id', 'document id', 'paragraph text', 'other details']}\nforeign_keys:['templates.template type code = reference template types.template type code', 'documents.template id = templates.template id', 'paragraphs.document id = documents.document id']\n", "label_table": ["Paragraphs"], "label_col": ["Paragraphs.document_id", "Paragraphs.paragraph_text"]}, {"query": "How many teachers are there?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": []}, {"query": "What is the total count of teachers?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": []}, {"query": "List the names of teachers in ascending order of age.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Name", "teacher.Age"]}, {"query": "What are the names of the teachers ordered by ascending age?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Name", "teacher.Age"]}, {"query": "What are the age and hometown of teachers?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Age", "teacher.Hometown"]}, {"query": "What is the age and hometown of every teacher?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Age", "teacher.Hometown"]}, {"query": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.name", "teacher.hometown", "teacher.little lever urban district"]}, {"query": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.name", "teacher.hometown", "teacher.little lever urban district"]}, {"query": "Show the name of teachers aged either 32 or 33?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Name", "teacher.Age"]}, {"query": "What are the names of the teachers who are aged either 32 or 33?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Name", "teacher.Age"]}, {"query": "What is the hometown of the youngest teacher?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown", "teacher.Age"]}, {"query": "Where is the youngest teacher from?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown", "teacher.Age"]}, {"query": "Show different hometown of teachers and the number of teachers from each hometown.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "For each hometown, how many teachers are there?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "List the most common hometown of teachers.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "What is the most commmon hometowns for teachers?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "Show the hometowns shared by at least two teachers.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "What are the towns from which at least two teachers come from?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["teacher"], "label_col": ["teacher.Hometown"]}, {"query": "Show names of teachers and the courses they are arranged to teach.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "course", "teacher"], "label_col": ["teacher.Name", "course.Course", "course_arrange.Course_ID", "course.Course_ID", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "What is the name of each teacher and what course they teach?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "course", "teacher"], "label_col": ["teacher.Name", "course.Course", "course_arrange.Course_ID", "course.Course_ID", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "course", "teacher"], "label_col": ["teacher.Name", "course.Course", "course_arrange.Course_ID", "course.Course_ID", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "course", "teacher"], "label_col": ["teacher.Name", "course.Course", "course_arrange.Course_ID", "course.Course_ID", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "Show names of teachers and the number of courses they teach.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "teacher"], "label_col": ["teacher.Name", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "What are the names of the teachers and how many courses do they teach?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "teacher"], "label_col": ["teacher.Name", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "Show names of teachers that teach at least two courses.", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "teacher"], "label_col": ["teacher.Name", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "What are the names of the teachers who teach at least two courses?", "table_infos": "table:\n{'course': ['course id', 'staring date', 'course'], 'teacher': ['teacher id', 'name', 'age', 'hometown'], 'course arrange': ['course id', 'teacher id', 'grade']}\nforeign_keys:['course arrange.teacher id = teacher.teacher id', 'course arrange.course id = course.course id']\n", "label_table": ["course_arrange", "teacher"], "label_col": ["teacher.Name", "course_arrange.Teacher_ID", "teacher.Teacher_ID"]}, {"query": "How many visitors below age 30 are there?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor"], "label_col": ["visitor.age"]}, {"query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor"], "label_col": ["visitor.name", "visitor.Level_of_membership"]}, {"query": "What is the average age of the visitors whose membership level is not higher than 4?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor"], "label_col": ["visitor.age", "visitor.Level_of_membership"]}, {"query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor"], "label_col": ["visitor.name", "visitor.Level_of_membership", "visitor.age"]}, {"query": "Find the id and name of the museum that has the most staff members?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum"], "label_col": ["museum.museum_id", "museum.name", "museum.num_of_staff"]}, {"query": "Find the average number of staff working for the museums that were open before 2009.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum"], "label_col": ["museum.num_of_staff", "museum.open_year"]}, {"query": "What are the opening year and staff number of the museum named Plaza Museum?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum"], "label_col": ["museum.Num_of_Staff", "museum.Open_Year", "museum.name"]}, {"query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum"], "label_col": ["museum.name", "museum.num_of_staff", "museum.open_year"]}, {"query": "find the id, name and age for visitors who visited some museums more than once.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor", "visit"], "label_col": ["visitor.id", "visitor.name", "visitor.age", "visit.visitor_id"]}, {"query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor", "visit"], "label_col": ["visit.visitor_id", "visitor.name", "visitor.Level_of_membership", "visitor.id", "visit.Total_spent"]}, {"query": "What are the id and name of the museum visited most times?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum", "visit"], "label_col": ["visit.Museum_ID", "museum.name", "museum.Museum_ID"]}, {"query": "Find the name and age of the visitor who bought the most tickets at once.", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor", "visit"], "label_col": ["visitor.name", "visitor.age", "visitor.id", "visit.visitor_id", "visit.num_of_ticket"]}, {"query": "What are the average and maximum number of tickets bought in all visits?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visit"], "label_col": ["visit.num_of_ticket"]}, {"query": "What is the total ticket expense of the visitors whose membership level is 1?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor", "visit"], "label_col": ["visit.Total_spent", "visitor.id", "visit.visitor_id", "visitor.Level_of_membership"]}, {"query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["visitor", "visit", "museum"], "label_col": ["visitor.name", "visitor.id", "visit.visitor_id", "museum.Museum_ID", "visit.Museum_ID", "museum.open_year"]}, {"query": "How many museums were opened after 2013 or before 2008?", "table_infos": "table:\n{'museum': ['museum id', 'name', 'num of staff', 'open year'], 'customer': ['customer id', 'name', 'level of membership', 'age'], 'visit': ['museum id', 'customer id', 'num of ticket', 'total spent']}\nforeign_keys:['visit.customer id = customer.customer id', 'visit.museum id = museum.museum id']\n", "label_table": ["museum"], "label_col": ["museum.open_year"]}, {"query": "Find the total number of players.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": []}, {"query": "How many players are there?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": []}, {"query": "Find the total number of matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "Count the number of matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "List the first name and birth date of all players from the country with code USA.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.birth_date", "players.country_code"]}, {"query": "What are the first names and birth dates of players from the USA?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.birth_date", "players.country_code"]}, {"query": "Find the average age of losers and winners of all matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_age", "matches.winner_age"]}, {"query": "What are the average ages of losers and winners across matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_age", "matches.winner_age"]}, {"query": "Find the average rank of winners in all matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_rank"]}, {"query": "What is the average rank for winners in all matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_rank"]}, {"query": "Find the highest rank of losers in all matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_rank"]}, {"query": "What is the best rank of losers across all matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_rank"]}, {"query": "find the number of distinct country codes of all players.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "How many distinct countries do players come from?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "Find the number of distinct name of losers.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_name"]}, {"query": "How many different loser names are there?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.loser_name"]}, {"query": "Find the name of tourney that has more than 10 matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.tourney_name"]}, {"query": "What are the names of tournaments that have more than 10 matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.tourney_name"]}, {"query": "List the names of all winners who played in both 2013 and 2016.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name"]}, {"query": "What are the names of players who won in both 2013 and 2016?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name"]}, {"query": "List the number of all matches who played in years of 2013 or 2016.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "How many matches were played in 2013 or 2016?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "matches"], "label_col": ["players.country_code", "players.first_name", "players.player_id", "matches.winner_id", "matches.tourney_name"]}, {"query": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "matches"], "label_col": ["players.country_code", "players.first_name", "players.player_id", "matches.winner_id", "matches.tourney_name"]}, {"query": "Find the first name and country code of the oldest player.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.country_code", "players.birth_date"]}, {"query": "What is the first name and country code of the oldest player?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.country_code", "players.birth_date"]}, {"query": "List the first and last name of all players in the order of birth date.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.last_name", "players.birth_date"]}, {"query": "What are the full names of all players, sorted by birth date?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.last_name", "players.birth_date"]}, {"query": "List the first and last name of all players who are left / L hand in the order of birth date.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.last_name", "players.hand", "players.birth_date"]}, {"query": "What are the full names of all left handed players, in order of birth date?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.first_name", "players.last_name", "players.hand", "players.birth_date"]}, {"query": "Find the first name and country code of the player who did the most number of tours.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "rankings"], "label_col": ["players.country_code", "players.first_name", "players.player_id", "rankings.player_id", "rankings.tours"]}, {"query": "What is the first name and country code of the player with the most tours?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "rankings"], "label_col": ["players.country_code", "players.first_name", "players.player_id", "rankings.player_id", "rankings.tours"]}, {"query": "Find the year that has the most number of matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "Which year had the most matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "Find the name and rank points of the winner who won the most times.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.winner_rank_points"]}, {"query": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.winner_rank_points"]}, {"query": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.tourney_name", "matches.winner_rank_points"]}, {"query": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.tourney_name", "matches.winner_rank_points"]}, {"query": "find the names of loser and winner who played in the match with greatest number of minutes.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.loser_name", "matches.minutes"]}, {"query": "What are the names of the winner and loser who played in the longest match?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.loser_name", "matches.minutes"]}, {"query": "find the number of players for each country.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "How many players are from each country?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "find the code of the country where has the greatest number of players.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "What is the code of the country with the most players?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "Find the codes of countries that have more than 50 players.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "What are the codes of countries with more than 50 players?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.country_code"]}, {"query": "Find the total number of tours for each ranking date.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["rankings"], "label_col": ["rankings.tours", "rankings.ranking_date"]}, {"query": "How many total tours were there for each ranking date?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["rankings"], "label_col": ["rankings.tours", "rankings.ranking_date"]}, {"query": "Find the number of matches happened in each year.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "How many matches were played in each year?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": []}, {"query": "Find the name and rank of the 3 youngest winners across all matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.winner_rank", "matches.winner_age"]}, {"query": "What are the names and ranks of the three youngest winners across all matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.winner_rank", "matches.winner_age"]}, {"query": "How many different winners both participated in the WTA Championships and were left handed?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.tourney_name", "matches.winner_hand"]}, {"query": "Find the number of left handed winners who participated in the WTA Championships.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["matches"], "label_col": ["matches.winner_name", "matches.tourney_name", "matches.winner_hand"]}, {"query": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "matches"], "label_col": ["players.first_name", "players.country_code", "players.birth_date", "players.player_id", "matches.winner_id", "matches.winner_rank_points"]}, {"query": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players", "matches"], "label_col": ["players.first_name", "players.country_code", "players.birth_date", "players.player_id", "matches.winner_id", "matches.winner_rank_points"]}, {"query": "Find the number of players for each hand type.", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.hand"]}, {"query": "How many players are there for each hand type?", "table_infos": "table:\n{'players': ['player id', 'first name', 'last name', 'hand', 'birth date', 'country code'], 'matches': ['best of', 'draw size', 'loser age', 'loser entry', 'loser hand', 'loser ht', 'loser id', 'loser ioc', 'loser name', 'loser rank', 'loser rank points', 'loser seed', 'match num', 'minutes', 'round', 'score', 'surface', 'tourney date', 'tourney id', 'tourney level', 'tourney name', 'winner age', 'winner entry', 'winner hand', 'winner ht', 'winner id', 'winner ioc', 'winner name', 'winner rank', 'winner rank points', 'winner seed', 'year'], 'rankings': ['ranking date', 'ranking', 'player id', 'ranking points', 'tours']}\nforeign_keys:['matches.winner id = players.player id', 'matches.loser id = players.player id', 'rankings.player id = players.player id']\n", "label_table": ["players"], "label_col": ["players.hand"]}, {"query": "How many ships ended up being 'Captured'?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["ship"], "label_col": ["ship.disposition_of_ship"]}, {"query": "List the name and tonnage ordered by in descending alphaetical order for the names.", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["ship"], "label_col": ["ship.name", "ship.tonnage"]}, {"query": "List the name, date and result of each battle.", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle"], "label_col": ["battle.name"]}, {"query": "What is maximum and minimum death toll caused each time?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["death"], "label_col": ["death.killed"]}, {"query": "What is the average number of injuries caused each time?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["death"], "label_col": ["death.injured"]}, {"query": "What are the death and injury situations caused by the ship with tonnage 't'?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["death", "ship"], "label_col": ["death.killed", "death.injured", "death.caused_by_ship_id", "T2.id", "T2.tonnage"]}, {"query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle"], "label_col": ["battle.name", "battle.bulgarian_commander"]}, {"query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle", "ship"], "label_col": ["battle.id", "battle.name", "ship.lost_in_battle", "ship.ship_type"]}, {"query": "What are the ids and names of the battles that led to more than 10 people killed in total.", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle", "ship", "death"], "label_col": ["battle.id", "battle.name", "ship.lost_in_battle", "ship.id", "death.caused_by_ship_id", "death.killed"]}, {"query": "What is the ship id and name that caused most total injuries?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["death", "ship"], "label_col": ["T2.id", "T2.name", "death.caused_by_ship_id"]}, {"query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle"], "label_col": ["battle.name", "battle.bulgarian_commander", "battle.latin_commander"]}, {"query": "How many different results are there for the battles?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle"], "label_col": []}, {"query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["battle", "ship"], "label_col": ["battle.name", "battle.date", "battle.id", "ship.lost_in_battle", "ship.name"]}, {"query": "What are the notes of the death events which has substring 'East'?", "table_infos": "table:\n{'battle': ['id', 'name', 'date', 'bulgarian commander', 'latin commander', 'result'], 'ship': ['lost in battle', 'id', 'name', 'tonnage', 'ship type', 'location', 'disposition of ship'], 'death': ['caused by ship id', 'id', 'note', 'killed', 'injured']}\nforeign_keys:['ship.lost in battle = battle.id', 'death.caused by ship id = ship.id']\n", "label_table": ["death"], "label_col": ["death.note"]}, {"query": "what are all the addresses including line 1 and line 2?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["addresses"], "label_col": ["addresses.line_1", "addresses.line_2"]}, {"query": "What is the first and second line for all addresses?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["addresses"], "label_col": ["addresses.line_1", "addresses.line_2"]}, {"query": "How many courses in total are listed?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses"], "label_col": []}, {"query": "How many courses are there?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses"], "label_col": []}, {"query": "How is the math course described?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses"], "label_col": ["Courses.course_description", "Courses.course_name"]}, {"query": "What are the descriptions for all the math courses?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses"], "label_col": ["Courses.course_description", "Courses.course_name"]}, {"query": "What is the zip code of the address in the city Port Chelsea?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Addresses"], "label_col": ["Addresses.zip_postcode", "Addresses.city"]}, {"query": "What is the zip code for Port Chelsea?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Addresses"], "label_col": ["Addresses.zip_postcode", "Addresses.city"]}, {"query": "Which department offers the most number of degrees? List department name and id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs", "Departments"], "label_col": ["Departments.department_name", "Degree_Programs.department_id", "Departments.department_id"]}, {"query": "What is the name and id of the department with the most number of degrees ?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["degree_programs", "departments"], "label_col": ["departments.department_name", "degree_programs.department_id", "departments.department_id"]}, {"query": "How many departments offer any degree?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs"], "label_col": ["Degree_Programs.department_id"]}, {"query": "How many different departments offer degrees?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs"], "label_col": ["Degree_Programs.department_id"]}, {"query": "How many different degree names are offered?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs"], "label_col": ["Degree_Programs.degree_summary_name"]}, {"query": "How many different degrees are offered?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs"], "label_col": ["Degree_Programs.degree_summary_name"]}, {"query": "How many degrees does the engineering department offer?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Departments", "Degree_Programs"], "label_col": ["Departments.department_id", "Degree_Programs.department_id", "Departments.department_name"]}, {"query": "How many degrees does the engineering department have?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Departments", "Degree_Programs"], "label_col": ["Departments.department_id", "Degree_Programs.department_id", "Departments.department_name"]}, {"query": "What are the names and descriptions of all the sections?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_name", "Sections.section_description"]}, {"query": "What are the names and descriptions for all the sections?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_name", "Sections.section_description"]}, {"query": "What are the names and id of courses having at most 2 sections?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Sections"], "label_col": ["Courses.course_name", "Courses.course_id", "Sections.course_id"]}, {"query": "What are the names and ids of every course with less than 2 sections?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Sections"], "label_col": ["Courses.course_name", "Courses.course_id", "Sections.course_id"]}, {"query": "List the section_name in reversed lexicographical order.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_name"]}, {"query": "What are the names of the sections in reverse alphabetical order?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_name"]}, {"query": "What is the semester which most student registered in? Show both the name and the id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Semesters", "Student_Enrolment"], "label_col": ["Semesters.semester_name", "Semesters.semester_id", "Student_Enrolment.semester_id"]}, {"query": "For each semester, what is the name and id of the one with the most students registered?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Semesters", "Student_Enrolment"], "label_col": ["Semesters.semester_name", "Semesters.semester_id", "Student_Enrolment.semester_id"]}, {"query": "What is the description of the department whose name has the substring the computer?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Departments"], "label_col": ["Departments.department_description", "Departments.department_name"]}, {"query": "What is the department description for the one whose name has the word computer?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Departments"], "label_col": ["Departments.department_description", "Departments.department_name"]}, {"query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.student_id", "Student_Enrolment.student_id"]}, {"query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.student_id", "Student_Enrolment.student_id"]}, {"query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment", "Degree_Programs"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.student_id", "Student_Enrolment.student_id", "Student_Enrolment.degree_program_id", "Degree_Programs.degree_program_id", "Degree_Programs.degree_summary_name"]}, {"query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment", "Degree_Programs"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.student_id", "Student_Enrolment.student_id", "Student_Enrolment.degree_program_id", "Degree_Programs.degree_program_id", "Degree_Programs.degree_summary_name"]}, {"query": "Find the kind of program which most number of students are enrolled in?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs", "Student_Enrolment"], "label_col": ["Degree_Programs.degree_summary_name", "Degree_Programs.degree_program_id", "Student_Enrolment.degree_program_id"]}, {"query": "What is the degree summary name that has the most number of students enrolled?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs", "Student_Enrolment"], "label_col": ["Degree_Programs.degree_summary_name", "Degree_Programs.degree_program_id", "Student_Enrolment.degree_program_id"]}, {"query": "Find the program which most number of students are enrolled in. List both the id and the summary.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs", "Student_Enrolment"], "label_col": ["Degree_Programs.degree_program_id", "Degree_Programs.degree_summary_name", "Student_Enrolment.degree_program_id"]}, {"query": "What is the program id and the summary of the degree that has the most students enrolled?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Degree_Programs", "Student_Enrolment"], "label_col": ["Degree_Programs.degree_program_id", "Degree_Programs.degree_summary_name", "Student_Enrolment.degree_program_id"]}, {"query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment"], "label_col": ["Students.student_id", "Students.first_name", "Students.middle_name", "Students.last_name", "Student_Enrolment.student_id"]}, {"query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Student_Enrolment"], "label_col": ["Students.student_id", "Students.first_name", "Students.middle_name", "Students.last_name", "Student_Enrolment.student_id"]}, {"query": "What are all the course names of the courses which ever have students enrolled in?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Student_Enrolment_Courses"], "label_col": ["Courses.course_name", "Courses.course_id", "Student_Enrolment_Courses.course_id"]}, {"query": "What are the names of all courses that have some students enrolled?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Student_Enrolment_Courses"], "label_col": ["Courses.course_name", "Courses.course_id", "Student_Enrolment_Courses.course_id"]}, {"query": "What's the name of the course with most number of enrollments?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Student_Enrolment_Courses"], "label_col": ["Courses.course_name", "Courses.course_id", "Student_Enrolment_Courses.course_id"]}, {"query": "What is the name of the course with the most students enrolled?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Courses", "Student_Enrolment_Courses"], "label_col": ["Courses.course_name", "Courses.course_id", "Student_Enrolment_Courses.course_id"]}, {"query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Addresses", "Student_Enrolment"], "label_col": ["Students.last_name", "Students.current_address_id", "Addresses.address_id", "Addresses.state_province_county", "Students.student_id", "Student_Enrolment.student_id"]}, {"query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students", "Addresses", "Student_Enrolment"], "label_col": ["Students.last_name", "Students.current_address_id", "Addresses.address_id", "Addresses.state_province_county", "Students.student_id", "Student_Enrolment.student_id"]}, {"query": "Show the date and id of the transcript with at least 2 course results.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents", "Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcript_Contents.transcript_id", "Transcripts.transcript_id"]}, {"query": "What is the date and id of the transcript with at least 2 courses listed?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents", "Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcript_Contents.transcript_id", "Transcripts.transcript_id"]}, {"query": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.cell_mobile_number", "Students.first_name", "Students.last_name"]}, {"query": "What is the mobile phone number of the student named Timmothy Ward ?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["students"], "label_col": ["students.cell_mobile_number", "students.first_name", "students.last_name"]}, {"query": "Who is the first student to register? List the first name, middle name and last name.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.date_first_registered"]}, {"query": "What is the first, middle, and last name of the first student to register?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.date_first_registered"]}, {"query": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.date_left"]}, {"query": "What is the first, middle, and last name of the earliest school graduate?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.middle_name", "Students.last_name", "Students.date_left"]}, {"query": "Whose permanent address is different from his or her current address? List his or her first name.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.current_address_id", "Students.permanent_address_id"]}, {"query": "What is the first name of the student whose permanent address is different from his or her current one?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.first_name", "Students.current_address_id", "Students.permanent_address_id"]}, {"query": "Which address holds the most number of students currently? List the address id and all lines.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Addresses", "Students"], "label_col": ["Addresses.address_id", "Addresses.line_1", "Addresses.line_2", "Students.current_address_id"]}, {"query": "What is the id, line 1, and line 2 of the address with the most students?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Addresses", "Students"], "label_col": ["Addresses.address_id", "Addresses.line_1", "Addresses.line_2", "Students.current_address_id"]}, {"query": "On average, when were the transcripts printed?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date"]}, {"query": "What is the average transcript date?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date"]}, {"query": "When is the first transcript released? List the date and details.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcripts.other_details"]}, {"query": "What is the earliest date of a transcript release, and what details can you tell me?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcripts.other_details"]}, {"query": "How many transcripts are released?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": []}, {"query": "How many transcripts are listed?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": []}, {"query": "What is the last transcript release date?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date"]}, {"query": "When was the last transcript released?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcripts"], "label_col": ["Transcripts.transcript_date"]}, {"query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents"], "label_col": ["Transcript_Contents.student_course_id"]}, {"query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents"], "label_col": ["Transcript_Contents.student_course_id"]}, {"query": "Show the date of the transcript which shows the least number of results, also list the id.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents", "Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcript_Contents.transcript_id", "Transcripts.transcript_id"]}, {"query": "What is the date and id of the transcript with the least number of results?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Transcript_Contents", "Transcripts"], "label_col": ["Transcripts.transcript_date", "Transcript_Contents.transcript_id", "Transcripts.transcript_id"]}, {"query": "How many different addresses do the students currently live?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.current_address_id"]}, {"query": "What are the different addresses that have students living there?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.current_address_id"]}, {"query": "List all the student details in reversed lexicographical order.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.other_student_details"]}, {"query": "What other details can you tell me about students in reverse alphabetical order?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Students"], "label_col": ["Students.other_student_details"]}, {"query": "Describe the section h.", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_description", "Sections.section_name"]}, {"query": "What is the description for the section named h?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["Sections"], "label_col": ["Sections.section_description", "Sections.section_name"]}, {"query": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["students", "addresses"], "label_col": ["students.first_name", "students.permanent_address_id", "addresses.address_id", "addresses.country", "students.cell_mobile_number"]}, {"query": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "table_infos": "table:\n{'addresses': ['address id', 'line 1', 'line 2', 'line 3', 'city', 'zip postcode', 'state province county', 'country', 'other address details'], 'courses': ['course id', 'course name', 'course description', 'other details'], 'departments': ['department id', 'department name', 'department description', 'other details'], 'degree programs': ['degree program id', 'department id', 'degree summary name', 'degree summary description', 'other details'], 'sections': ['section id', 'course id', 'section name', 'section description', 'other details'], 'semesters': ['semester id', 'semester name', 'semester description', 'other details'], 'students': ['student id', 'current address id', 'permanent address id', 'first name', 'middle name', 'last name', 'cell mobile number', 'email address', 'ssn', 'date first registered', 'date left', 'other student details'], 'student enrolment': ['student enrolment id', 'degree program id', 'semester id', 'student id', 'other details'], 'student enrolment courses': ['student course id', 'course id', 'student enrolment id'], 'transcripts': ['transcript id', 'transcript date', 'other details'], 'transcript contents': ['student course id', 'transcript id']}\nforeign_keys:['degree programs.department id = departments.department id', 'sections.course id = courses.course id', 'students.permanent address id = addresses.address id', 'students.current address id = addresses.address id', 'student enrolment.student id = students.student id', 'student enrolment.semester id = semesters.semester id', 'student enrolment.degree program id = degree programs.degree program id', 'student enrolment courses.student enrolment id = student enrolment.student enrolment id', 'student enrolment courses.course id = courses.course id', 'transcript contents.transcript id = transcripts.transcript id', 'transcript contents.student course id = student enrolment courses.student course id']\n", "label_table": ["students", "addresses"], "label_col": ["students.first_name", "students.permanent_address_id", "addresses.address_id", "addresses.country", "students.cell_mobile_number"]}, {"query": "List the title of all cartoons in alphabetical order.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.title"]}, {"query": "What are the titles of the cartoons sorted alphabetically?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.title"]}, {"query": "List all cartoon directed by \"Ben Jones\".", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.Directed_by", "Cartoon.Ben Jones"]}, {"query": "What are the names of all cartoons directed by Ben Jones?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.Directed_by", "Cartoon.Ben Jones"]}, {"query": "How many cartoons were written by \"Joseph Kuhr\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Written_by", "Cartoon.Joseph Kuhr"]}, {"query": "What is the number of cartoones written by Joseph Kuhr?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Written_by", "Cartoon.Joseph Kuhr"]}, {"query": "list all cartoon titles and their directors ordered by their air date", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.title", "Cartoon.Directed_by", "Cartoon.Original_air_date"]}, {"query": "What is the name and directors of all the cartoons that are ordered by air date?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.title", "Cartoon.Directed_by", "Cartoon.Original_air_date"]}, {"query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.Directed_by", "Cartoon.Ben Jones", "Cartoon.Brandon Vietti"]}, {"query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["Cartoon"], "label_col": ["Cartoon.Title", "Cartoon.Directed_by", "Cartoon.Ben Jones", "Cartoon.Brandon Vietti"]}, {"query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Country"]}, {"query": "What is the country with the most number of TV Channels and how many does it have?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Country"]}, {"query": "List the number of different series names and contents in the TV Channel table.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.series_name", "TV_Channel.content"]}, {"query": "How many different series and contents are listed in the TV Channel table?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.series_name", "TV_Channel.content"]}, {"query": "What is the content of TV Channel with serial name \"Sky Radio\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Content", "TV_Channel.series_name", "TV_Channel.Sky Radio"]}, {"query": "What is the content of the series Sky Radio?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Content", "TV_Channel.series_name", "TV_Channel.Sky Radio"]}, {"query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Package_Option", "TV_Channel.series_name", "TV_Channel.Sky Radio"]}, {"query": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.Package_Option", "TV_Channel.series_name", "TV_Channel.Sky Radio"]}, {"query": "How many TV Channel using language English?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.English"]}, {"query": "How many TV Channels use the English language?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.English"]}, {"query": "List the language used least number of TV Channel. List language and number of TV Channel.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.LANGUAGE"]}, {"query": "What are the languages used by the least number of TV Channels and how many channels use it?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.LANGUAGE"]}, {"query": "List each language and the number of TV Channels using it.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.LANGUAGE"]}, {"query": "For each language, list the number of TV Channels that use it.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.LANGUAGE"]}, {"query": "List the Episode of all TV series sorted by rating.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Episode", "TV_series.rating"]}, {"query": "What are all of the episodes ordered by ratings?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Episode", "TV_series.rating"]}, {"query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Episode", "TV_series.Rating"]}, {"query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Episode", "TV_series.Rating"]}, {"query": "What is minimum and maximum share of TV series?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": []}, {"query": "What is the maximum and minimum share for the TV series?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": []}, {"query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Air_Date", "TV_series.Episode", "TV_series.A Love of a Lifetime"]}, {"query": "When did the episode \"A Love of a Lifetime\" air?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Air_Date", "TV_series.Episode", "TV_series.A Love of a Lifetime"]}, {"query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Weekly_Rank", "TV_series.Episode", "TV_series.A Love of a Lifetime"]}, {"query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_series"], "label_col": ["TV_series.Weekly_Rank", "TV_series.Episode", "TV_series.A Love of a Lifetime"]}, {"query": "Find the number of cartoons directed by each of the listed directors.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["cartoon"], "label_col": ["cartoon.Directed_by"]}, {"query": "How many cartoons did each director create?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["cartoon"], "label_col": ["cartoon.Directed_by"]}, {"query": "Find the production code and channel of the most recently aired cartoon .", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["cartoon"], "label_col": ["cartoon.production_code", "cartoon.channel", "cartoon.original_air_date"]}, {"query": "What is the produdction code and channel of the most recent cartoon ?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["cartoon"], "label_col": ["cartoon.production_code", "cartoon.channel", "cartoon.original_air_date"]}, {"query": "Find the package choice and series name of the TV channel that has high definition TV.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.package_option", "TV_Channel.series_name", "TV_Channel.hight_definition_TV", "TV_Channel.yes"]}, {"query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel"], "label_col": ["TV_Channel.package_option", "TV_Channel.series_name", "TV_Channel.hight_definition_TV", "TV_Channel.yes"]}, {"query": "which countries' tv channels are playing some cartoon written by Todd Casey?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel", "cartoon"], "label_col": ["TV_Channel.country", "TV_Channel.id", "cartoon.Channel", "cartoon.written_by"]}, {"query": "What are the countries that have cartoons on TV that were written by Todd Casey?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel", "cartoon"], "label_col": ["TV_Channel.country", "TV_Channel.id", "cartoon.Channel", "cartoon.written_by"]}, {"query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel", "cartoon"], "label_col": ["TV_Channel.series_name", "TV_Channel.country", "TV_Channel.id", "cartoon.Channel", "cartoon.directed_by"]}, {"query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["TV_Channel", "cartoon"], "label_col": ["TV_Channel.series_name", "TV_Channel.country", "TV_Channel.id", "cartoon.Channel", "cartoon.directed_by"]}, {"query": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["tv_channel"], "label_col": ["tv_channel.Pixel_aspect_ratio_PAR", "tv_channel.country"]}, {"query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["tv_channel"], "label_col": ["tv_channel.Pixel_aspect_ratio_PAR", "tv_channel.country"]}, {"query": "find id of the tv channels that from the countries where have more than two tv channels.", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["tv_channel"], "label_col": ["tv_channel.id", "tv_channel.country"]}, {"query": "What are the ids of all tv channels that have more than 2 TV channels?", "table_infos": "table:\n{'tv channel': ['id', 'series name', 'country', 'language', 'content', 'pixel aspect ratio par', 'hight definition tv', 'pay per view ppv', 'package option'], 'tv series': ['id', 'episode', 'air date', 'rating', 'share', '18 49 rating share', 'viewers m', 'weekly rank', 'channel'], 'cartoon': ['id', 'title', 'directed by', 'written by', 'original air date', 'production code', 'channel']}\nforeign_keys:['tv series.channel = tv channel.id', 'cartoon.channel = tv channel.id']\n", "label_table": ["tv_channel"], "label_col": ["tv_channel.id", "tv_channel.country"]}, {"query": "How many poker players are there?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": []}, {"query": "Count the number of poker players.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": []}, {"query": "List the earnings of poker players in descending order.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Earnings"]}, {"query": "What are the earnings of poker players, ordered descending by value?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Earnings"]}, {"query": "List the final tables made and the best finishes of poker players.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Final_Table_Made", "poker_player.Best_Finish"]}, {"query": "What are the final tables made and best finishes for all poker players?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Final_Table_Made", "poker_player.Best_Finish"]}, {"query": "What is the average earnings of poker players?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Earnings"]}, {"query": "Return the average earnings across all poker players.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Earnings"]}, {"query": "What is the money rank of the poker player with the highest earnings?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Money_Rank", "poker_player.Earnings"]}, {"query": "Return the money rank of the player with the greatest earnings.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Money_Rank", "poker_player.Earnings"]}, {"query": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Final_Table_Made", "poker_player.Earnings"]}, {"query": "Return the maximum final tables made across all poker players who have earnings below 200000.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["poker_player"], "label_col": ["poker_player.Final_Table_Made", "poker_player.Earnings"]}, {"query": "What are the names of poker players?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID"]}, {"query": "Return the names of all the poker players.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID"]}, {"query": "What are the names of poker players whose earnings is higher than 300000?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "Give the names of poker players who have earnings above 300000.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "List the names of poker players ordered by the final tables made in ascending order.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Final_Table_Made"]}, {"query": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Final_Table_Made"]}, {"query": "What is the birth date of the poker player with the lowest earnings?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Birth_Date", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "Return the birth date of the poker player with the lowest earnings.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Birth_Date", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "What is the money rank of the tallest poker player?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["poker_player.Money_Rank", "people.People_ID", "poker_player.People_ID", "people.Height"]}, {"query": "Return the money rank of the poker player with the greatest height.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["poker_player.Money_Rank", "people.People_ID", "poker_player.People_ID", "people.Height"]}, {"query": "What is the average earnings of poker players with height higher than 200?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["poker_player.Earnings", "people.People_ID", "poker_player.People_ID", "people.Height"]}, {"query": "Give average earnings of poker players who are taller than 200.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["poker_player.Earnings", "people.People_ID", "poker_player.People_ID", "people.Height"]}, {"query": "What are the names of poker players in descending order of earnings?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "Return the names of poker players sorted by their earnings descending.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people", "poker_player"], "label_col": ["people.Name", "people.People_ID", "poker_player.People_ID", "poker_player.Earnings"]}, {"query": "What are different nationalities of people and the corresponding number of people from each nation?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "How many people are there of each nationality?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "What is the most common nationality of people?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "Give the nationality that is most common across all people.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "What are the nationalities that are shared by at least two people?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "Return the nationalities for which there are two or more people.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "List the names and birth dates of people in ascending alphabetical order of name.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Name", "people.Birth_Date"]}, {"query": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Name", "people.Birth_Date"]}, {"query": "Show names of people whose nationality is not \"Russia\".", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Name", "people.Nationality", "people.Russia"]}, {"query": "What are the names of people who are not from Russia?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Name", "people.Nationality", "people.Russia"]}, {"query": "How many distinct nationalities are there?", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "Count the number of different nationalities.", "table_infos": "table:\n{'poker player': ['poker player id', 'people id', 'final table made', 'best finish', 'money rank', 'earnings'], 'people': ['people id', 'nationality', 'name', 'birth date', 'height']}\nforeign_keys:['poker player.people id = people.people id']\n", "label_table": ["people"], "label_col": ["people.Nationality"]}, {"query": "How many states are there?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["area_code_state"], "label_col": []}, {"query": "List the contestant numbers and names, ordered by contestant name descending.", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants"], "label_col": ["contestants.contestant_number", "contestants.contestant_name"]}, {"query": "List the vote ids, phone numbers and states of all votes.", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["votes"], "label_col": ["votes.vote_id", "votes.phone_number", "votes.state"]}, {"query": "What are the maximum and minimum values of area codes?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["area_code_state"], "label_col": ["area_code_state.area_code"]}, {"query": "What is last date created of votes from the state 'CA'?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["votes"], "label_col": ["votes.created", "votes.state"]}, {"query": "What are the names of the contestants whose names are not 'Jessie Alloway'", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants"], "label_col": ["contestants.contestant_name"]}, {"query": "What are the distinct states and create time of all votes?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["votes"], "label_col": ["votes.state", "votes.created"]}, {"query": "What are the contestant numbers and names of the contestants who had at least two votes?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants", "votes"], "label_col": ["contestants.contestant_number", "contestants.contestant_name", "votes.contestant_number"]}, {"query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants", "votes"], "label_col": ["contestants.contestant_number", "contestants.contestant_name", "votes.contestant_number"]}, {"query": "What are the number of votes from state 'NY' or 'CA'?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["votes"], "label_col": ["votes.state"]}, {"query": "What is the area code in which the most voters voted?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["area_code_state", "votes"], "label_col": ["area_code_state.area_code", "area_code_state.state", "votes.state"]}, {"query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants", "votes"], "label_col": ["votes.created", "votes.state", "votes.phone_number", "contestants.contestant_number", "votes.contestant_number", "contestants.contestant_name"]}, {"query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants", "votes", "area_code_state"], "label_col": ["area_code_state.area_code", "contestants.contestant_number", "votes.contestant_number", "votes.state", "area_code_state.state", "contestants.contestant_name"]}, {"query": "Return the names of the contestants whose names contain the substring 'Al' .", "table_infos": "table:\n{'area code state': ['area code', 'state'], 'contestants': ['contestant number', 'contestant name'], 'votes': ['vote id', 'phone number', 'state', 'contestant number', 'created']}\nforeign_keys:['votes.contestant number = contestants.contestant number', 'votes.state = area code state.state']\n", "label_table": ["contestants"], "label_col": ["contestants.contestant_name", "contestants.%al%"]}, {"query": "What are the names of all the countries that became independent after 1950?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.IndepYear"]}, {"query": "Give the names of the nations that were founded after 1950.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.IndepYear"]}, {"query": "How many countries have a republic as their form of government?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GovernmentForm", "country.Republic"]}, {"query": "How many countries have governments that are republics?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GovernmentForm", "country.Republic"]}, {"query": "What is the total surface area of the countries in the Caribbean region?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.SurfaceArea", "country.Region", "country.Caribbean"]}, {"query": "How much surface area do the countires in the Carribean cover together?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.SurfaceArea", "country.Region", "country.Caribbean"]}, {"query": "Which continent is Anguilla in?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Continent", "country.Name", "country.Anguilla"]}, {"query": "What is the continent name which Anguilla belongs to?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Continent", "country.Name", "country.Anguilla"]}, {"query": "What are the population and life expectancies in Brazil?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.LifeExpectancy", "country.Name", "country.Brazil"]}, {"query": "Give me Brazil’s population and life expectancies.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.LifeExpectancy", "country.Name", "country.Brazil"]}, {"query": "What are the region and population of Angola?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.Region", "country.Name", "country.Angola"]}, {"query": "What region does Angola belong to and what is its population?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.Region", "country.Name", "country.Angola"]}, {"query": "What is the average expected life expectancy for countries in the region of Central Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.LifeExpectancy", "country.Region", "country.Central Africa"]}, {"query": "How long is the people’s average life expectancy in Central Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.LifeExpectancy", "country.Region", "country.Central Africa"]}, {"query": "What is the name of country that has the shortest life expectancy in Asia?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Asia", "country.LifeExpectancy"]}, {"query": "Give the name of the country in Asia with the lowest life expectancy.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Asia", "country.LifeExpectancy"]}, {"query": "What is the total population and maximum GNP in Asia?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.GNP", "country.Continent", "country.Asia"]}, {"query": "How many people live in Asia, and what is the largest GNP among them?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.GNP", "country.Continent", "country.Asia"]}, {"query": "What is the average life expectancy in African countries that are republics?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.LifeExpectancy", "country.Continent", "country.Africa", "country.GovernmentForm", "country.Republic"]}, {"query": "Give the average life expectancy for countries in Africa which are republics?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.LifeExpectancy", "country.Continent", "country.Africa", "country.GovernmentForm", "country.Republic"]}, {"query": "What is the total surface area of the continents Asia and Europe?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.SurfaceArea", "country.Continent", "country.Asia", "country.Europe"]}, {"query": "Give the total surface area covered by countries in Asia or Europe.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.SurfaceArea", "country.Continent", "country.Asia", "country.Europe"]}, {"query": "How many people live in Gelderland district?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.Population", "city.District", "city.Gelderland"]}, {"query": "What is the total population of Gelderland district?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.Population", "city.District", "city.Gelderland"]}, {"query": "What is the average GNP and total population in all nations whose government is US territory?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GNP", "country.population", "country.GovernmentForm", "country.US Territory"]}, {"query": "Give the mean GNP and total population of nations which are considered US territory.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GNP", "country.population", "country.GovernmentForm", "country.US Territory"]}, {"query": "How many unique languages are spoken in the world?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": []}, {"query": "What is the number of distinct languages used around the world?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": []}, {"query": "How many type of governments are in Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GovernmentForm", "country.Continent", "country.Africa"]}, {"query": "How many different forms of governments are there in Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.GovernmentForm", "country.Continent", "country.Africa"]}, {"query": "What is name of the country that speaks the largest number of languages?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["country.Name", "country.Code", "countrylanguage.CountryCode"]}, {"query": "Give the name of the nation that uses the greatest amount of languages.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["country.Name", "country.Code", "countrylanguage.CountryCode"]}, {"query": "Which continent has the most diverse languages?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["country.Continent", "country.Code", "countrylanguage.CountryCode"]}, {"query": "Which continent speaks the most languages?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["country.Continent", "country.Code", "countrylanguage.CountryCode"]}, {"query": "Find the name, population and expected life length of asian country with the largest area?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population", "country.LifeExpectancy", "country.Continent", "country.Asia", "country.SurfaceArea"]}, {"query": "What are the name, population, and life expectancy of the largest Asian country by land?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population", "country.LifeExpectancy", "country.Continent", "country.Asia", "country.SurfaceArea"]}, {"query": "What are the countries that have greater surface area than any country in Europe?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea", "country.Continent", "country.Europe"]}, {"query": "Which countries have greater area than that of any country in Europe?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea", "country.Continent", "country.Europe"]}, {"query": "What are the African countries that have a  population less than any country in Asia?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Africa", "country.population", "country.Asia"]}, {"query": "Which African countries have a smaller population than that of any country in Asia?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Africa", "country.population", "country.Asia"]}, {"query": "Which Asian countries have a population that is larger than any country in Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Asia", "country.population", "country.Africa"]}, {"query": "What are the Asian countries which have a population larger than that of any country in Africa?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Continent", "country.Asia", "country.population", "country.Africa"]}, {"query": "What are the country codes for countries that do not speak English?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.English"]}, {"query": "Return the country codes for countries that do not speak English.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.English"]}, {"query": "What are the country codes of countries where people use languages other than English?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.English"]}, {"query": "Give the country codes for countries in which people speak langauges that are not English.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.English"]}, {"query": "Which cities are in European countries where English is not the official language?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "city", "countrylanguage"], "label_col": ["city.Name", "city.CountryCode", "country.Code", "country.Continent", "country.Name", "countrylanguage.CountryCode", "countrylanguage.IsOfficial", "countrylanguage.Language"]}, {"query": "What are the names of cities in Europe for which English is not the official language?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "city", "countrylanguage"], "label_col": ["city.Name", "city.CountryCode", "country.Code", "country.Continent", "country.Name", "countrylanguage.CountryCode", "countrylanguage.IsOfficial", "countrylanguage.Language"]}, {"query": "What are the name, independence year, and surface area of the country with the smallest population?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea", "country.IndepYear", "country.Population"]}, {"query": "Give the name, year of independence, and surface area of the country that has the lowest population.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea", "country.IndepYear", "country.Population"]}, {"query": "What are the population, name and leader of the country with the largest area?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.population", "country.HeadOfState", "country.SurfaceArea"]}, {"query": "Give the name, population, and head of state for the country that has the largest area.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.population", "country.HeadOfState", "country.SurfaceArea"]}, {"query": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["countrylanguage.Language", "country.Name", "country.Code", "countrylanguage.CountryCode"]}, {"query": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country", "countrylanguage"], "label_col": ["countrylanguage.Language", "country.Name", "country.Code", "countrylanguage.CountryCode"]}, {"query": "Find the number of cities in each district whose population is greater than the average population of cities?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.District", "city.Population"]}, {"query": "How many cities in each district have a population that is above the average population across all cities?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.District", "city.Population"]}, {"query": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.GovernmentForm", "country.LifeExpectancy"]}, {"query": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.GovernmentForm", "country.LifeExpectancy"]}, {"query": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.LifeExpectancy", "country.Continent"]}, {"query": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Population", "country.LifeExpectancy", "country.Continent"]}, {"query": "What are the names and areas of countries with the top 5 largest area?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea"]}, {"query": "Return the names and surface areas of the 5 largest countries.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.SurfaceArea"]}, {"query": "What are names of countries with the top 3 largest population?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population"]}, {"query": "Return the names of the 3 most populated countries.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population"]}, {"query": "What are the names of the nations with the 3 lowest populations?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population"]}, {"query": "Return the names of the 3 countries with the fewest people.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.Population"]}, {"query": "how many countries are in Asia?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.continent", "country.Asia"]}, {"query": "Count the number of countries in Asia.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.continent", "country.Asia"]}, {"query": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.continent", "country.Europe", "country.Population", "country.80000"]}, {"query": "Give the names of countries that are in Europe and have a population equal to 80000.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.Name", "country.continent", "country.Europe", "country.Population", "country.80000"]}, {"query": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.population", "country.surfacearea", "country.continent", "country.north america"]}, {"query": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["country"], "label_col": ["country.population", "country.surfacearea", "country.continent", "country.north america"]}, {"query": "What are the cities whose population is between 160000 and 900000?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.name", "city.Population"]}, {"query": "Return the names of cities that have a population between 160000 and 900000 .", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["city"], "label_col": ["city.name", "city.population"]}, {"query": "Which language is spoken by the largest number of countries?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": []}, {"query": "Give the language that is spoken in the most countries.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": []}, {"query": "What is the language spoken by the largest percentage of people in each country?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.LANGUAGE", "countrylanguage.CountryCode", "countrylanguage.Percentage"]}, {"query": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.LANGUAGE", "countrylanguage.CountryCode", "countrylanguage.Percentage"]}, {"query": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.Percentage", "countrylanguage.Spanish", "countrylanguage.CountryCode"]}, {"query": "Count the number of countries for which Spanish is the predominantly spoken language.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.Percentage", "countrylanguage.Spanish", "countrylanguage.CountryCode"]}, {"query": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.Percentage", "countrylanguage.Spanish"]}, {"query": "Return the codes of countries for which Spanish is the predominantly spoken language.", "table_infos": "table:\n{'city': ['id', 'name', 'country code', 'district', 'population'], 'sqlite sequence': ['name', 'seq'], 'country': ['code', 'name', 'continent', 'region', 'surface area', 'indepdent year', 'population', 'life expectancy', 'gnp', 'gnp old', 'local name', 'government form', 'head of state', 'capital', 'code2'], 'countrylanguage': ['countrycode', 'language', 'is official', 'percentage']}\nforeign_keys:['city.country code = country.code', 'countrylanguage.countrycode = country.code']\n", "label_table": ["countrylanguage"], "label_col": ["countrylanguage.CountryCode", "countrylanguage.Percentage", "countrylanguage.Spanish"]}, {"query": "How many conductors are there?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": []}, {"query": "Count the number of conductors.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": []}, {"query": "List the names of conductors in ascending order of age.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Age"]}, {"query": "What are the names of conductors, ordered by age?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Age"]}, {"query": "What are the names of conductors whose nationalities are not \"USA\"?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Nationality"]}, {"query": "Return the names of conductors that do not have the nationality \"USA\".", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Nationality"]}, {"query": "What are the record companies of orchestras in descending order of years in which they were founded?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company", "orchestra.Year_of_Founded"]}, {"query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company", "orchestra.Year_of_Founded"]}, {"query": "What is the average attendance of shows?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["SHOW"], "label_col": ["SHOW.Attendance"]}, {"query": "Return the average attendance across all shows.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["SHOW"], "label_col": ["SHOW.Attendance"]}, {"query": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["performance"], "label_col": ["performance.Live final"]}, {"query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["performance"], "label_col": ["performance.Live final"]}, {"query": "How many different nationalities do conductors have?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Nationality"]}, {"query": "Count the number of different nationalities of conductors.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Nationality"]}, {"query": "List names of conductors in descending order of years of work.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Year_of_Work"]}, {"query": "What are the names of conductors, sorted descending by the number of years they have worked?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Year_of_Work"]}, {"query": "List the name of the conductor with the most years of work.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Year_of_Work"]}, {"query": "What is the name of the conductor who has worked the greatest number of years?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor"], "label_col": ["conductor.Name", "conductor.Year_of_Work"]}, {"query": "Show the names of conductors and the orchestras they have conducted.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "orchestra.Orchestra", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "orchestra.Orchestra", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "Show the names of conductors that have conducted more than one orchestras.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "What are the names of conductors who have conducted at more than one orchestra?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "Show the name of the conductor that has conducted the most number of orchestras.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "What is the name of the conductor who has conducted the most orchestras?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["conductor", "orchestra"], "label_col": ["conductor.Name", "conductor.Conductor_ID", "orchestra.Conductor_ID"]}, {"query": "Please show the different record companies and the corresponding number of orchestras.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company"]}, {"query": "How many orchestras does each record company manage?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company"]}, {"query": "Please show the record formats of orchestras in ascending order of count.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Major_Record_Format"]}, {"query": "What are the major record formats of orchestras, sorted by their frequency?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Major_Record_Format"]}, {"query": "List the record company shared by the most number of orchestras.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company"]}, {"query": "What is the record company used by the greatest number of orchestras?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company"]}, {"query": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company", "orchestra.Year_of_Founded"]}, {"query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Record_Company", "orchestra.Year_of_Founded"]}, {"query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Major_Record_Format", "orchestra.CD", "orchestra.DVD"]}, {"query": "Count the number of orchestras that have CD or DVD as their record format.", "table_infos": "table:\n{'conductor': ['conductor id', 'name', 'age', 'nationality', 'year of work'], 'orchestra': ['orchestra id', 'orchestra', 'conductor id', 'record company', 'year of founded', 'major record format'], 'performance': ['performance id', 'orchestra id', 'type', 'date', 'official ratings (millions)', 'weekly rank', 'share'], 'show': ['show id', 'performance id', 'if first show', 'result', 'attendance']}\nforeign_keys:['orchestra.conductor id = conductor.conductor id', 'performance.orchestra id = orchestra.orchestra id', 'show.performance id = performance.performance id']\n", "label_table": ["orchestra"], "label_col": ["orchestra.Major_Record_Format", "orchestra.CD", "orchestra.DVD"]}, {"query": "How many high schoolers are there?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": []}, {"query": "Count the number of high schoolers.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": []}, {"query": "Show the names and grades of each high schooler.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.name", "Highschooler.grade"]}, {"query": "What are the names and grades for each high schooler?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.name", "Highschooler.grade"]}, {"query": "Show all the grades of the high schoolers.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "What is the grade of each high schooler?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "What grade is Kyle in?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade", "Highschooler.name", "Highschooler.Kyle"]}, {"query": "Return the grade for the high schooler named Kyle.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade", "Highschooler.name", "Highschooler.Kyle"]}, {"query": "Show the names of all high schoolers in grade 10.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.name", "Highschooler.grade"]}, {"query": "What are the names of all high schoolers in grade 10?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.name", "Highschooler.grade"]}, {"query": "Show the ID of the high schooler named Kyle.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.ID", "Highschooler.name", "Highschooler.Kyle"]}, {"query": "What is Kyle's id?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.ID", "Highschooler.name", "Highschooler.Kyle"]}, {"query": "How many high schoolers are there in grade 9 or 10?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Count the number of high schoolers in grades 9 or 10.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Show the number of high schoolers for each grade.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "How many high schoolers are in each grade?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Which grade has the most high schoolers?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Return the grade that has the greatest number of high schoolers.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Show me all grades that have at least 4 students.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Which grades have 4 or more high schoolers?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Highschooler"], "label_col": ["Highschooler.grade"]}, {"query": "Show the student IDs and numbers of friends corresponding to each.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend"], "label_col": ["Friend.student_id"]}, {"query": "How many friends does each student have?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend"], "label_col": ["Friend.student_id"]}, {"query": "Show the names of high school students and their corresponding number of friends.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "What are the names of the high schoolers and how many friends does each have?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "What is the name of the high schooler who has the greatest number of friends?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "Return the name of the high school student with the most friends.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "Show the names of high schoolers who have at least 3 friends.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "What are the names of high schoolers who have 3 or more friends?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id"]}, {"query": "Show name of all students who have some friends and also are liked by someone else.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler", "Likes"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id", "Likes.liked_id"]}, {"query": "What are the names of high schoolers who both have friends and are liked?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler", "Likes"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id", "Likes.liked_id"]}, {"query": "Count the number of likes for each student id.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes"], "label_col": ["Likes.student_id"]}, {"query": "How many likes correspond to each student id?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes"], "label_col": ["Likes.student_id"]}, {"query": "Show the names of high schoolers who have likes, and numbers of likes for each.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "What are the names of high schoolers who have likes, and how many likes does each have?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "What is the name of the high schooler who has the greatest number of likes?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "Give the name of the student with the most likes.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "Show the names of students who have at least 2 likes.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "What are the names of students who have 2 or more likes?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Likes", "Highschooler"], "label_col": ["Highschooler.name", "Likes.student_id", "Highschooler.id"]}, {"query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id", "Highschooler.grade"]}, {"query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "table_infos": "table:\n{'high schooler': ['id', 'name', 'grade'], 'friend': ['student id', 'friend id'], 'likes': ['student id', 'liked id']}\nforeign_keys:['friend.friend id = high schooler.id', 'friend.student id = high schooler.id', 'likes.student id = high schooler.id', 'likes.liked id = high schooler.id']\n", "label_table": ["Friend", "Highschooler"], "label_col": ["Highschooler.name", "Friend.student_id", "Highschooler.id", "Highschooler.grade"]}, {"query": "Which owner owns the most dogs? List the owner id, first name and last name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs", "Owners"], "label_col": ["Dogs.owner_id", "Owners.first_name", "Owners.last_name", "Owners.owner_id"]}, {"query": "Return the owner id, first name and last name of the owner who has the most dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs", "Owners"], "label_col": ["Dogs.owner_id", "Owners.first_name", "Owners.last_name", "Owners.owner_id"]}, {"query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals", "Treatments"], "label_col": ["Professionals.professional_id", "Professionals.role_code", "Professionals.first_name", "Treatments.professional_id"]}, {"query": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals", "Treatments"], "label_col": ["Professionals.professional_id", "Professionals.role_code", "Professionals.first_name", "Treatments.professional_id"]}, {"query": "What is the name of the breed with the most dogs?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Breeds", "Dogs"], "label_col": ["Breeds.breed_name", "Breeds.breed_code", "Dogs.breed_code"]}, {"query": "Which breed do the most dogs have? Give me the breed name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Breeds", "Dogs"], "label_col": ["Breeds.breed_name", "Breeds.breed_code", "Dogs.breed_code"]}, {"query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs", "Treatments"], "label_col": ["Owners.owner_id", "Owners.last_name", "Dogs.owner_id", "Dogs.dog_id", "Treatments.dog_id"]}, {"query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs", "Treatments"], "label_col": ["Owners.owner_id", "Owners.last_name", "Dogs.owner_id", "Dogs.dog_id", "Treatments.dog_id"]}, {"query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs", "Treatments"], "label_col": ["Owners.owner_id", "Owners.zip_code", "Dogs.owner_id", "Dogs.dog_id", "Treatments.dog_id", "Treatments.cost_of_treatment"]}, {"query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs", "Treatments"], "label_col": ["Owners.owner_id", "Owners.zip_code", "Dogs.owner_id", "Dogs.dog_id", "Treatments.dog_id", "Treatments.cost_of_treatment"]}, {"query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals", "Treatments"], "label_col": ["Professionals.professional_id", "Professionals.cell_number", "Treatments.professional_id"]}, {"query": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals", "Treatments"], "label_col": ["Professionals.professional_id", "Professionals.cell_number", "Treatments.professional_id"]}, {"query": "List the date of each treatment, together with the first name of the professional who operated it.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments", "Professionals"], "label_col": ["Treatments.date_of_treatment", "Professionals.first_name", "Treatments.professional_id", "Professionals.professional_id"]}, {"query": "What are the date and the operating professional's first name of each treatment?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments", "Professionals"], "label_col": ["Treatments.date_of_treatment", "Professionals.first_name", "Treatments.professional_id", "Professionals.professional_id"]}, {"query": "List the cost of each treatment and the corresponding treatment type description.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments", "treatment_types"], "label_col": ["Treatments.cost_of_treatment", "treatment_types.treatment_type_description", "Treatments.treatment_type_code", "treatment_types.treatment_type_code"]}, {"query": "What are the cost and treatment type description of each treatment?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments", "treatment_types"], "label_col": ["Treatments.cost_of_treatment", "treatment_types.treatment_type_description", "Treatments.treatment_type_code", "treatment_types.treatment_type_code"]}, {"query": "List each owner's first name, last name, and the size of his for her dog.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Owners.last_name", "Dogs.size_code", "Owners.owner_id", "Dogs.owner_id"]}, {"query": "What are each owner's first name, last name, and the size of their dog?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Owners.last_name", "Dogs.size_code", "Owners.owner_id", "Dogs.owner_id"]}, {"query": "List pairs of the owner's first name and the dogs's name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Dogs.name", "Owners.owner_id", "Dogs.owner_id"]}, {"query": "What are each owner's first name and their dogs's name?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Dogs.name", "Owners.owner_id", "Dogs.owner_id"]}, {"query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Dogs.name", "Owners.owner_id", "Dogs.owner_id", "Owners.state"]}, {"query": "Find the first names of owners living in Virginia and the names of dogs they own.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners", "Dogs"], "label_col": ["Owners.first_name", "Dogs.name", "Owners.owner_id", "Dogs.owner_id", "Owners.state"]}, {"query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs", "Treatments"], "label_col": ["Dogs.date_arrived", "Dogs.date_departed", "Dogs.dog_id", "Treatments.dog_id"]}, {"query": "Find the arriving date and the departing date of the dogs that received a treatment.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs", "Treatments"], "label_col": ["Dogs.date_arrived", "Dogs.date_departed", "Dogs.dog_id", "Treatments.dog_id"]}, {"query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals"], "label_col": ["Professionals.email_address", "Professionals.state"]}, {"query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Professionals"], "label_col": ["Professionals.email_address", "Professionals.state"]}, {"query": "What are the arriving date and the departing date of all the dogs?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.date_arrived", "Dogs.date_departed"]}, {"query": "List the arrival date and the departure date for all the dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.date_arrived", "Dogs.date_departed"]}, {"query": "How many dogs went through any treatments?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.dog_id"]}, {"query": "Count the number of dogs that went through a treatment.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.dog_id"]}, {"query": "How many professionals have performed any treatment to dogs?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.professional_id"]}, {"query": "Find the number of professionals who have ever treated dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.professional_id"]}, {"query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals"], "label_col": ["professionals.role_code", "professionals.street", "professionals.city", "professionals.state"]}, {"query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals"], "label_col": ["professionals.role_code", "professionals.street", "professionals.city", "professionals.state"]}, {"query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners"], "label_col": ["Owners.first_name", "Owners.last_name", "Owners.email_address", "Owners.state"]}, {"query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Owners"], "label_col": ["Owners.first_name", "Owners.last_name", "Owners.email_address", "Owners.state"]}, {"query": "How many dogs have an age below the average?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "Count the number of dogs of an age below the average.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "How much does the most recent treatment cost?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.cost_of_treatment", "Treatments.date_of_treatment"]}, {"query": "Show me the cost of the most recently performed treatment.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Treatments"], "label_col": ["Treatments.cost_of_treatment", "Treatments.date_of_treatment"]}, {"query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.name", "Dogs.age", "Dogs.weight", "Dogs.abandoned_yn"]}, {"query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.name", "Dogs.age", "Dogs.weight", "Dogs.abandoned_yn"]}, {"query": "What is the average age of all the dogs?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "Compute the average age of all the dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "What is the age of the oldest dog?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "Tell me the age of the oldest dog.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Dogs"], "label_col": ["Dogs.age"]}, {"query": "How much does each charge type costs? List both charge type and amount.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Charges"], "label_col": ["Charges.charge_type", "Charges.charge_amount"]}, {"query": "List each charge type and its amount.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Charges"], "label_col": ["Charges.charge_type", "Charges.charge_amount"]}, {"query": "How much does the most expensive charge type costs?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Charges"], "label_col": ["Charges.charge_amount"]}, {"query": "What is the charge amount of the most expensive charge type?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["Charges"], "label_col": ["Charges.charge_amount"]}, {"query": "List the email, cell phone and home phone of all the professionals.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals"], "label_col": ["professionals.email_address", "professionals.cell_number", "professionals.home_phone"]}, {"query": "What are the email, cell phone and home phone of each professional?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals"], "label_col": ["professionals.email_address", "professionals.cell_number", "professionals.home_phone"]}, {"query": "What are all the possible breed type and size type combinations?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["dogs"], "label_col": ["dogs.breed_code", "dogs.size_code"]}, {"query": "Find the distinct breed type and size type combinations for dogs.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["dogs"], "label_col": ["dogs.breed_code", "dogs.size_code"]}, {"query": "List the first name of all the professionals along with the description of the treatment they have done.", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals", "Treatments", "Treatment_types"], "label_col": ["professionals.first_name", "Treatment_types.treatment_type_description", "professionals.professional_id", "Treatments.professional_id", "Treatments.treatment_type_code", "Treatment_types.treatment_type_code"]}, {"query": "What are each professional's first name and description of the treatment they have performed?", "table_infos": "table:\n{'breeds': ['breed code', 'breed name'], 'charges': ['charge id', 'charge type', 'charge amount'], 'sizes': ['size code', 'size description'], 'treatment types': ['treatment type code', 'treatment type description'], 'owners': ['owner id', 'first name', 'last name', 'street', 'city', 'state', 'zip code', 'email address', 'home phone', 'cell number'], 'dogs': ['dog id', 'owner id', 'abandoned yes or no', 'breed code', 'size code', 'name', 'age', 'date of birth', 'gender', 'weight', 'date arrived', 'date adopted', 'date departed'], 'professionals': ['professional id', 'role code', 'first name', 'street', 'city', 'state', 'zip code', 'last name', 'email address', 'home phone', 'cell number'], 'treatments': ['treatment id', 'dog id', 'professional id', 'treatment type code', 'date of treatment', 'cost of treatment']}\nforeign_keys:['dogs.owner id = owners.owner id', 'dogs.owner id = owners.owner id', 'dogs.size code = sizes.size code', 'dogs.breed code = breeds.breed code', 'treatments.dog id = dogs.dog id', 'treatments.professional id = professionals.professional id', 'treatments.treatment type code = treatment types.treatment type code']\n", "label_table": ["professionals", "Treatments", "Treatment_types"], "label_col": ["professionals.first_name", "Treatment_types.treatment_type_description", "professionals.professional_id", "Treatments.professional_id", "Treatments.treatment_type_code", "Treatment_types.treatment_type_code"]}, {"query": "How many singers are there?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": []}, {"query": "What is the count of singers?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": []}, {"query": "List the name of singers in ascending order of net worth.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Net_Worth_Millions"]}, {"query": "What are the names of singers ordered by ascending net worth?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Net_Worth_Millions"]}, {"query": "What are the birth year and citizenship of singers?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Birth_Year", "singer.Citizenship"]}, {"query": "What are the birth years and citizenships of the singers?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Birth_Year", "singer.Citizenship"]}, {"query": "List the name of singers whose citizenship is not \"France\".", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Citizenship", "singer.France"]}, {"query": "What are the names of the singers who are not French citizens?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Citizenship", "singer.France"]}, {"query": "Show the name of singers whose birth year is either 1948 or 1949?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Birth_Year"]}, {"query": "What are the names of the singers whose birth years are either 1948 or 1949?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Birth_Year"]}, {"query": "What is the name of the singer with the largest net worth?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Net_Worth_Millions"]}, {"query": "What is the name of the singer who is worth the most?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Name", "singer.Net_Worth_Millions"]}, {"query": "Show different citizenship of singers and the number of singers of each citizenship.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship"]}, {"query": "For each citizenship, how many singers are from that country?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship"]}, {"query": "Please show the most common citizenship of singers.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship"]}, {"query": "What is the most common singer citizenship ?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.citizenship"]}, {"query": "Show different citizenships and the maximum net worth of singers of each citizenship.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship", "singer.Net_Worth_Millions"]}, {"query": "For each citizenship, what is the maximum net worth?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship", "singer.Net_Worth_Millions"]}, {"query": "Show titles of songs and names of singers.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["song.Title", "singer.Name", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "What are the song titles and singer names?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["song.Title", "singer.Name", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "Show distinct names of singers that have songs with sales more than 300000.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "singer.Singer_ID", "song.Singer_ID", "song.Sales"]}, {"query": "what are the different names of the singers that have sales more than 300000?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "singer.Singer_ID", "song.Singer_ID", "song.Sales"]}, {"query": "Show the names of singers that have more than one song.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "What are the names of the singers that have more than one songs?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "Show the names of singers and the total sales of their songs.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "song.Sales", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "For each singer name, what is the total sales for their songs?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer", "song"], "label_col": ["singer.Name", "song.Sales", "singer.Singer_ID", "song.Singer_ID"]}, {"query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship", "singer.Birth_Year"]}, {"query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "table_infos": "table:\n{'singer': ['singer id', 'name', 'birth year', 'net worth millions', 'citizenship'], 'song': ['song id', 'title', 'singer id', 'sales', 'highest position']}\nforeign_keys:['song.singer id = singer.singer id']\n", "label_table": ["singer"], "label_col": ["singer.Citizenship", "singer.Birth_Year"]}, {"query": "How many available features are there in total?", "table_infos": "table:\n{'reference feature types': ['feature type code', 'feature type name'], 'reference property types': ['property type code', 'property type description'], 'other available features': ['feature id', 'feature type code', 'feature name', 'feature description'], 'properties': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count', 'vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3', 'shp feature 1', 'shp feature 2', 'shp feature 3', 'other property details'], 'other property features': ['property id', 'feature id', 'property feature description']}\nforeign_keys:['other available features.feature type code = reference feature types.feature type code', 'properties.property type code = reference property types.property type code', 'other property features.property id = properties.property id', 'other property features.feature id = other available features.feature id']\n", "label_table": ["Other_Available_Features"], "label_col": []}, {"query": "Show the property type descriptions of properties belonging to that code.", "table_infos": "table:\n{'reference feature types': ['feature type code', 'feature type name'], 'reference property types': ['property type code', 'property type description'], 'other available features': ['feature id', 'feature type code', 'feature name', 'feature description'], 'properties': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count', 'vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3', 'shp feature 1', 'shp feature 2', 'shp feature 3', 'other property details'], 'other property features': ['property id', 'feature id', 'property feature description']}\nforeign_keys:['other available features.feature type code = reference feature types.feature type code', 'properties.property type code = reference property types.property type code', 'other property features.property id = properties.property id', 'other property features.feature id = other available features.feature id']\n", "label_table": ["Properties", "Ref_Property_Types"], "label_col": ["Ref_Property_Types.property_type_description", "Properties.property_type_code", "Ref_Property_Types.property_type_code"]}, {"query": "What are the names of properties that are either houses or apartments with more than 1 room?", "table_infos": "table:\n{'reference feature types': ['feature type code', 'feature type name'], 'reference property types': ['property type code', 'property type description'], 'other available features': ['feature id', 'feature type code', 'feature name', 'feature description'], 'properties': ['property id', 'property type code', 'date on market', 'date sold', 'property name', 'property address', 'room count', 'vendor requested price', 'buyer offered price', 'agreed selling price', 'apt feature 1', 'apt feature 2', 'apt feature 3', 'fld feature 1', 'fld feature 2', 'fld feature 3', 'hse feature 1', 'hse feature 2', 'hse feature 3', 'oth feature 1', 'oth feature 2', 'oth feature 3', 'shp feature 1', 'shp feature 2', 'shp feature 3', 'other property details'], 'other property features': ['property id', 'feature id', 'property feature description']}\nforeign_keys:['other available features.feature type code = reference feature types.feature type code', 'properties.property type code = reference property types.property type code', 'other property features.property id = properties.property id', 'other property features.feature id = other available features.feature id']\n", "label_table": ["Properties"], "label_col": ["Properties.property_name", "Properties.property_type_code", "Properties.House", "Properties.Apartment", "Properties.room_count"]}]